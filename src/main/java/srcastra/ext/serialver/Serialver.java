/* * Serialver.java * * Created on 13 juin 2002, 14:48 */package srcastra.ext.serialver;import java.util.ArrayList;import java.io.*;import javax.swing.JOptionPane;/** * * @author  Sébastien * @version  */public class Serialver {    protected static final String FILENAME = "dataStock.dat";    protected static final String FILE_VERSION = "dataStock.v";    protected static final String VERSION = "1.0";        public static final int CLIENT_SOUS = 0;    public static final int CLIENT = 1;    public static final int CLIENT_GROUPE = 2;    public static final int CLIENT_MULTADRESSE = 3;    public static final int CLIENT_REMISES = 4;            protected static ArrayList[] dataStock;    static {        dataStock = new ArrayList[] { new ArrayList(0),                                       new ArrayList(0),                                        new ArrayList(0),                                      new ArrayList(0),                                      new ArrayList(0) };    }/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  DATASTOCK VERSION CONTROLL///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public static void initDataStock() {        File dataFile = new File(FILENAME);        if (dataFile.exists()) {            controlVersion();        }        else {            createDefaultDataStock();        }    }        private static void controlVersion() {        File vf = new File(FILE_VERSION);        // regardons si un fichier de version existe déjà        if (vf.exists()) {            /* le fichier existe -> nous allons le comparer à la version             * actuelle du dataStock */            try {                ObjectInputStream ois = new ObjectInputStream(new FileInputStream(vf));                String localVersion = ois.readUTF();                if (!localVersion.equals(VERSION)) {                    /* la version ne correspond pas on doit restructurer le fichier si necessaire                     * et mettre à jour le n° de version si necessaire */                    updateDataStockVersion();                }            }            catch (FileNotFoundException fnfe) {                JOptionPane.showMessageDialog(null, "Fichier de version non trouvé !", "Serialver : File not found",  JOptionPane.ERROR_MESSAGE);                fnfe.printStackTrace();                System.exit(0);            }            catch (StreamCorruptedException sce) {                JOptionPane.showMessageDialog(null, "Stream Corrompu !", "Serialver : Corruption",  JOptionPane.ERROR_MESSAGE);                sce.printStackTrace();                System.exit(0);            }            catch (IOException ioe) {                JOptionPane.showMessageDialog(null, "Erreur de type IO !", "Serialver : IO",  JOptionPane.ERROR_MESSAGE);                ioe.printStackTrace();                System.exit(0);            }            catch (Exception e) {                JOptionPane.showMessageDialog(null, "Erreur", "Serialver : Erreur",  JOptionPane.ERROR_MESSAGE);                e.printStackTrace();                System.exit(0);            }                    }        else {            // le fichier de version n'existe pas            createVersionFile();                   }           }        private static void createDefaultDataStock() {        File defData = new File(FILENAME);        try {            if (!defData.exists()) {                defData.createNewFile();            }            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILENAME, false));            oos.writeObject(dataStock);            oos.close();        }        catch (IOException ioe) {            JOptionPane.showMessageDialog(null, "IOExeption soulevée !", "Serialver : createDefaultDataStock",  JOptionPane.ERROR_MESSAGE);            ioe.printStackTrace();            System.exit(0);        }        catch (Exception e) {            JOptionPane.showMessageDialog(null, "Exception soulevée !", "Serialver : createDefaultDataStock",  JOptionPane.ERROR_MESSAGE);            e.printStackTrace();            System.exit(0);        }    }                        private static void createVersionFile() {        File version = new File(FILE_VERSION);        try {            if (!version.exists()) {                version.createNewFile();            }            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILE_VERSION, false));            oos.writeUTF(VERSION);            oos.close();        }        catch (IOException ioe) {            JOptionPane.showMessageDialog(null, "IOExeption soulevée !", "Serialver : createVersionFile",  JOptionPane.ERROR_MESSAGE);            ioe.printStackTrace();            System.exit(0);        }        catch (Exception e) {            JOptionPane.showMessageDialog(null, "Exception soulevée !", "Serialver : createVersionFile",  JOptionPane.ERROR_MESSAGE);            e.printStackTrace();            System.exit(0);        }    }        private static void updateDataStockVersion() {        // ouverture du fichier, comparaison avec la version du repository        try {            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILENAME));            ArrayList[] oldDataStock = (ArrayList[]) ois.readObject();            ois.close();                        ArrayList[] newDataStock;            int oldSize = oldDataStock.length;            int newSize = dataStock.length;            if (oldSize < newSize) {                newDataStock = new ArrayList[newSize];                for (int i=0; i < oldSize; i++) {                    newDataStock[i] = oldDataStock[i];                }                for (int i=oldSize; i < newSize; i++) {                    newDataStock[i] = new ArrayList(0);                }                                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILENAME, false));                oos.writeObject(newDataStock);                oos.close();                createVersionFile();                            }                   }        catch (FileNotFoundException fnfe) {            JOptionPane.showMessageDialog(null, "Impossible de trouvé le fichier : " + FILENAME + " !", "Serialver : updateDataSockVersion",  JOptionPane.ERROR_MESSAGE);           fnfe.printStackTrace();            System.exit(0);        }        catch (StreamCorruptedException sce) {            JOptionPane.showMessageDialog(null, "Stream Corrompue : impossible de la lire !", "Serialver : updateDataSockVersion",  JOptionPane.ERROR_MESSAGE);           sce.printStackTrace();            System.exit(0);        }        catch (IOException ioe) {            JOptionPane.showMessageDialog(null, "IOexception soulevée !", "Serialver : updateDataSockVersion",  JOptionPane.ERROR_MESSAGE);            ioe.printStackTrace();            System.exit(0);        }        catch (ClassNotFoundException cnfe) {            JOptionPane.showMessageDialog(null, "Impossible de trouver l'objet !", "Serialver : updateDataSockVersion",  JOptionPane.ERROR_MESSAGE);            cnfe.printStackTrace();            System.exit(0);        }        catch (ClassCastException cce) {            JOptionPane.showMessageDialog(null, "Impossible de convertir l'objet !", "Serialver : updateDataSockVersion",  JOptionPane.ERROR_MESSAGE);            cce.printStackTrace();            System.exit(0);        }        catch (Exception e) {            JOptionPane.showMessageDialog(null, "Exception soulevée !", "Serialver : updateDataSockVersion",  JOptionPane.ERROR_MESSAGE);            e.printStackTrace();            System.exit(0);        }    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// DATASTOCK OPERATION////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public static int insertObject(Object object, int type) {        ArrayList[] data = loadDataStock();        ArrayList table = data[type];        int cleUnik = table.size();        cleUnik++;        ((SerialverData)object).setObjectCleUnik(cleUnik);        table.add(object);        data[type] = table;        saveDataStock(data);        return cleUnik;    }        public static Object selectObject(int cleUnik, int type) {       ArrayList[] data = loadDataStock();       ArrayList table = data[type];       Object o = null;       for (int i=0; i < table.size(); i++) {           o = table.get(i);           if (((SerialverData)o).getObjectCleUnik() == cleUnik) {               return o;           }       }       return null;    }        public static ArrayList selectObject(int type) {       ArrayList[] data = loadDataStock();       ArrayList table = data[type];       return table;    }        public static void updateObject(Object newObject, int cleUnik, int type) {       ArrayList[] data = loadDataStock();       ArrayList table = data[type];       Object o = null;       int adress = -1;       for (int i=0; i < table.size(); i++) {           o = table.get(i);           if (((SerialverData)o).getObjectCleUnik() == cleUnik) {               adress = i;               break;           }       }       if (adress > -1) {           table.set(adress, newObject);           data[type] = table;           saveDataStock(data);       }       else {               JOptionPane.showMessageDialog(null, "Impossible de modifier cet Objet  !", "Serialver : updateObject",  JOptionPane.ERROR_MESSAGE);       }             }        public static void deleteObject(int cleUnik, int type) {       ArrayList[] data = loadDataStock();       ArrayList table = data[type];       Object o = null;       int adress = -1;       for (int i=0; i < table.size(); i++) {           o = table.get(i);           if (((SerialverData)o).getObjectCleUnik() == cleUnik) {               adress = i;               break;           }       }       if (adress > -1) {           table.remove(adress);           table.trimToSize();           data[type] = table;           saveDataStock(data);       }       else {               JOptionPane.showMessageDialog(null, "Impossible de modifier cet Objet  !", "Serialver : updateObject",  JOptionPane.ERROR_MESSAGE);       }                                     }            private static ArrayList[] loadDataStock() {        try {            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILENAME));            ArrayList[] data = (ArrayList[])ois.readObject();            return data;        }        catch (FileNotFoundException fnfe) {            JOptionPane.showMessageDialog(null, "Impossible de trouvé le fichier : " + FILENAME + " !", "Serialver : loadDataStock",  JOptionPane.ERROR_MESSAGE);            System.exit(0);            fnfe.printStackTrace();        }        catch (StreamCorruptedException sce) {            JOptionPane.showMessageDialog(null, "Stream Corrompue : impossible de la lire !", "Serialver : loadDataStock",  JOptionPane.ERROR_MESSAGE);            System.exit(0);            sce.printStackTrace();        }        catch (OptionalDataException ode) {            JOptionPane.showMessageDialog(null, "Problème à la lecture de l'objet", "Serialver : loadDataStock",  JOptionPane.ERROR_MESSAGE);            ode.printStackTrace();            System.exit(0);        }        catch (IOException ioe) {            JOptionPane.showMessageDialog(null, "IOexception soulevée !", "Serialver : loadDataStock",  JOptionPane.ERROR_MESSAGE);            ioe.printStackTrace();            System.exit(0);        }        catch (ClassNotFoundException cnfe) {            JOptionPane.showMessageDialog(null, "Impossible de trouver l'objet !", "Serialver : loadDataStock",  JOptionPane.ERROR_MESSAGE);            cnfe.printStackTrace();            System.exit(0);                   }        catch (ClassCastException cce) {            JOptionPane.showMessageDialog(null, "Impossible de convertir l'objet !", "Serialver : loadDataStock",  JOptionPane.ERROR_MESSAGE);            cce.printStackTrace();            System.exit(0);        }        catch (Exception e) {            JOptionPane.showMessageDialog(null, "Exception soulevée !", "Serialver : loadDataStock",  JOptionPane.ERROR_MESSAGE);            e.printStackTrace();            System.exit(0);        }        return new ArrayList[0];    }       private static void saveDataStock(ArrayList[] data) {        try {            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILENAME, false));            oos.writeObject(data);            oos.close();        }        catch (IOException ioe) {            JOptionPane.showMessageDialog(null, "IOExeption soulevée !", "Serialver : createVersionFile",  JOptionPane.ERROR_MESSAGE);            ioe.printStackTrace();            System.exit(0);        }        catch (Exception e) {            JOptionPane.showMessageDialog(null, "Exception soulevée !", "Serialver : createVersionFile",  JOptionPane.ERROR_MESSAGE);            e.printStackTrace();            System.exit(0);        }                    }                        }