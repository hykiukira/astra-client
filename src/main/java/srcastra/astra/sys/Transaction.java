/* * Transaction.java * * Created on 20 août 2002, 11:19 */package srcastra.astra.sys;import java.sql.*;import srcastra.astra.sys.classetransfert.Gestionerreur_T;import srcastra.astra.sys.Logger;import srcastra.astra.sys.compress.CompressArray;import java.util.ArrayList;/** * * @author  David */public class Transaction {        /** Creates a new instance of Transaction */    public Transaction() {    }    public static Statement begin(Connection contmp) {        Statement select=null;        try{            select=contmp.createStatement();            select.execute("BEGIN");        }        catch(SQLException e1) {            Logger.getDefaultLogger().log(Logger.LOG_SECURITY,"Erreur dans beginfontion :"+e1);            try {                select=contmp.createStatement();                select.execute("ROLLBACK");            }            catch(SQLException e2) {                Logger.getDefaultLogger().log(Logger.LOG_SECURITY,"Erreur dans beginfontion :"+e1);            }        }        return select;    }    public static void commit(Connection contmp) {        Statement select=null;        try {            select=contmp.createStatement();            select.execute("COMMIT");        }        catch(SQLException e1) {            Logger.getDefaultLogger().log(Logger.LOG_SECURITY,"Erreur dans beginfontion :"+e1);            try {                select=contmp.createStatement();                select.execute("ROLLBACK");            }            catch(SQLException e2) {                Logger.getDefaultLogger().log(Logger.LOG_SECURITY,"Erreur dans beginfontion :"+e1);            }        }    }    public static void rollback(Connection contmp) {        PreparedStatement select=null;        try {            select=contmp.prepareStatement("ROLLBACk");            select.execute();            Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"Rollback effectué avec succès");        }        catch(SQLException e1) {            Logger.getDefaultLogger().log(Logger.LOG_SECURITY,"Erreur dans  rollbackfunction  :"+e1.getErrorCode()+"  "+e1.getMessage());            try {                 select=contmp.prepareStatement("ROLLBACk");                select.execute();            }            catch(SQLException e2) {                Logger.getDefaultLogger().log(Logger.LOG_SECURITY,"Erreur dans rollbackfunction  :"+e2.getErrorCode()+"  "+e2.getMessage());            }        }    }    public static ResultSet execrequete2(String sqlrequete,Connection contmp, Statement select) {        ResultSet reccord;        try{            reccord=select.executeQuery(sqlrequete);// Add your handling        }catch(SQLException e) {            Logger.getDefaultLogger().log(Logger.LOG_SECURITY,"exception dans execrequete2 :"+e);            reccord=null;        }        return reccord;    }    //*******************************************************************************************    //    public static ResultSet execrequete(String sqlrequete,Connection contmp) {        ResultSet reccord;        try{            Statement select=contmp.createStatement();            reccord=select.executeQuery(sqlrequete);// Add your handling        }catch(SQLException e) {            Logger.getDefaultLogger().log(Logger.LOG_SECURITY,e.getMessage()+"    "+e.getErrorCode());            reccord=null;            rollback(contmp);        }        return reccord;    }        public static ResultSet execrequete3(String sqlrequete,Connection contmp,Gestionerreur_T erreur) {        ResultSet reccord;        try{            Statement select=contmp.createStatement();            reccord=select.executeQuery(sqlrequete);// Add your handling            erreur.setErreurcode(10000);                    }catch(SQLException e) {            Logger.getDefaultLogger().log(Logger.LOG_SECURITY,e.getMessage()+"    "+e.getErrorCode());            erreur.setErreurcode(e.getErrorCode());            erreur.setErreurmessage(e.getMessage());            reccord=null;            rollback(contmp);        }        return reccord;    }        public static Gestionerreur_T execrequeteModif(String sqlrequete,Connection usercon) {        Gestionerreur_T tmpret=new  Gestionerreur_T();        Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"je vais modifier");        Statement select=null;        try{            select=usercon.createStatement();            select.execute(sqlrequete);// Add your han            Logger.getDefaultLogger().log(Logger.LOG_DEBUG,tmpret.getErreurmessage());            commit(usercon);            tmpret.setErreurmessage("Modification réalisée avec succès");            tmpret.setErreurcode(10000);        }catch(SQLException e) {            Logger.getDefaultLogger().log(Logger.LOG_SECURITY,"impossible d'effectuer le Rollback dans execrequetModif");            tmpret.setErreurcode(e.getErrorCode());            tmpret.setErreurmessage(e.getMessage());            Logger.getDefaultLogger().log(Logger.LOG_SECURITY,"message:"+tmpret.getErreurmessage()+"   "+"Erreur code:"+tmpret.getErreurcode());            rollback(usercon);            Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"Rollback effectué");        }        catch(Exception e2) {            Logger.getDefaultLogger().log(Logger.LOG_WARNING,"exception dans execrequeteModif: "+e2);        }        return tmpret;            }        public static int genereId(String sqlrequete,Connection usercon) {        Statement select=null;        ResultSet tmpresult=null;        int id=0;        try{            select=usercon.createStatement();            //select.execute("BEGIN;");            select.execute(sqlrequete);// Add your handling            tmpresult=select.executeQuery("select LAST_INSERT_ID();");            tmpresult.first();            id=tmpresult.getInt(1);            Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"numero du fournisseur "+id);            tmpresult.close();        }catch(SQLException e) {            try{                select.execute("ROLLBACK;");            }            catch(SQLException e4) {                Logger.getDefaultLogger().log(Logger.LOG_WARNING,"impossible d'effectuer le Rollback dans execrequeteinsert");            }                    }        return id;    }    public static Gestionerreur_T execrequeteinsert(String sqlrequete,java.sql.Connection usercon) {        Gestionerreur_T tmpret=new  Gestionerreur_T();        Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"je vais insérer");        Statement select=null;        try{            select=usercon.createStatement();            //select.execute("BEGIN;");            select.execute(sqlrequete);// Add your handling            ResultSet tmpresult=select.executeQuery("select LAST_INSERT_ID();");            tmpresult.first();            int id=tmpresult.getInt(1);            Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"numero du fournisseur "+id);            tmpresult.close();            tmpret.setTmpint(id);            tmpret.setErreurcode(10000);            tmpret.setErreurmessage("Insertion réalisée avec succès");            Logger.getDefaultLogger().log(Logger.LOG_DEBUG,tmpret.getErreurmessage());            // select.execute("COMMIT;");        }catch(SQLException e) {            rollback(usercon);            tmpret.setErreurcode(e.getErrorCode());            tmpret.setErreurmessage(e.getMessage());            Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"message:"+tmpret.getErreurmessage()+"   "+"Erreur code:"+tmpret.getErreurcode());        }        catch(Exception e2) {            Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"exception dans insertrequete: "+e2);        }        return tmpret;    }    public static Gestionerreur_T getLastInsertId(Connection con){        Gestionerreur_T tmpret=new Gestionerreur_T();        try{         PreparedStatement pstmt=con.prepareStatement("select LAST_INSERT_ID()");         ResultSet tmpresult=pstmt.executeQuery();         tmpresult.first();         int id=tmpresult.getInt(1);         tmpresult.close();         tmpret.setTmpint(id);         tmpret.setErreurcode(10000);         tmpret.setErreurmessage("Insertion réalisée avec succès");               return tmpret;        }catch(SQLException sn){          sn.printStackTrace();           }        return null;    }     public static int getLastInsertId2(Connection con){        try{         PreparedStatement pstmt=con.prepareStatement("select LAST_INSERT_ID()");         ResultSet tmpresult=pstmt.executeQuery();         tmpresult.first();         int id=tmpresult.getInt(1);         tmpresult.close();         return id;        }catch(SQLException sn){          sn.printStackTrace();           }        return 0;    }     public static java.util.ArrayList selecttraductionDestination(String requete1,String requete2,Connection usercon,int cas) {        Statement select=null;        ResultSet reccord=null;        ResultSet reccord2=null;        java.util.ArrayList returnvalue=new java.util.ArrayList();        boolean sw=false;        int  nbrLigne=0;        Object[] tmpobj=null;        try{            select=usercon.createStatement();            reccord=Transaction.execrequete(requete1,usercon);// Add your handling            reccord2=Transaction.execrequete(requete2,usercon);            reccord.last();            nbrLigne=reccord.getRow();            if(nbrLigne!=0) {                reccord2.last();                nbrLigne=reccord2.getRow();                reccord.beforeFirst();                reccord2.first();;                while(reccord.next()) {                    //thNombreLangue++;                    if(cas==1)                        tmpobj=new Object[3];                    else if(cas==2)                        tmpobj=new Object[4];                    tmpobj[0]=(Object)reccord.getObject(1);                    tmpobj[1]=(Object)reccord.getObject(2);                    tmpobj[2]=(Object)reccord2.getObject(2);                    returnvalue.add(tmpobj);                }            }        }        catch(SQLException e) {            Logger.getDefaultLogger().log(Logger.LOG_WARNING,"Exception dans  selecttraduction: "+e);        }        return returnvalue;    }    public static java.util.ArrayList selecttraduction(String requete1,String requete2,Connection usercon,int cas) {        Statement select=null;        ResultSet reccord=null;        ResultSet reccord2=null;        java.util.ArrayList returnvalue=new java.util.ArrayList();        boolean sw=false;        int  nbrLigne=0;        Object[] tmpobj=null;        try{            select=usercon.createStatement();            reccord=Transaction.execrequete(requete1,usercon);// Add your handling            reccord2=Transaction.execrequete(requete2,usercon);            reccord.last();            nbrLigne=reccord.getRow();            if(nbrLigne!=0) {                reccord2.last();                nbrLigne=reccord2.getRow();                reccord.beforeFirst();                reccord2.beforeFirst();                while(reccord.next()) {                    //thNombreLangue++;                    if(cas==1)                        tmpobj=new Object[3];                    else if(cas==2)                        tmpobj=new Object[4];                    tmpobj[0]=(Object)reccord.getObject(1);                    tmpobj[1]=(Object)reccord.getObject(2);                    if(nbrLigne!=0) {                        while(reccord2.next()) {                            if(tmpobj[0].equals(reccord2.getObject(1))) {                                if(cas==1) {                                    tmpobj[2]=(Object)reccord2.getObject(2);                                }                                else if(cas==2) {                                    tmpobj[2]=(Object)reccord2.getObject(2);                                    tmpobj[3]=(Object)reccord2.getObject(3);                                }                                sw=true;                            }                        }                        if(!sw)                            if(cas==1) {                                tmpobj[2]="none";                            }                            else if(cas==2) {                                tmpobj[2]="none";                                tmpobj[3]="none";                            }                        sw=false;                        reccord2.beforeFirst();                    }                    returnvalue.add(tmpobj);                }                            }        }        catch(SQLException e) {            Logger.getDefaultLogger().log(Logger.LOG_WARNING,"Exception dans  selecttraduction: "+e);        }        return returnvalue;    }    public static String[] renvNomUserPourSession(Connection con,String numSessionCrea,String numSessionModif) {        String sqlrequete=null;        ResultSet tmpResult=null;        ResultSet tmpResult2=null;        String [] returnValue=new String[2];        int tmpNbrLigne=0;        int tmpNbrLigne2=0;        sqlrequete="Select u1.urnom,s1.snumerosession from user u1, session s1 where s1.urcleunik=u1.urcleunik and s1.snumerosession='"+numSessionCrea+"';";        tmpResult=Transaction.execrequete(sqlrequete,con);        sqlrequete="Select u1.urnom,s1.snumerosession from user u1, session s1 where s1.urcleunik=u1.urcleunik and s1.snumerosession='"+numSessionModif+"';";        tmpResult2=Transaction.execrequete(sqlrequete,con);        try{            tmpResult.last();            tmpResult2.last();            tmpNbrLigne=tmpResult.getRow();            tmpNbrLigne2=tmpResult2.getRow();            if(tmpNbrLigne!=0 && tmpNbrLigne2!=0){                tmpResult.first();                tmpResult2.first();                returnValue[0]=tmpResult.getString(1);                returnValue[0]=tmpResult2.getString(1);            }            else {                returnValue[0]="Aucun";                returnValue[1]="Aucun";            }        }        catch(SQLException e) {            Logger.getDefaultLogger().log(Logger.LOG_SECURITY,"Erreur dans renvNomUserPourSession: "+e);        }        return returnValue;    }        public static CompressArray generecombostest2(String Sqlrequete,Connection usercon) {        ArrayList optionarray=null;        int tmpcolcount;        int tmpligncount;        Object[] tmp;        boolean check;        CompressArray myArray;        ResultSetMetaData tmpresultmeta;        ResultSet tmpresult=Transaction.execrequete(Sqlrequete,usercon);        myArray=new CompressArray();        myArray.Compress_from_resulset(tmpresult);        return myArray;            }    public static CompressArray generecombostest(String Sqlrequete,Connection usercon) {        ArrayList optionarray=null;        int tmpcolcount;        int tmpligncount;        Object[] tmp;        boolean check;        CompressArray myArray;        ResultSet tmpresult=Transaction.execrequete(Sqlrequete,usercon);        myArray=new CompressArray();        myArray.Compress_from_resulset(tmpresult);        return myArray;            }     public static CompressArray generecombostest3(String Sqlrequete,Connection usercon) {        ArrayList optionarray=null;        int tmpcolcount;        int tmpligncount;        Object[] tmp;        boolean check;        CompressArray myArray;        ResultSet tmpresult=Transaction.execrequete(Sqlrequete,usercon);        myArray=new CompressArray();        myArray.Compress_from_resulset2(tmpresult);        return myArray;            }}