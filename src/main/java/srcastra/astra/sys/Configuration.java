/* * Configuration.java * * Created on 31 juillet 2002, 10:09 */package srcastra.astra.sys;import java.io.*;import java.net.*;/** Provides a way to save datas permanently * * @author  david */public class Configuration extends java.lang.Object {    private static Configuration configurationItem;    private File directory;    public static Configuration getConfiguration()    {        return initConfig();    }    /** Initialise the configuration object.     * If configuration object already exist, return it.     */    public static Configuration initConfig(){        if (configurationItem != null)            return configurationItem;        configurationItem=new Configuration();        return configurationItem;    }        /** Initialise the configuration object.     * The location parameter is the root directory     * in which a subdirectory will be created.     */    public Configuration initConfig(File location){        if (configurationItem != null)            return configurationItem;        configurationItem=new Configuration(location);        return configurationItem;    }    /** Creates a new instance of Configuration */    protected Configuration() {        this(getDefaultAstraDir());    }        /** Force the specified filename to be a directory.     * If a file with the specified name already exists,     * it is deleted.      */    protected void forceDirectory (String name) {        File tmp = new File (directory, name);        if ((tmp.exists()) && (!tmp.isDirectory()))        {            tmp.delete();            tmp = new File (directory, name);        }        if (!tmp.exists())            try{                javax.swing.filechooser.FileSystemView.getFileSystemView().createNewFolder(tmp);}            catch (Exception e){e.printStackTrace();}    }        /** Try to read an object from specified directory, with specified filename.     * If the obuject could not be read, defaultObject parameter is     * returned.     */    public Object tryReadObject (Object defaultObject, String directoryName, String fileName)    {        File dir= new File (directory, directoryName);        if (!dir.exists())        {            return defaultObject;        }        File fichier = new File (dir,fileName);        if (!fichier.exists())            return defaultObject;        if (!fichier.isFile())            return defaultObject;        Logger.getDefaultLogger().setMinLogLevel(2);        Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"Reading file");        try        {            ObjectInputStream fstream = new ObjectInputStream(new FileInputStream(fichier));            return fstream.readObject ();        }        catch (Exception e)        {            e.printStackTrace();            return defaultObject;        }    }        public  void tryWriteObject (Object o, String directoryName, String fileName)    {        File dir= new File (directory, directoryName);        if (!dir.exists())        {            forceDirectory (directoryName);            dir= new File (directory, directoryName);            if (!dir.exists())                return;        }        File fichier = new File (dir,fileName);        if (!fichier.exists())            try            {                fichier.createNewFile();            }catch (Exception e){e.printStackTrace();}        if (!fichier.isFile())            return;        Logger.getDefaultLogger().setMinLogLevel(2);        Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"Writing file");        try        {            ObjectOutputStream fstream = new ObjectOutputStream(new FileOutputStream(fichier));            fstream.writeObject(o);            fstream.close();        }        catch (Exception e)        {            e.printStackTrace();        }    }    /** create a new instance of Configuration with specified location*/    protected Configuration (File location){        File tmp2 = new File (location,"astra");                if (!tmp2.exists())        {            try            {                javax.swing.filechooser.FileSystemView.getFileSystemView().createNewFolder(tmp2);            }            catch (IOException e)            {                e.printStackTrace();            }        }        directory=tmp2;    }    private static File getDefaultAstraDir()    {        return javax.swing.filechooser.FileSystemView.getFileSystemView().getHomeDirectory();    }}