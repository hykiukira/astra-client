/* * ManageCompte.java * * Created on 11 juillet 2003, 11:10 */package srcastra.astra.sys.rmi;import java.util.*;import srcastra.astra.sys.classetransfert.dossier.*;import srcastra.astra.sys.rmi.utils.*;import srcastra.astra.sys.rmi.Exception.*;import java.rmi.*;import srcastra.astra.sys.classetransfert.configuration.*;import java.sql.*;import srcastra.astra.sys.classetransfert.utils.*;import srcastra.astra.gui.modules.compta.achat.*;import srcastra.astra.sys.classetransfert.compta.*;/** * * @author  thomas */public class ManageCompte {    GlobalRmiInterface compte;    GlobalRmiInterface comptecentral;    GlobalRmiInterface souscomptecentral;    GlobalRmiInterface traductioncompte;    GlobalRmiInterface entite;    GlobalRmiInterface user;    InterCompteInterface interCompte;    astraimplement serveur;    ParamComptableInterface paramcompt;    Hashtable chargeProduit=new Hashtable();    Hashtable charegeSupreduc=new Hashtable();    Hashtable achatHash=new Hashtable();    Hashtable achatHashCp=new Hashtable();    Hashtable vente=new Hashtable();    Hashtable tva=new Hashtable();    Hashtable caisse=new Hashtable();    Hashtable achatTva=new Hashtable();    Poolconnection tmpool;    Entite tmpentite;    User tmpuser;        /** Creates a new instance of ManageCompte */    public ManageCompte(astraimplement serveur) {      /* try{        compte=serveur.getCompteRmi();        comptecentral=serveur.getComptecentral();     //   souscomptecentral=new SouscomtpecentralRmi(serveur);        traductioncompte=new Traduction_compteRmi(serveur);        interCompte=new InterCompteRmi(serveur);        entite=new EntiteRmi(serveur);        user=new UserRmi(serveur);              this.serveur=serveur;              }catch(java.rmi.RemoteException re){          re.printStackTrace();           }*/    }   public void checkCompteCentralisateur(int urcleunik,int typecompte,int eecleunik,Connection con)throws RemoteException,ServeurSqlFailure{       CompteCentral tmpcompte=(CompteCentral)this.comptecentral.get(urcleunik,typecompte,0);       if(typecompte==this.CLIENT){           //paramcompt=serveur.renvParamCompta(urcleunik).addJournalEntite(entite                 vente.put(new Long(1),new Object[]{new Integer(tmpcompte.getCe_cleunik()),new Integer(tmpcompte.getCe_cleunik()),new Integer(tmpcompte.getCour_cleunik())});         checkCOmpteResultat(urcleunik,eecleunik,vente,con,tmpcompte,0);       }       else if(typecompte==this.TVAPAY){                  tva.put(new Long(1),new Object[]{new Integer(tmpcompte.getCe_cleunik()),new Integer(tmpcompte.getCe_cleunik()),new Integer(tmpcompte.getCour_cleunik())});            checkCOmpteResultat(urcleunik,eecleunik,tva,con,tmpcompte,0);                 }         else if(typecompte==this.CAISSE){          caisse.put(new Long(1),new Object[]{new Integer(tmpcompte.getCe_cleunik()),new Integer(tmpcompte.getCe_cleunik()),new Integer(tmpcompte.getCour_cleunik())});            checkCOmpteResultat(urcleunik,eecleunik,caisse,con,tmpcompte,serveur.getConfig().getCaisseparutilisateur());       }       /* else if(typecompte==this.FOURNISSEUR){         JournalCompta_T tmp=serveur.renvParamCompta(urcleunik).getGlobalJournal(urcleunik,ParamComptableInterface.JOURNAL_ACHAT,0);         achatHash.put(new Long(1),new Object[]{new Integer(tmp.getCe_cleunik()),new Integer(tmp.getCe_cleunik()),new Integer(tmp.getCe_cleunik())});         checkCOmpteResultat(urcleunik,eecleunik,vente,con,tmpcompte,0);                   }*/   }   public void achatCompte(Achat_T achat,int urcleunik)throws RemoteException,ServeurSqlFailure{       tmpool=serveur.getConnection(urcleunik,true);       tmpentite=(Entite)this.entite.get(urcleunik,tmpool.getNumeroentite(),0);       tmpuser=(User)this.user.get(urcleunik,tmpool.getUrcle2(),0);        JournalCompta_T tmp2=serveur.renvParamCompta(urcleunik).getGlobalJournal(urcleunik,ParamComptableInterface.JOURNAL_ACHAT,0);       CompteCentral tmpcompte=(CompteCentral)this.comptecentral.get(urcleunik,FOURNISSEUR,0);       CompteCentral tmpcomptetva=(CompteCentral)this.comptecentral.get(urcleunik,TVAREC,0);       achatTva.put(new Long(1),new Object[]{new Integer(tmpcomptetva.getCe_cleunik()),new Integer(tmpcomptetva.getCe_cleunik()),new Integer(tmpcomptetva.getCour_cleunik())});       achatHash.put(new Long(1),new Object[]{new Integer(tmpcompte.getCe_cleunik()),new Integer(tmpcompte.getCe_cleunik()),new Integer(tmpcompte.getCour_cleunik())});       achat.setComtpe(achatHash);       achat.setComtpetva(achatTva);       if(achat.getDrcleunik()!=0){             checkCOmpteResultat(urcleunik,tmpentite.getEecleunik(),achatHash,tmpool.getConuser(),tmpcompte,0);              achat.setComtpecp(achatHashCp);       if(achat.getAchat()!=null){         for(int i=0;i<achat.getAchat().size();i++){             Object[] tmp=(Object[])achat.getAchat().get(i);             if(tmp!=null){                achatHashCp.put(tmp[11],new Object[]{((Integer)tmp[0]),((Integer)tmp[0])});             }           }           checkCOmpteResultat(urcleunik,tmpool.getNumeroentite(),achatHash,tmpool.getConuser(),null,0);         }       }   }   public void  DossierCompte(Dossier_T dossier,int urcleunik) throws RemoteException,ServeurSqlFailure{       tmpool=serveur.getConnection(urcleunik,true);       Hashtable dossierH=dossier.getHasharray();       tmpentite=(Entite)this.entite.get(urcleunik,tmpool.getNumeroentite(),0);       tmpuser=(User)this.user.get(urcleunik,tmpool.getUrcle2(),0);            //   if(serveur.getConfig().getCaisseparutilisateur()==0)       //     serveur.renvParamCompta(urcleunik).addJournalEntite(tmpentite,urcleunik,paramcompt.JOURNA);       // else         //   serveur.renvParamCompta(urcleunik).addJournalUser(tmpentite,urcleunik,paramcompt.JOURNAL_VENTE);                  if(dossierH !=null){            for(Enumeration enu=dossierH.keys();enu.hasMoreElements();){              Hashtable prodH=(Hashtable)dossierH.get(enu.nextElement());              if(prodH!=null)               for(Enumeration enum2=prodH.keys();enum2.hasMoreElements();){                 produit_T prod=(produit_T)prodH.get(enum2.nextElement());                  if(prod!=null){                     if(prod.getGroupdec()!=null){                     chargeProduit.put(new Long(prod.getAt_cleunik()),new Object[]{new Integer(prod.getGroupdec().getGncomptevente()),new Integer(prod.getGroupdec().getGncomptevente())});                     if(prod.getSup_reduc()!=null){                      for(Enumeration enum3=prod.getSup_reduc().keys();enum3.hasMoreElements();){                          Sup_reduc_T sup=(Sup_reduc_T)prod.getSup_reduc().get(enum3.nextElement());                          if(sup!=null)                              charegeSupreduc.put(new Long(sup.getAt_cleunik()),new Object[]{new Integer(sup.getGroupdec().getGncomptevente()),new Integer(sup.getGroupdec().getGncomptevente())});                              ;                      }                        }                     }else{                                                                   }                 }               }                         }                 }  /*    if(dossier.getPayement()!=null){           java.util.TreeMap treemap=dossier.getPayement();           java.util.Set set=treemap.keySet();           java.util.Iterator iterator=set.iterator();           while(iterator.hasNext())            {                Payement_T lpayement=(Payement_T)treemap.get((Long)iterator.next());                if(all){                    nc.sendToChain("insert",lpayement);                }else{                    if(lpayement.isNewreccord())                         nc.sendToChain("insert",lpayement);                }            }      }    */        checkCOmpteResultat(urcleunik,tmpool.getNumeroentite(),chargeProduit,tmpool.getConuser(),null,0);       checkCOmpteResultat(urcleunik,tmpool.getNumeroentite(),charegeSupreduc,tmpool.getConuser(),null,0);       checkCompteCentralisateur(urcleunik,this.CLIENT,tmpool.getNumeroentite(),tmpool.getConuser());       checkCompteCentralisateur(urcleunik,this.TVAPAY,tmpool.getNumeroentite(),tmpool.getConuser());       checkCompteCentralisateur(urcleunik,this.CAISSE,tmpool.getNumeroentite(),tmpool.getConuser());       dossier.setCompteResultat(this.chargeProduit);       dossier.setCompteSupreduc(this.charegeSupreduc);       dossier.setCompteVente(this.vente);       dossier.setCompteTva(this.tva);               dossier.setCompteCaisse(this.caisse);   } private int insertSousCentral(CompteCentral central,Entite entite,int idnewcompte,int urcleunik,Connection con)throws RemoteException,ServeurSqlFailure{    if(central!=null){        String libelle1=central.getCour_intitule1()+" "+entite.getEeabrev();        String libelle2=central.getCour_intitule2()+" "+entite.getEeabrev();        Souscomtpecentral tmp=new Souscomtpecentral();        tmp.setCour_cleunik(central.getCour_cleunik());        tmp.setSoal_intitule1(libelle1);         tmp.setSoal_intitule2(libelle2);        tmp.setSoal_cleunik(idnewcompte);        this.souscomptecentral.insert(urcleunik,tmp);        return GetId.getLastId(con);    }    return 0;   }private int insertJounalCompta(CompteCentral central,Entite entite,int idnewcompte,int urcleunik,Connection con)throws RemoteException,ServeurSqlFailure{    int idjournal=0;    if(central!=null){          if(serveur.getConfig().getMultibureaux()==1){       if(central.getCour_cleunik()==this.CLIENT){            //     idjournal=serveur.renvParamCompta(urcleunik).addJournalEntite(tmpentite,urcleunik,paramcompt.JOURNAL_VENTE,idnewcompte);          //   idjournal=serveur.renvParamCompta(urcleunik).addJournalEntite(tmpentite,urcleunik,paramcompt.JOURNAL_NCVENTE,idnewcompte);       }             else if(central.getCour_cleunik()==this.CAISSE){           if(serveur.getConfig().getCaisseparutilisateur()==1){            // idjournal=serveur.renvParamCompta(urcleunik).addJournalUser(tmpentite,urcleunik,paramcompt.JOURNAL_CAISSE,idnewcompte,tmpuser);                        }           else{            // idjournal=serveur.renvParamCompta(urcleunik).addJournalEntite(tmpentite,urcleunik,paramcompt.JOURNAL_CAISSE,idnewcompte);                        }        }         } }       return idjournal;   }private void checkCOmpteResultat(int urcleunik,int eecleunik,Hashtable hash,Connection con,CompteCentral central,int multiusercaisse)throws RemoteException,ServeurSqlFailure{    if(serveur.getConfig().getMultibureaux()==1){             if(hash!=null){       for(Enumeration enu=hash.keys();enu.hasMoreElements();){          long product=((Long)enu.nextElement()).longValue();          Object[] tmptab=((Object[])hash.get(new Long(product)));          int compte2=((Integer)tmptab[0]).intValue();        //  int cour_cleunik=((Integer)tmptab[2]).intValue();          Object tmp;          if(multiusercaisse==1)             tmp=interCompte.getUserCompte(urcleunik,compte2,0);            else             tmp=interCompte.getEntiteResultat(urcleunik,compte2,0,eecleunik);          if(tmp instanceof InterCompte){             // Object[] tmptab=(Object[])hash.get(new Long(product));              tmptab[1]=new Integer(((InterCompte)tmp).getCe_cleunik2());              hash.put(new Long(product),tmptab);          }          else{              int num=((Integer)tmp).intValue();              String newcompte=null;           Compte tmpcompte=(Compte)this.compte.get(urcleunik,compte2,0);                 if(num<10)               newcompte=tmpcompte.getCe_num()+"0"+new Integer(tmpentite.getEecleunik()).toString();           else                newcompte=tmpcompte.getCe_num()+new Integer(tmpentite.getEecleunik()).toString();              if(multiusercaisse==1){           if(tmpool.getUrcle2()<10)               newcompte=newcompte+"0"+new Integer(tmpool.getUrcle2()).toString();           else                newcompte= newcompte+new Integer(tmpool.getUrcle2()).toString();                                           }                        tmpcompte.setCe_num(Long.parseLong(newcompte));           compte.insert(urcleunik,tmpcompte);           int idnewcompte=GetId.getLastId(con);             // int clecompte=new Integer(((InterCompte)tmp).getCe_cleunik2());           // Object[] tmptab=(Object[])hash.get(new Long(product));           tmptab[1]=new Integer(idnewcompte);           hash.put(new Long(product),tmptab);           ArrayList tmparray=(ArrayList)traductioncompte.get(urcleunik,compte2,0);                  int souscentral=insertSousCentral(central,tmpentite,idnewcompte,urcleunik,con);           int journcompta=insertJounalCompta(central,tmpentite,idnewcompte,urcleunik,con);           InterCompte tmpinter=new InterCompte();           tmpinter.setCe_cleunik(compte2);           tmpinter.setCe_cleunik2(idnewcompte);           tmpinter.setEecleunik(eecleunik);           tmpinter.setSoal_cleunik(souscentral);           tmpinter.setJota_cleunik(journcompta);           if(central!=null){           tmpinter.setCour_cleunik(central.getCour_cleunik());           if(central.getCour_cleunik()==this.CAISSE)               if(serveur.getConfig().getCaisseparutilisateur()==1)                   tmpinter.setUrcleunik(tmpuser.getUrcleunik());           }           interCompte.insert(urcleunik,tmpinter);           Traduction_compte tmptra=new Traduction_compte();           tmptra.setLmcleunik(1);           tmptra.setCe_cleunik(idnewcompte);           tmptra.setTrate_traduction(((Traduction_compte)tmparray.get(0)).getTrate_traduction()+" "+tmpentite.getEeabrev());           Traduction_compte tmptra2=new Traduction_compte();           tmptra2.setLmcleunik(2);           tmptra2.setCe_cleunik(idnewcompte);           tmptra2.setTrate_traduction(((Traduction_compte)tmparray.get(1)).getTrate_traduction()+" "+tmpentite.getEeabrev());           traductioncompte.insert(urcleunik,tmptra);           traductioncompte.insert(urcleunik,tmptra2);                  }              }    }    }   }    /** Getter for property compte.     * @return Value of property compte.     */    public srcastra.astra.sys.rmi.GlobalRmiInterface getCompte() {        return compte;    }        /** Setter for property compte.     * @param compte New value of property compte.     */    public void setCompte(srcastra.astra.sys.rmi.GlobalRmiInterface compte) {        this.compte = compte;    }        /** Getter for property comtpecentral.     * @return Value of property comtpecentral.     */    public srcastra.astra.sys.rmi.GlobalRmiInterface getComtpecentral() {        return comptecentral;    }        /** Setter for property comtpecentral.     * @param comtpecentral New value of property comtpecentral.     */    public void setComtpecentral(srcastra.astra.sys.rmi.GlobalRmiInterface comptecentral) {        this.comptecentral = comptecentral;    }        /** Getter for property interCompte.     * @return Value of property interCompte.     */    public srcastra.astra.sys.rmi.InterCompteInterface getInterCompte() {        return interCompte;    }        /** Setter for property interCompte.     * @param interCompte New value of property interCompte.     */    public void setInterCompte(srcastra.astra.sys.rmi.InterCompteInterface interCompte) {        this.interCompte = interCompte;    }        /** Getter for property souscomptecentral.     * @return Value of property souscomptecentral.     */    public srcastra.astra.sys.rmi.GlobalRmiInterface getSouscomptecentral() {        return souscomptecentral;    }        /** Setter for property souscomptecentral.     * @param souscomptecentral New value of property souscomptecentral.     */    public void setSouscomptecentral(srcastra.astra.sys.rmi.GlobalRmiInterface souscomptecentral) {        this.souscomptecentral = souscomptecentral;    }        /** Getter for property traductioncompte.     * @return Value of property traductioncompte.     */    public srcastra.astra.sys.rmi.GlobalRmiInterface getTraductioncompte() {        return traductioncompte;    }        /** Setter for property traductioncompte.     * @param traductioncompte New value of property traductioncompte.     */    public void setTraductioncompte(srcastra.astra.sys.rmi.GlobalRmiInterface traductioncompte) {        this.traductioncompte = traductioncompte;    }public static final int CLIENT=1;public static final int FOURNISSEUR=2;public static final int TVAPAY=3;public static final int TVAREC=4;public static final int CAISSE=5;public static final int BANQUE=6;}