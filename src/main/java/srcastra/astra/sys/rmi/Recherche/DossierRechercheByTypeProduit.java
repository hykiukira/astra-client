/* * DossierRechercheByNumdos.java * * Created on 2 december 2002, 14:58 */package srcastra.astra.sys.rmi.Recherche;import srcastra.astra.sys.classetransfert.dossier.*;import srcastra.astra.sys.classetransfert.dossier.avion.*;import java.sql.*;import srcastra.astra.sys.rmi.astraimplement;import srcastra.astra.sys.rmi.utils.Poolconnection;import java.rmi.*;import srcastra.astra.sys.Transaction;import srcastra.astra.sys.Logger;import java.util.ArrayList;import java.util.Hashtable;import srcastra.astra.sys.classetransfert.utils.Date;import srcastra.astra.sys.classetransfert.clients.*;import srcastra.astra.sys.classetransfert.Loginusers_T;import srcastra.astra.sys.rmi.Exception.*; import srcastra.astra.sys.produit.*;import srcastra.astra.sys.compta.*;import srcastra.astra.sys.rmi.*;  import srcastra.astra.sys.compress.*;/** * * @author  Thomas */public class DossierRechercheByTypeProduit extends DossierRecherche implements InterfaceRecherche  {    /** Creates a new instance of DossierRechercheByNumdos */    public DossierRechercheByTypeProduit(astraimplement serveur2) {        super(serveur2);    }        public ArrayList chargeDossierRecherche(Loginusers_T currentUser, int cleRecherche, String numdos,Poolconnection tmpool,int cas) throws SQLException,RemoteException{        //  Poolconnection tmpool=serveur2.getConnectionAndCheck(currentUser.getUrcleunik(),true);     Dossier_T dossier;     System.out.println("[WAAAAAAAAAAAAAAAAAAAAAAZZZZZAAAAAAAAAAAAAAAAAA**************]je rentre dans chargedossier");     ArrayList returnvalue=new ArrayList();     String requeteclient="";     int typeproduit=Integer.parseInt(numdos);     switch(typeproduit){         case produit_T.AV:             System.out.println("[[[[[[[[[]]]]]]]]]]]]je suis dans avion"+typeproduit);             requeteclient="SELECT dr_cleunik FROM avion_ticket";             break;         case produit_T.BRO:             System.out.println("[[[[[[[[[]]]]]]]]]]]]je suis dans brochure"+typeproduit);             requeteclient="SELECT dr_cleunik FROM brochure";             break;         case produit_T.HO:             System.out.println("[[[[[[[[[]]]]]]]]]]]]je suis dans hotel"+typeproduit);             requeteclient="SELECT dr_cleunik FROM hotel";             break;         case produit_T.BA:             System.out.println("[[[[[[[[[]]]]]]]]]]]]je suis dans bateau"+typeproduit);             requeteclient="SELECT dr_cleunik FROM bateau";             break;         case produit_T.AS:             System.out.println("[[[[[[[[[]]]]]]]]]]]]je suis dans assurance"+typeproduit);            requeteclient="SELECT dr_cleunik FROM assurance";            break;         case produit_T.TAX:            //requeteclient="SELECT dr_cleunik FROM assurance"         case produit_T.TR:             System.out.println("[[[[[[[[[]]]]]]]]]]]]je suis dans train"+typeproduit);            requeteclient="SELECT dr_cleunik FROM train";            break;         case produit_T.VO:             System.out.println("[[[[[[[[[]]]]]]]]]]]]je suis dans voiture"+typeproduit);            requeteclient="SELECT dr_cleunik FROM voiture";            break;                                    }     CompressArray myArray=null;     boolean sw=false;      myArray=new CompressArray();     try{            PreparedStatement pstmt=tmpool.getConuser().prepareStatement(requeteclient);           // pstmt.setString(1,numdos);            ResultSet clientResult=pstmt.executeQuery();            clientResult.last();            int ligne=clientResult.getRow();            int[] cle=new int[ligne];            clientResult.beforeFirst();            int k=0;            while(clientResult.next()){                cle[k]=clientResult.getInt(1);                k++;                sw=true;            }            if(sw){            String chaine=" IN(";            String chaine2="";            String chaine3="";            for(int i=0;i<cle.length;i++){                if(i!=cle.length-1)                    chaine2=chaine2+cle[i]+",";                else                     chaine2=chaine2+cle[i];            }            chaine3=chaine+chaine2+") ";            String requetedossier="SELECT d.dr_cleunik,d.dr_numdos,d.dr_date_depart,d.po,d.destination,d.hotel,d.dr_status,d.client,d.fournisseur,d.dr_totalprix,d.dr_facture, d.dr_paye FROM dossier d,user u WHERE  d.urcleunik=u.urcleunik AND  u.eecleunik=? AND dr_annull=0 AND d.dr_cleunik"+chaine3+"ORDER by dr_numdos";            System.out.println("requete: "+requetedossier);            pstmt=tmpool.getConuser().prepareStatement(requetedossier);            pstmt.setInt(1,currentUser.getUreecleunik());            ResultSet resultDossier=pstmt.executeQuery();            myArray.Compress_from_resulset(resultDossier);            }       }catch(SQLException se){         se.printStackTrace();           Transaction.rollback(tmpool.getConuser());       }              return myArray;    }        public ArrayList chargeDossierRecherche(Loginusers_T currentUser, int cleRecherche, String numdos, Poolconnection tmpool, int cas, String numfact, String numnc, String numfactfourn, int nonfacture, ArrayList order) throws SQLException, RemoteException {    return null;    }        }