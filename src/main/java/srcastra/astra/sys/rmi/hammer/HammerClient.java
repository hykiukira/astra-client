/* * hammerclient.java * * Created on 1 juillet 2002, 10:42 */package srcastra.astra.sys.rmi.hammer;import srcastra.astra.sys.rmi.hammer.*;import java.util.*;import java.io.*;import java.math.*;import java.lang.*;/** * * @author  David Delbecq * @version 0.1 alpha */public class HammerClient extends java.lang.Object {    private HammerWaiter wait1;    private int childs;    private OutputStreamWriter sortie;    public HammerClient(int threadnum, OutputStreamWriter fichier, int timetolive) {        Random rand=new Random();        wait1=new HammerWaiter(this,threadnum);        childs= threadnum;        sortie=fichier;        Date date1;        Date date2;        HammerThread hammer;        for (int i=0;i<threadnum;i++)        {              hammer = new HammerThread(wait1, fichier, 0,timetolive);              try              {                    synchronized(hammer){                        hammer.start();                        hammer.wait();                    }              }              catch (Exception e)              {                  e.printStackTrace();                  System.out.println ("Erreur lors de la création du thread "+i);              }        }        synchronized(this)        {            synchronized (wait1)            {                       date1 = new Date();                wait1.notifyAll();            }            try            {                this.wait();                date2 = new Date();            }            catch (Exception e)            {                e.printStackTrace();                System.out.println ("Could not wait for child processes!!!!");                date2 = new Date();            }        }        float speed =((float) childs*timetolive)/(((float) (date2.getTime()-date1.getTime()))/1000);        System.out.println ("This makes "+                           speed+                           " connections accepted each second");    }    public static void main (String args[]) {        OutputStreamWriter out;        FileOutputStream fsortie;        try         {                        fsortie = new FileOutputStream ("d:\\Documents and Settings\\rene\\Mes documents\\astra\\performance_userlist.txt");            out= new OutputStreamWriter (fsortie);        }        catch (Exception e)        {            System.out.println ("Could not write to file");            e.printStackTrace();            return;        }        {            for (int j=0;j<1;j++)            {                int connect =1;                System.out.println ("Création de "+connect+" threads clients");                HammerClient Hammercl1 = new HammerClient (connect,out,1);            }        }        try        {            out.close();        }        catch (Exception e)        {            System.out.println ("Arg could not close the file");            e.printStackTrace();        }    }}