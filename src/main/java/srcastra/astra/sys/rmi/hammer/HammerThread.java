/* * hammerthread.java * * Created on 1 juillet 2002, 10:41 */package srcastra.astra.sys.rmi.hammer;import srcastra.astra.sys.rmi.hammer.*;import java.rmi.*;import java.rmi.registry.*;import srcastra.astra.sys.rmi.*;import srcastra.astra.sys.classetransfert.*;import java.util.*;import java.io.*;import java.util.zip.*;/** * * @author  David Delbecq * @version 0.1 alpha */public class HammerThread extends java.lang.Thread {    private HammerWaiter sem;    private int          sleeptime;    private static astrainterface serveur = null;    private OutputStreamWriter fichier;    private static Loginusers_T loginuser = null;    private int timetolive;    private int fourID=0;    Userinfo_T infodistante;    /** Creates new hammerthread */    public HammerThread(HammerWaiter semaphore, OutputStreamWriter fichier,int stime, int timetolive) {        sem=semaphore;        sleeptime=stime;        this.fichier = fichier;        this.timetolive= timetolive;    }    private void prepare_server_ifneeded()    {        if (loginuser==null)            serveur = connect_server();    }    private astrainterface connect_server()    {        Registry reg;        Loginusers_T[] logintab;        try        {            //reg= (Registry)LocateRegistry.getRegistry("195.162.199.146");            reg= (Registry)LocateRegistry.getRegistry("192.168.1.52");            //reg= (Registry)LocateRegistry.getRegistry("192.168.1.54");            serveur = (astrainterface)reg.lookup("astraimplement");            logintab=serveur.returnusers(1);        }        catch (Exception e)        {            e.printStackTrace();            return null;        }        srcastra.astra.sys.rmi.utils.Systeminfo test=new  srcastra.astra.sys.rmi.utils.Systeminfo();        infodistante=new Userinfo_T(test.getOsname(),test.getOsversion(),test.getJvmversion(),test.getUsername(),test.getIpadresse());        int user=0;        for (int i=0; i < logintab.length; i++)        {            if (logintab[i].getUrlogin().equals("DAVID"))            {                user=i;                break;            }        }        System.out.println (logintab.toString());        logintab[user].setUrpassword("david");        loginuser=logintab[user];        System.out.println ("Logging in as"+loginuser.getUrlogin());        try        {            Gestionerreur_T erreur= serveur.userautorisation (loginuser,infodistante);            if (erreur.getErreurcode()!=0)                 System.out.println (erreur.getErreurmessage());        }        catch (Exception e)        {            e.printStackTrace();        }        return serveur;    }    private void prepare_operation ()    {           java.util.ArrayList table;           try{           table=serveur.renvcombo('f',loginuser.getUrcleunik(),loginuser.getUrlmcleunik(),' ',"",2);           }           catch (RemoteException e)           {               System.out.println (e.getMessage());               e.printStackTrace();               table=null;           }           Object[] tmp = (Object[])table.get(1);           System.out.println (tmp[0]);           fourID= ((Integer)(tmp[0])).intValue();    }    private void do_operation () throws RemoteException    {        Date start;        Date end;        java.util.ArrayList table;        System.out.println ("Charging datas");        System.out.println ((serveur.ChargeObject (loginuser.getUrlmcleunik(),loginuser.getUrcleunik(),fourID,1,astrainterface.COMBO_FOURNISSEURCOMP)).toString());    }    public void logoff (astrainterface serveur, int urcleunik)    {        try        {            serveur.userlogof(urcleunik);        }        catch (Exception e)        {            e.printStackTrace();        }    }    public void run() {        long timeused;        try{            //System.out.println("running...");            synchronized(sem)            {                                synchronized(this)                {                      prepare_server_ifneeded();                      prepare_operation();                      this.notifyAll();                }                sem.wait();            }        }        catch (Exception e)        {            e.printStackTrace();            sem.childNotify(true,0);            return;        }        if (sleeptime>0){        try         {            /*Delay execution to create connection whe nother one are on fire */            Thread.sleep (sleeptime);        }        catch (Exception e)        {            e.printStackTrace();        }        }        Date date1;        Date date2;        date1=new Date();        int j=timetolive;        try         {            date1=new Date();            for (j=timetolive;j>0;j--)                do_operation();            date2=new Date();        }        catch (Exception e)        {            date2=new Date();            e.printStackTrace();            System.exit(0);        }        timeused=date2.getTime()-date1.getTime();        synchronized(fichier)        {            try            {                fichier.write (timetolive-j+"\t"+((float)timeused)/1000+"\n");            }            catch (Exception e)            {                e.printStackTrace();            }        }        sem.childNotify(false,timeused);    }}