/* * ManipFournisseur.java * * Created on 23 août 2002, 13:14 */package srcastra.astra.sys.rmi;import srcastra.astra.sys.Transaction;import srcastra.astra.sys.rmi.astraimplement;import java.sql.*;import srcastra.astra.sys.rmi.utils.Poolconnection;import srcastra.astra.sys.rmi.Exception.ServeurSqlFailure;import java.rmi.*;import srcastra.astra.sys.rmi.Exception.ManageServSQLExcption;import java.util.*;import srcastra.astra.sys.compress.*;import srcastra.astra.sys.classetransfert.Fournisseur_T;import srcastra.astra.sys.rmi.groupe_dec.*;import srcastra.astra.sys.classetransfert.Document_T;import srcastra.astra.sys.classetransfert.Grpdecision_T;import srcastra.astra.sys.classetransfert.FournGrpProduits_T;import srcastra.astra.sys.rmi.socketfactory.*;/** * * @author  Thomas */public class FournisseurImplement extends java.rmi.server.UnicastRemoteObject implements FournisseurRmiInterface{        /** Creates a new instance of ManipFournisseur */    public FournisseurImplement(astraimplement serveur,int port) throws RemoteException {             super(port,SSLClientSocketFactory.getClientFactory(),SSLServerSocketFactory.getServeurFactory());        this.serveur=serveur;               genereRequeteFournisseur();           }       public void deleteFournisseur(int urCleunik,int objectCleunik) throws RemoteException,ServeurSqlFailure{        Poolconnection tmpool=serveur.getConnectionAndCheck(urCleunik,true);  //      srcastra.astra.sys.signalitique.DeleteManager.DeleteFournisseur(objectCleunik,tmpool.getConuser());        try{                        PreparedStatement pstmt=tmpool.getConuser().prepareStatement(requete[0]);            pstmt.setInt(1,objectCleunik);            synchronized(tmpool.getBuffer()){            Transaction.begin(tmpool.getConuser());            pstmt.execute();            Transaction.commit(tmpool.getConuser());               tmpool.getBuffer().invalidateBuffer("fournisseurDir");            }        }        catch(SQLException se)        {            Transaction.rollback(tmpool.getConuser());            se.printStackTrace();            System.out.println("erreur de locking"+se.getErrorCode());            ServeurSqlFailure sqe=new ServeurSqlFailure("Erreur lors de la requête au serveur de base de donnée");            sqe.setErrorcode(se.getErrorCode());            sqe.setSqlException(se);            throw sqe;                    }    }    private srcastra.astra.sys.classetransfert.Grpdecision_T chargeDefaultGrpDec(Connection usercon,int grpcleunik,int urcleunik) throws SQLException{               try{            if(grprmi==null)                grprmi=serveur.renvGrpDecRmiObject(urcleunik);        } catch(java.rmi.RemoteException re){            re.printStackTrace();        }        return ((ManageGroupeDec)grprmi).selectDef(1,usercon,0);    }     private srcastra.astra.sys.classetransfert.Document_T chargeDefaultDocumentFourn(Connection usercon) throws SQLException{        String sqlrequete="SELECT frdtcleunik,frcleunik,frdtdatetimecrea,frdtdatetimemodif,frdtnbrdocprev,frdtnbrconfprev,frdtnbrfactprev,frdtnbrncprev,frdtnbrfactsprev,snumerosessioncrea,snumerosessionmodif from fournisseur_documentdef;";        PreparedStatement pstmt=usercon.prepareStatement(sqlrequete);        ResultSet tmpresult=pstmt.executeQuery();        tmpresult.first();                                Document_T   tmpdoc=new Document_T(tmpresult.getInt(1),tmpresult.getInt(2),tmpresult.getDate(3),tmpresult.getDate(4),tmpresult.getInt(5),tmpresult.getInt(6),tmpresult.getInt(7),tmpresult.getInt(8),tmpresult.getInt(9),tmpresult.getString(10),tmpresult.getString(11),"","");       // tmpdoc.setErreurcode(tmperreur.getErreurcode());       // tmpdoc.setErreurmessage(tmperreur.getErreurmessage());                    tmpresult.close();                 return tmpdoc;    }    private void genereRequeteFournisseur()    {        requete=new String[1];        requete[0]="UPDATE fournisseur SET annuler=1 WHERE frcleunik=?";       }        /** Getter for property tmpool.     * @return Value of property tmpool.     */           /** Setter for property tmpool.     * @param tmpool New value of property tmpool.     */        /* private int insertDocument(Document_T doc, int frcleunik,Poolconnection tmpool) throws SQLException{        PreparedStatement pstmt=tmpool.getConuser().prepareStatement("insert into fournisseur_document (frcleunik,frdtdatetimecrea,frdtdatetimemodif,frdtnbrdocprev,frdtnbrconfprev,frdtnbrfactprev,frdtnbrncprev,frdtnbrfactsprev,snumerosessioncrea,snumerosessionmodif,urcleunikcrea ,urcleunikmodif)values(?,NOW(),NOW(),?,?,?,?,?,?,?,?,?)");           pstmt.setInt(1,frcleunik);        pstmt.setInt(2,doc.getFrdtnbrdocprev());        pstmt.setInt(3,doc.getFrdtnbrconfprev());        pstmt.setInt(4,doc.getFrdtnbrfactprev());        pstmt.setInt(5,doc.getFrdtnbrcprev());        pstmt.setInt(6,doc.getFrdtnbrfactsprev());        pstmt.setString(7,tmpool.getUrnumerosession());        pstmt.setString(8,tmpool.getUrnumerosession());        pstmt.setInt(9,tmpool.getUrcle2());        pstmt.setInt(10,tmpool.getUrcle2());             pstmt.execute();    }*/     private int insertDocument(Document_T doc, int frcleunik,Poolconnection tmpool) throws SQLException{        PreparedStatement pstmt=tmpool.getConuser().prepareStatement("insert into fournisseur_document (frcleunik,frdtdatetimecrea,frdtdatetimemodif,frdtnbrdocprev,frdtnbrconfprev,frdtnbrfactprev,frdtnbrncprev,frdtnbrfactsprev,snumerosessioncrea,snumerosessionmodif,urcleunikcrea ,urcleunikmodif)values(?,NOW(),NOW(),?,?,?,?,?,?,?,?,?)");           pstmt.setInt(1,frcleunik);        pstmt.setInt(2,doc.getFrdtnbrdocprev());        pstmt.setInt(3,doc.getFrdtnbrconfprev());        pstmt.setInt(4,doc.getFrdtnbrfactprev());        pstmt.setInt(5,doc.getFrdtnbrcprev());        pstmt.setInt(6,doc.getFrdtnbrfactsprev());        pstmt.setString(7,tmpool.getUrnumerosession());        pstmt.setString(8,tmpool.getUrnumerosession());        pstmt.setInt(9,tmpool.getUrcle2());        pstmt.setInt(10,tmpool.getUrcle2());             pstmt.execute();        return 0;    }    private int insertGroupProduit(Fournisseur_T fourn,Poolconnection tmpool,int frcleunik) throws SQLException{        String requete="INSERT INTO `fournisseur_grproduit` (  `frcleunik` , `frgtitrecatalog` , `frgtreference1` , `frgtreference2` , `aecleunik` , `frgtdatetimecrea` , `frgtdatetimemodi` , `snumerosessioncrea` , `snumerosessionmodif` , `annuler` , `urcleunikcrea` , `urcleunikmodif` ) VALUES ( ?, ?, ? , ? , ?, NOW(), NOW(), ?, ?, ?, ?, ?)";        PreparedStatement pstmt=tmpool.getConuser().prepareStatement(requete);        pstmt.setInt(1,frcleunik);        pstmt.setString(2,fourn.getFrnom1());        pstmt.setString(3,fourn.getFrnom1());        pstmt.setString(4,fourn.getFrnom2());        pstmt.setInt(5,0);        pstmt.setString(6,tmpool.getUrnumerosession());        pstmt.setString(7,tmpool.getUrnumerosession());        pstmt.setInt(8,0);        pstmt.setInt(9,tmpool.getUrcle2());        pstmt.setInt(10,tmpool.getUrcle2());        pstmt.execute();        return Transaction.getLastInsertId2(tmpool.getConuser());          }    public int insertFournisseur(int urcleunik,Fournisseur_T fourn) throws RemoteException, ServeurSqlFailure {               Poolconnection tmpool=serveur.getConnectionAndCheck(urcleunik,true);          CompressArray returnvalue=null;          int frcleunik=0;          int frgtcleunik=0;        // ArrayList retval=new ArrayList();         try{          Transaction.begin(tmpool.getConuser());         // INSERT INTO `fournisseur` ( `frcleunik` , `frnom1` , `frnom2` , `frreference1` , `frreference2` , `fradresse` ,          //`frtvanum` , `frtvatype` , `frtvaregime` , `frnumbanque1` , `frnumbanque2` , `frnumbanque3` , `frtelephone1` , `frfax` ,         //`frmail` , `frmodecccf` , `frdelaipaienbrjour` , `frdomiciliation` , `frmemo` , `frdatetimecrea` , `frdatetimemodif` ,          //`snumerosessioncrea` , `snumerosessionmodif` , `decleunik` , `cxcleunik` , `aecleunik` , `lecleunik` , `pyscleunik`          //, `frfournprod` , `frNcompte` , `annuler` , `fr_web` ) VALUES (        //'', '', NULL , '', NULL , NULL , NULL , NULL , '0', NULL , NULL , NULL , NULL , NULL , NULL , '0', '0', NULL , NULL ,         //'2003-03-10 09:37:41', '2003-03-10 09:37:41', '', '', '', '', '', '', '', '', '', '', NULL );         Grpdecision_T grpdec=chargeDefaultGrpDec(tmpool.getConuser(),1,urcleunik);         Document_T doc=chargeDefaultDocumentFourn(tmpool.getConuser());         PreparedStatement pstmt=tmpool.getConuser().prepareStatement("INSERT INTO fournisseur ( frnom1 , frnom2 , frreference1 , frreference2 , fradresse , frtvanum , frtvatype , frtvaregime , frnumbanque1 , frnumbanque2 , frnumbanque3 , frtelephone1 , frfax , frmail , frmodecccf , frdelaipaienbrjour , frdomiciliation , frmemo , frdatetimecrea , frdatetimemodif , snumerosessioncrea , snumerosessionmodif , decleunik , cxcleunik , aecleunik , lecleunik , pyscleunik , frfournprod , frNcompte , annuler , fr_web,urcleunikcrea,urcleunikmodif   ) VALUES (? , ? , ?, ? , ? , ? , ? , ?, ? , ? , ? , ? , ? , ? , ?, ?, ? , ? , NOW(), NOW(), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?)");         pstmt.setString(1,fourn.getFrnom1());         pstmt.setString(2,fourn.getFrnom2());         pstmt.setString(3,fourn.getFrreference1());         pstmt.setString(4,fourn.getFrreference2());         pstmt.setString(5,fourn.getFradresse());         pstmt.setString(6,fourn.getFrtvanum());         pstmt.setInt(7,fourn.getTvaType2());         pstmt.setInt(8,fourn.getFrtvaregime());         pstmt.setString(9,fourn.getFrnumbanque1());         pstmt.setString(10,fourn.getFrnumbanque2());         pstmt.setString(11,fourn.getFrnumbanque3());         pstmt.setString(12,fourn.getFrtelephone1());         pstmt.setString(13,fourn.getFrfax());         pstmt.setString(14,fourn.getFrmail());         pstmt.setInt(15,fourn.getFrmodecccf());         pstmt.setInt(16,fourn.getFrdelaipaienbrjour());         pstmt.setInt(17,fourn.getFrdomiciliation());         pstmt.setString(18,fourn.getFrmemo());         pstmt.setString(19,tmpool.getUrnumerosession());         pstmt.setString(20,tmpool.getUrnumerosession());         pstmt.setInt(21,fourn.getDecleunik());         pstmt.setInt(22,fourn.getCxcleunik());         pstmt.setInt(23,fourn.getAecleunik());         pstmt.setInt(24,fourn.getLecleunik());         pstmt.setInt(25,fourn.getPyscleunik());         pstmt.setInt(26,fourn.getFrFournProduit());         pstmt.setInt(27,fourn.getFrCompteCleunik());         pstmt.setInt(28,0);         pstmt.setString(29,fourn.getFrWeb());         pstmt.setInt(30,tmpool.getUrcle2());         pstmt.setInt(31,tmpool.getUrcle2());         pstmt.execute();         frcleunik=Transaction.getLastInsertId2(tmpool.getConuser());          insertDocument(doc,frcleunik,tmpool);         frgtcleunik=insertGroupProduit(fourn,tmpool,frcleunik);         grpdec.setFrcleunik(frcleunik);         grpdec.setFrgtcleunik(frgtcleunik);         ((ManageGroupeDec)grprmi).insertLocale(grpdec,0,tmpool.getConuser(),0,ManageGroupeDec.TABLEFOURN);         System.out.println("\n\n[***********************]valeurfournisseur"+frcleunik);         Transaction.commit(tmpool.getConuser());         tmpool.getBuffer().invalidateBuffer("fournisseurDir");         return frcleunik;         } catch(SQLException sn){            String[] message=new String[1];            message[0]=java.util.ResourceBundle.getBundle("srcastra.astra.locale.alertmessage", tmpool.getLangage()).getString("fr_doublon");                       ManageServSQLExcption.gestion2(sn,message,tmpool.getConuser());                  }        return 0;    }         public Fournisseur_T selectFournisseurForUpdate(int urcleunik,int frcleunik) throws RemoteException, ServeurSqlFailure {                  Poolconnection connect=serveur.getConnectionAndCheck(urcleunik,true);             Transaction.begin(connect.getConuser());             try{                return selectFournisseur(urcleunik,frcleunik,"SELECT * FROM fournisseur WHERE frcleunik=? FOR UPDATE",connect);             }              catch(SQLException sn){                ManageServSQLExcption.gestion1(sn,connect.getConuser());                          }             return null;         }         private Fournisseur_T selectFournisseur(int urcleunik,int frcleunik,String requete,Poolconnection connect) throws SQLException {                    // CompressArray returnvalue=null;                       int retval=0;             PreparedStatement pstmt=connect.getConuser().prepareStatement(requete);//"SELECT * FROM fournisseur WHERE frcleunik=?");             pstmt.setInt(1,frcleunik);             ResultSet tmpresult=pstmt.executeQuery();             tmpresult.first();             String[] numSession=Transaction.renvNomUserPourSession(connect.getConuser(),tmpresult.getString(22),tmpresult.getString(23));             Fournisseur_T tmpfour=new Fournisseur_T(tmpresult.getInt(1),tmpresult.getString(4),tmpresult.getString(5),tmpresult.getString(2),tmpresult.getString(3),tmpresult.getString(6),tmpresult.getString(7),tmpresult.getString(8),tmpresult.getInt(9),tmpresult.getString(10),tmpresult.getString(11),tmpresult.getString(12),tmpresult.getString(13),tmpresult.getString(14),tmpresult.getString(15),tmpresult.getInt(16),tmpresult.getInt(17),tmpresult.getInt(18),tmpresult.getString(19),tmpresult.getDate(20),tmpresult.getDate(21),tmpresult.getString(22),tmpresult.getString(23),tmpresult.getInt(24),tmpresult.getInt(25),tmpresult.getInt(26),tmpresult.getInt(27),tmpresult.getInt(28),numSession[0],numSession[1], tmpresult.getInt(29), tmpresult.getInt(30));             tmpfour.setAnnuler(tmpresult.getInt(31));             tmpfour.setFrWeb(tmpresult.getString(32));              tmpfour.setTvaType2(tmpresult.getInt(9));             return tmpfour;                     }         public Fournisseur_T selectFournisseur(int urcleunik,int frcleunik) throws RemoteException, ServeurSqlFailure {            Poolconnection connect=serveur.getConnectionAndCheck(urcleunik,true);             //Transaction.begin(connect.getConuser());             try{                return selectFournisseur(urcleunik,frcleunik,"SELECT * FROM fournisseur WHERE frcleunik=?",connect);             }              catch(SQLException sn){                ManageServSQLExcption.gestion1(sn,connect.getConuser());                          }             return null;         }        /*  Poolconnection connect=serveur.getConnectionAndCheck(urcleunik,true);          CompressArray returnvalue=null;          int retval=0;          try{             System.out.println("\n\n\n[**************************]fournisseur"+frcleunik);         // INSERT INTO `fournisseur` ( `frcleunik` , `frnom1` , `frnom2` , `frreference1` , `frreference2` , `fradresse` ,          //`frtvanum` , `frtvatype` , `frtvaregime` , `frnumbanque1` , `frnumbanque2` , `frnumbanque3` , `frtelephone1` , `frfax` ,         //`frmail` , `frmodecccf` , `frdelaipaienbrjour` , `frdomiciliation` , `frmemo` , `frdatetimecrea` , `frdatetimemodif` ,          //`snumerosessioncrea` , `snumerosessionmodif` , `decleunik` , `cxcleunik` , `aecleunik` , `lecleunik` , `pyscleunik`          //, `frfournprod` , `frNcompte` , `annuler` , `fr_web` ) VALUES (        //'', '', NULL , '', NULL , NULL , NULL , NULL , '0', NULL , NULL , NULL , NULL , NULL , NULL , '0', '0', NULL , NULL ,         //'2003-03-10 09:37:41', '2003-03-10 09:37:41', '', '', '', '', '', '', '', '', '', '', NULL );         PreparedStatement pstmt=connect.getConuser().prepareStatement("SELECT * FROM fournisseur WHERE frcleunik=?");         pstmt.setInt(1,frcleunik);         ResultSet tmpresult=pstmt.executeQuery();         tmpresult.first();         String[] numSession=Transaction.renvNomUserPourSession(connect.getConuser(),tmpresult.getString(22),tmpresult.getString(23));         Fournisseur_T tmpfour=new Fournisseur_T(tmpresult.getInt(1),tmpresult.getString(2),tmpresult.getString(3),tmpresult.getString(4),tmpresult.getString(5),tmpresult.getString(6),tmpresult.getString(7),tmpresult.getString(8),tmpresult.getInt(9),tmpresult.getString(10),tmpresult.getString(11),tmpresult.getString(12),tmpresult.getString(13),tmpresult.getString(14),tmpresult.getString(15),tmpresult.getInt(16),tmpresult.getInt(17),tmpresult.getString(18),tmpresult.getString(19),tmpresult.getDate(20),tmpresult.getDate(21),tmpresult.getString(22),tmpresult.getString(23),tmpresult.getInt(24),tmpresult.getInt(25),tmpresult.getInt(26),tmpresult.getInt(27),tmpresult.getInt(28),numSession[0],numSession[1], tmpresult.getInt(29), tmpresult.getInt(30));         tmpfour.setAnnuler(tmpresult.getInt(31));         tmpfour.setFrWeb(tmpresult.getString(32));          return tmpfour;         } catch(SQLException sn){           ManageServSQLExcption.gestion1(sn,connect.getConuser());                  }          return null;         //return Transaction.getLastInsertId2(tmpool.getConuser());         }*/     public int updateFournisseur(int urcleunik,Fournisseur_T fourn) throws RemoteException, ServeurSqlFailure {               Poolconnection tmpool=serveur.getConnectionAndCheck(urcleunik,true);          CompressArray returnvalue=null;          int retval=0;        // ArrayList retval=new ArrayList();         try{         // INSERT INTO `fournisseur` ( `frcleunik` , `frnom1` , `frnom2` , `frreference1` , `frreference2` , `fradresse` ,          //`frtvanum` , `frtvatype` , `frtvaregime` , `frnumbanque1` , `frnumbanque2` , `frnumbanque3` , `frtelephone1` , `frfax` ,         //`frmail` , `frmodecccf` , `frdelaipaienbrjour` , `frdomiciliation` , `frmemo` , `frdatetimecrea` , `frdatetimemodif` ,          //`snumerosessioncrea` , `snumerosessionmodif` , `decleunik` , `cxcleunik` , `aecleunik` , `lecleunik` , `pyscleunik`          //, `frfournprod` , `frNcompte` , `annuler` , `fr_web` ) VALUES (        //'', '', NULL , '', NULL , NULL , NULL , NULL , '0', NULL , NULL , NULL , NULL , NULL , NULL , '0', '0', NULL , NULL ,         //'2003-03-10 09:37:41', '2003-03-10 09:37:41', '', '', '', '', '', '', '', '', '', '', NULL );        // Transaction.begin(tmpool.getConuser());         PreparedStatement pstmt=tmpool.getConuser().prepareStatement("UPDATE  fournisseur set frnom1=? , frnom2=? , frreference1=? , frreference2=? , fradresse=? , frtvanum=? , frtvatype=? , frtvaregime=? , frnumbanque1=? , frnumbanque2=? , frnumbanque3=? , frtelephone1=? , frfax=? , frmail=? , frmodecccf=? , frdelaipaienbrjour=? , frdomiciliation=? , frmemo=? , frdatetimemodif=NOW() , snumerosessionmodif=? , decleunik=? , cxcleunik=? , aecleunik=? , lecleunik=? , pyscleunik=? , frfournprod=? , frNcompte=? , annuler=? , fr_web=?,urcleunikmodif=? WHERE frcleunik=?");         pstmt.setString(1,fourn.getFrnom1());         pstmt.setString(2,fourn.getFrnom2());         pstmt.setString(3,fourn.getFrreference1());         pstmt.setString(4,fourn.getFrreference2());         pstmt.setString(5,fourn.getFradresse());         pstmt.setString(6,fourn.getFrtvanum());         pstmt.setInt(7,fourn.getTvaType2());         pstmt.setInt(8,fourn.getFrtvaregime());         pstmt.setString(9,fourn.getFrnumbanque1());         pstmt.setString(10,fourn.getFrnumbanque2());         pstmt.setString(11,fourn.getFrnumbanque3());         pstmt.setString(12,fourn.getFrtelephone1());         pstmt.setString(13,fourn.getFrfax());         pstmt.setString(14,fourn.getFrmail());         pstmt.setInt(15,fourn.getFrmodecccf());         pstmt.setInt(16,fourn.getFrdelaipaienbrjour());         pstmt.setInt(17,fourn.getFrdomiciliation());         pstmt.setString(18,fourn.getFrmemo());         pstmt.setString(19,tmpool.getUrnumerosession());         pstmt.setInt(20,fourn.getDecleunik());         pstmt.setInt(21,fourn.getCxcleunik());         pstmt.setInt(22,fourn.getAecleunik());         pstmt.setInt(23,fourn.getLecleunik());         pstmt.setInt(24,fourn.getPyscleunik());         pstmt.setInt(25,fourn.getFrFournProduit());         pstmt.setInt(26,fourn.getFrCompteCleunik());         pstmt.setInt(27,fourn.getAnnuler());         pstmt.setString(28,fourn.getFrWeb());         pstmt.setInt(29,tmpool.getUrcle2());         pstmt.setInt(30,fourn.getFrcleunik());         pstmt.execute();         Transaction.commit(tmpool.getConuser());         tmpool.getBuffer().invalidateBuffer("fournisseurDir");         } catch(SQLException sn){            ManageServSQLExcption.gestion1(sn,tmpool.getConuser());                  }          return 0;         //return Transaction.getLastInsertId2(tmpool.getConuser());         }    public CompressArray getArrayOfFournisseur(int urcleunik,String text) throws RemoteException, ServeurSqlFailure {                 Poolconnection tmpool=serveur.getConnectionAndCheck(urcleunik,true);         CompressArray returnvalue=null;        // ArrayList retval=new ArrayList();         try{         PreparedStatement pstmt=tmpool.getConuser().prepareStatement("SELECT f.frcleunik,f.frdatetimecrea,f.frdatetimemodif,f.frmail,f.frfax,f.frtelephone1 ,f.frnom1,f.frreference1,f.fradresse,f.cxcleunik,f.fradresse,t.txtraduction,co.cxcode,f.annuler  FROM fournisseur f ,traductioncodpostaux t,codepostaux co WHERE f.cxcleunik=t.cxcleunik AND co.cxcleunik=f.cxcleunik AND t.lmcleunik= ? AND f.frnom1 LIKE(CONCAT(?,'%')) ORDER BY f.frnom1");         pstmt.setInt(1,tmpool.getLmcleunik());         pstmt.setString(2,text);         ResultSet result=pstmt.executeQuery();         returnvalue=new CompressArray();         returnvalue.Compress_from_resulset2(result);        /* result.beforeFirst();         int q=1;         while(result.next()){             Object[] tmpobj=new Object[15];             for(int i=0;i<tmpobj.length;i++){               if(i!=tmpobj.length-1)               tmpobj[i]=result.getObject(i+1);                }             tmpobj[tmpobj.length-1]=new Integer(q);             q++;          retval.add(tmpobj);                      }*/         } catch(SQLException sn){            ManageServSQLExcption.gestion1(sn,tmpool.getConuser());                  }         return returnvalue;    }     private String[] requete;   private astraimplement serveur;   private GrpGroupDecRmiInterface grprmi; //  private Poolconnection tmpool;}