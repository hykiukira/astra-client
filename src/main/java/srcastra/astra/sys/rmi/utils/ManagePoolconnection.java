/* * ManagePoolconnection.java * * Created on 13 mars 2002, 15:28 */package srcastra.astra.sys.rmi.utils;import java.util.ArrayList;import java.util.Random;import java.util.Hashtable;import srcastra.astra.sys.Logger;/** * * @author  thom * @version  */public class ManagePoolconnection {    private Hashtable sessionsids=new Hashtable();    private Random randomizer  = new Random();    private static String charpool= "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_?!()יטאשח#§{}";    /** Creates new ManagePoolconnection */    public ManagePoolconnection(ArrayList pool) {        this.pool=pool;    }    public int requireId ()    {        Integer id;        do        {            id= new Integer(randomizer.nextInt());        }        while (sessionsids.get(id) !=null);        sessionsids.put(id,id);        return id.intValue();    }    public void releaseId (int id)    {        sessionsids.remove(new Integer(id));    }    public String requireSessionHash ()    {        String session="";        for (int i=0;i<40;i++)            session+=charpool.charAt(randomizer.nextInt(charpool.length()));        return session;    }    public int poolgetsize()    {        this.poolsize=this.pool.size();        return this.poolsize;      }    public int pooladd(Object element)    {      this.pool.add(element);      return poolgetsize();      }    public int poollessfirst()    {        this.pool.remove(0);        return this.poolgetsize();      }    public int poollesslast()    {      int tmp=0;      tmp=this.poolgetsize();        tmp=tmp-1;      this.pool.remove(tmp);      return (tmp-1);    }    public int poolless(int index)    {   //Poolconnection tmp=(Poolconnection)this.pool.get(index);        //tmp.getConuser().close();        this.pool.remove(index);        return this.poolgetsize();         }      public String alreadylogusers()    {      String x;      Poolconnection tmp;      if(this.poolsize==0)      {          x=null;      }      else      {      x="(";               for(int i=0;i<this.poolsize;i++)          { tmp=(Poolconnection)pool.get(i);              if(i==this.poolsize-1)              {                   x=x+tmp.getUrcleunik();               }              else              {                 x=x+tmp.getUrcleunik()+",";              }          }            x=x+")";      }         return x;    }    public int  renvindexprurcleunik(int urcle)    {       Poolconnection tmp;       int i=0;       boolean sw=false;       while(i<this.poolsize && sw==false)       {           tmp=(Poolconnection)pool.get(i);           if(tmp.getUrcleunik()==urcle)           {               sw=true;           }                  else           {               i++;           }       }       return i;        }    public Poolconnection  renvObjectprurcleunik(int urcle,int lmcleunik,int urcle2)    {       Poolconnection tmp=null;       int i=0;       boolean sw=false;       Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"coucou");       Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"searching for usernum "+urcle+" in pool of size "+this.poolsize);       while(i<this.poolsize && sw==false)       {             tmp=(Poolconnection)pool.get(i);         //  tmp.setLmcleunik(lmcleunik);           //tmp.setUrcle2(urcle2);           Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"usernum: "+urcle+" current element:"+tmp.getUrcleunik());           if(tmp.getUrcleunik()==urcle)           {               sw=true;           }                  else           {               i++;           }       }       if(sw==false)       {              tmp=new Poolconnection();           tmp.setUrcleunik(-1);                  }       return tmp;        }     public Poolconnection  renvObjectprurcleunik(int urcle)    {       Poolconnection tmp=null;       int i=0;       boolean sw=false;      // Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"coucou");       //Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"searching for usernum "+urcle+" in pool of size "+this.poolsize);       while(i<this.poolsize && sw==false)       {             tmp=(Poolconnection)pool.get(i);         //  Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"usernum: "+urcle+" current element:"+tmp.getUrcleunik());           if(tmp.getUrcleunik()==urcle)           {               sw=true;           }                  else           {               i++;           }       }       if(sw==false)       {              tmp=new Poolconnection();           tmp.setUrcleunik(-1);       }       return tmp;        }     public  java.sql.Connection  renvConnectionrurcleunik(int urcle)    {       Poolconnection tmp=null;       int i=0;       boolean sw=false;       while(i<this.poolsize && sw==false)       {           tmp=(Poolconnection)pool.get(i);           if(tmp.getUrcleunik()==urcle)           {               sw=true;           }             else           {            i++;           }       }       return tmp.getConuser();        }    public Object poolreturnobject(int index)    {        return pool.get(index);    }    public static void main (String args[])        {        ManagePoolconnection mp = new ManagePoolconnection(new ArrayList());        for (int i=0;i<150;i++)        {            Logger.getDefaultLogger().log(Logger.LOG_DEBUG,mp.requireSessionHash()+"  "+mp.requireId());            for (int j=0;j<500;j++)            {                mp.requireSessionHash();                mp.requireId();            }        }    }    /** Getter for property pool.     * @return Value of property pool.     *     */    public java.util.ArrayList getPool() {        return pool;    }        /** Setter for property pool.     * @param pool New value of property pool.     *     */    public void setPool(java.util.ArrayList pool) {        this.pool = pool;    }        private ArrayList pool;        private int poolsize;}