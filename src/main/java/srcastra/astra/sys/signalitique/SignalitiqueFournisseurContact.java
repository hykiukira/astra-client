/* * SignalitiqueFournisseurContact.java * * Created on 22 août 2002, 10:23 */package srcastra.astra.sys.signalitique;import srcastra.astra.sys.Transaction;import srcastra.astra.sys.Logger;import srcastra.astra.sys.rmi.utils.Poolconnection;import java.rmi.RemoteException;import srcastra.astra.sys.classetransfert.*;import srcastra.astra.sys.compress.CompressArray;import java.util.ArrayList;import java.sql.*;import srcastra.astra.sys.rmi.utils.ServeurBuffer;import srcastra.astra.sys.rmi.astrainterface;import srcastra.astra.sys.rmi.utils.QueryKeyGen;import srcastra.astra.sys.rmi.Exception.*;/** * * @author  David */public class SignalitiqueFournisseurContact implements srcastra.astra.sys.signalitique.Signalitique {        /** Creates a new instance of SignalitiqueFournisseurContact */    public SignalitiqueFournisseurContact() {    }    public Object ChargeObject(int urlmcleunik, int urcleunik, int objcleunik, int cas, Poolconnection connect) throws RemoteException {        throw new srcastra.astra.sys.rmi.Exception.InvalidSignalitiqueOperation("operation not supported for FournisseurContact");    }    public Object ChargeObjectPopup(int urlmcleunik, int urcleunik, int objcleunik, int cas, Poolconnection connect) throws RemoteException {        String sqlrequete=null;        ResultSet tmpresult=null;        ResultSet tmpresult2=null;        String tmpcrea=null;        String tmpmodif=null;        ArrayList tmpArray=null;        int tmpNbrLigne;        Object returnValue=null;        Gestionerreur_T tmperreur = new Gestionerreur_T();        ServeurBuffer buf=connect.getBuffer();        String signature=QueryKeyGen.ChargeObjectPopup(urlmcleunik,urcleunik,objcleunik,cas,astrainterface.COMBO_FOURNCONTACT);        buf.linkNewName(signature,"fournisseurDir");        if(cas==1)            sqlrequete="select  frctcleunik,frctgrpadminist,frctnom,frctprenom,frctmail,frcttelephone, frcleunik,frctdatetimecrea,frctdatetimemodif,snumerosessioncrea,snumerosessionmodif,frctfax  from fournisseur_contact where frctcleunik="+objcleunik+";";        else if(cas==2) {            Transaction.begin(connect.getConuser());            sqlrequete="select  frctcleunik,frctgrpadminist,frctnom,frctprenom,frctmail,frcttelephone, frcleunik,frctdatetimecrea,frctdatetimemodif,snumerosessioncrea,snumerosessionmodif,frctfax  from fournisseur_contact where frctcleunik="+objcleunik+" FOR UPDATE;";        }        tmpresult=Transaction.execrequete3(sqlrequete,connect.getConuser(),tmperreur);        if(tmperreur.getErreurcode()==10000) {            try{                tmpresult.last();                tmpNbrLigne=tmpresult.getRow();                if(tmpNbrLigne!=0) {                    tmpresult.first();                    String[] numSession=Transaction.renvNomUserPourSession(connect.getConuser(),tmpresult.getString(10),tmpresult.getString(11));                    FournContact_T tmpFourContact=(FournContact_T)new FournContact_T(tmpresult.getInt(1),tmpresult.getString(2),tmpresult.getString(3),tmpresult.getString(4),tmpresult.getString(5), tmpresult.getString(6),tmpresult.getInt(7),tmpresult.getDate(8),tmpresult.getDate(9),tmpresult.getString(10),tmpresult.getString(11),numSession[0],numSession[1]);                    tmpFourContact.setErreurcode(tmperreur.getErreurcode());                    tmpFourContact.setErreurmessage(tmperreur.getErreurmessage());                    tmpFourContact.setFrctfax(tmpresult.getString(12));                    returnValue=(Object)tmpFourContact;                }                tmpresult.close();            }            catch(SQLException e){                Logger.getDefaultLogger().log(Logger.LOG_SECURITY,"Erreur dans  ChargeCodePostaux: "+e);            }            catch(Exception e1){                Logger.getDefaultLogger().log(Logger.LOG_SECURITY,"erreur dans chargecodepostaux :"+e1);            }        }        else {            FournContact_T tmpFourContact=(FournContact_T)new FournContact_T();            tmpFourContact.setErreurcode(tmperreur.getErreurcode());            tmpFourContact.setErreurmessage(tmperreur.getErreurmessage());            returnValue=(Object)tmpFourContact;        }        return returnValue;    }    public Object chargeObjetCombo(int objectCleunik, int urcleunik, int urlmcleunik, Poolconnection connect) throws RemoteException {        throw new srcastra.astra.sys.rmi.Exception.InvalidSignalitiqueOperation("operation not supported for FournisseurContact");    }        public Gestionerreur_T insertObjectPopup(Object objdp, int urcleunik, int cas, Poolconnection connect) throws RemoteException {        throw new srcastra.astra.sys.rmi.Exception.InvalidSignalitiqueOperation("operation not supported for FournisseurContact");    }        public Gestionerreur_T modifyObjectPopup(Object objdp, int urcleunik, int cas, Poolconnection connect) throws RemoteException {        throw new srcastra.astra.sys.rmi.Exception.InvalidSignalitiqueOperation("operation not supported for FournisseurContact");    }        public java.util.ArrayList renvIntitule(int urlmcleunik, int urcleunik, int cas, int caecleunik, Poolconnection connect) throws RemoteException {        throw new srcastra.astra.sys.rmi.Exception.InvalidSignalitiqueOperation("operation not supported for FournisseurContact");    }        public CompressArray renvSignalitiques(int urlmcleunik, int urcleunik, int cas, Poolconnection connect) throws RemoteException {        throw new srcastra.astra.sys.rmi.Exception.InvalidSignalitiqueOperation("operation not supported for FournisseurContact");    }        public ArrayList renvcombo(int urcleunik, int urlmcleunik, char plettre, String cxcode, int cas, Poolconnection connect) throws RemoteException {        throw new srcastra.astra.sys.rmi.Exception.InvalidSignalitiqueOperation("operation not supported for FournisseurContact");    }            private java.util.ArrayList renvcombofourncontact(Poolconnection connect,char plettre,int cas,int frcleunik) throws RemoteException {        String sqlrequete=null;        ArrayList tmpfourncon;        switch(cas) {            case 1:                // sqlrequete="select  frctcleunik,frctnom,frctprenom,frctgrpadminist,frctmail,frcttelephone from fournisseur_contact where frcleunik="+frcleunik+" order by frctnom;";                sqlrequete="select  frctcleunik,frctnom,frctprenom,frctgrpadminist from fournisseur_contact where frcleunik="+frcleunik+" order by frctnom;";                break;            case 2:                // sqlrequete="select  frctcleunik,frctnom,frctprenom,frctgrpadminist,frctmail,frcttelephone from fournisseur_contact order by frctnom;";                sqlrequete="select  frctcleunik,frctprenom,frctnom,frctgrpadminist from fournisseur_contact where frcleunik="+frcleunik+" order by frctnom;";                break;        }        tmpfourncon= Transaction.generecombostest(sqlrequete,connect.getConuser());        return tmpfourncon;    }        public void deleteSignaletique(long objectCleunik, int typeObjec, Poolconnection connect) throws ServeurSqlFailure {    }    }