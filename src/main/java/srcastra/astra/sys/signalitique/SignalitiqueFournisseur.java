/* * SignalitiqueFournisseur.java * * Created on 22 août 2002, 10:52 */package srcastra.astra.sys.signalitique;import srcastra.astra.sys.Transaction;import srcastra.astra.sys.Logger;import srcastra.astra.sys.rmi.utils.Poolconnection;import java.rmi.RemoteException;import srcastra.astra.sys.classetransfert.*;import srcastra.astra.sys.compress.CompressArray;import java.util.ArrayList;import java.sql.*;import srcastra.astra.sys.rmi.utils.ServeurBuffer;import srcastra.astra.sys.rmi.astrainterface;import srcastra.astra.sys.rmi.utils.QueryKeyGen;import srcastra.astra.sys.rmi.Exception.*;/** * * @author  rene */public class SignalitiqueFournisseur implements srcastra.astra.sys.signalitique.Signalitique {        /** Creates a new instance of SignalitiqueFournisseur */    public SignalitiqueFournisseur() {    }        public Object ChargeObject(int urlmcleunik, int urcleunik, int objcleunik, int cas, Poolconnection connect) throws RemoteException {        String sqlrequete=null;        ResultSet tmpresult;        Gestionerreur_T tmperreur= new Gestionerreur_T();        int tmpNbrLigne;        Object returnValue = null;        sqlrequete="SELECT f.frcleunik,f.frreference1,f.frnom1,f.frtelephone1,f.frfax,f.frmail,f.frdatetimecrea,f.frdatetimemodif,f.snumerosessioncrea,f.snumerosessionmodif, f.frfournprod from fournisseur f where frcleunik="+objcleunik+";";        Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"---charge fournisseur: "+sqlrequete);        tmpresult=Transaction.execrequete(sqlrequete,connect.getConuser());        try{            tmpresult.last();            tmpNbrLigne=tmpresult.getRow();            if(tmpNbrLigne!=0) {                tmpresult.first();                String[] numSession=Transaction.renvNomUserPourSession(connect.getConuser(),tmpresult.getString(9),tmpresult.getString(10));                returnValue=(Sous_fournisseur_T)new Sous_fournisseur_T(tmpresult.getInt(1),tmpresult.getString(2),tmpresult.getString(3),tmpresult.getString(4),tmpresult.getString(5),tmpresult.getString(6),tmpresult.getDate(7),tmpresult.getDate(8), numSession[0],numSession[1], tmpresult.getInt(11));            }            tmpresult.close();        }        catch(SQLException e){            Logger.getDefaultLogger().log(Logger.LOG_WARNING,"Erreur dans  ChargeObject: "+e);        }        catch(Exception e1){            Logger.getDefaultLogger().log(Logger.LOG_WARNING,"erreur dans chargefournisseur :"+e1);        }        return tmpresult;    }        public Object ChargeObjectPopup(int urlmcleunik, int urcleunik, int objcleunik, int cas, Poolconnection connect) throws RemoteException {                ServeurBuffer buf=connect.getBuffer();        String signature=QueryKeyGen.ChargeObjectPopup(urlmcleunik,urcleunik,objcleunik,cas,astrainterface.COMBO_FOURNISSEUR);        buf.linkNewName(signature,"fournisseurDir");        String sqlrequete="SELECT f.frcleunik,f.frreference1,f.frnom1,f.frtelephone1,f.frfax,f.frmail,f.frdatetimecrea,f.frdatetimemodif,f.snumerosessioncrea,f.snumerosessionmodif, f.frfournprod from fournisseur f where frcleunik="+objcleunik+";";        ResultSet tmpresult=Transaction.execrequete(sqlrequete,connect.getConuser());        Object returnValue = null;        try{            tmpresult.last();            int tmpNbrLigne=tmpresult.getRow();            if(tmpNbrLigne!=0) {                tmpresult.first();                String[] numSession=Transaction.renvNomUserPourSession(connect.getConuser(),tmpresult.getString(9),tmpresult.getString(10));                returnValue=(Sous_fournisseur_T)new Sous_fournisseur_T(tmpresult.getInt(1),tmpresult.getString(2),tmpresult.getString(3),tmpresult.getString(4),tmpresult.getString(5),tmpresult.getString(6),tmpresult.getDate(7),tmpresult.getDate(8),numSession[0],numSession[1], tmpresult.getInt(11));            }            tmpresult.close();        }        catch(SQLException e){            Logger.getDefaultLogger().log(Logger.LOG_WARNING,"Erreur dans  ChargeObject: "+e);        }        catch(Exception e1){            Logger.getDefaultLogger().log(Logger.LOG_WARNING,"erreur dans chargecodepostaux :"+e1);        }        return returnValue;    }        public Object chargeObjetCombo(int objectCleunik, int urcleunik, int urlmcleunik, Poolconnection connect) throws RemoteException {        throw new srcastra.astra.sys.rmi.Exception.InvalidSignalitiqueOperation("operation not supported for Fournisseur");    }        public Gestionerreur_T insertObjectPopup(Object objdp, int urcleunik, int cas, Poolconnection connect) throws RemoteException {        throw new srcastra.astra.sys.rmi.Exception.InvalidSignalitiqueOperation("operation not supported for Fournisseur");    }        public Gestionerreur_T modifyObjectPopup(Object objdp, int urcleunik, int cas, Poolconnection connect) throws RemoteException {        throw new srcastra.astra.sys.rmi.Exception.InvalidSignalitiqueOperation("operation not supported for Fournisseur");    }        public java.util.ArrayList renvIntitule(int urlmcleunik, int urcleunik, int cas, int caecleunik, Poolconnection connect) throws RemoteException {        throw new srcastra.astra.sys.rmi.Exception.InvalidSignalitiqueOperation("operation not supported for Fournisseur");    }        public CompressArray renvSignalitiques(int urlmcleunik, int urcleunik, int cas, Poolconnection connect) throws RemoteException {        throw new srcastra.astra.sys.rmi.Exception.InvalidSignalitiqueOperation("operation not supported for Fournisseur");    }        public ArrayList renvcombo(int urcleunik, int urlmcleunik, char plettre, String cxcode, int cas, Poolconnection connect) throws RemoteException {        return renvComboFournisseur(connect.getConuser(), cas,connect.getBuffer());    }        public java.util.ArrayList renvComboFournisseur(Connection usercon,int cas, ServeurBuffer buf) {        ArrayList tmpfourn;        String sqlrequete=null;        String signature=QueryKeyGen.renvcombo(astrainterface.COMBOTYPE_FOURN, 0, 0, ' ', "", cas);        synchronized(buf) {            if(cas==1){               if (buf.isValid("signFournisseurCas1"))                    tmpfourn=buf.getValue("signFournisseurCas1");                else {                    sqlrequete= "select frcleunik,frreference1,frnom1"                    +" from fournisseur WHERE annuler=0 order by frreference1;";                    tmpfourn=Transaction.generecombostest3(sqlrequete,usercon);                    buf.setValue("signFournisseurCas1",tmpfourn);                    buf.linkNewName(signature,"fournisseurDir");                    buf.setValue(signature, new Long(System.currentTimeMillis()));               }            }            else if(cas==2)            {                    sqlrequete= "select frcleunik,frnom1,frreference1"                    +" from fournisseur WHERE annuler=0  order by frnom1;";                    tmpfourn=Transaction.generecombostest(sqlrequete,usercon);                    buf.setValue("signFournisseurCas2",tmpfourn);                    buf.linkNewName(signature,"paysDir");                    buf.setValue(signature, new Long(System.currentTimeMillis()));                }            else                tmpfourn=null;        }        return  tmpfourn;    }        public void deleteSignaletique(long objectCleunik, int typeObjec, Poolconnection connect) throws ServeurSqlFailure {    }            }