/* * SignalitiqueFournisseurGroupeDecision.java * * Created on 22 août 2002, 13:30 */package srcastra.astra.sys.signalitique;import srcastra.astra.sys.Transaction;import srcastra.astra.sys.Logger;import srcastra.astra.sys.rmi.utils.Poolconnection;import java.rmi.RemoteException;import srcastra.astra.sys.classetransfert.*;import srcastra.astra.sys.compress.CompressArray;import java.util.ArrayList;import java.sql.*;import srcastra.astra.sys.rmi.utils.ServeurBuffer;import srcastra.astra.sys.rmi.Exception.*;import srcastra.astra.sys.rmi.astraimplement;import  srcastra.astra.sys.rmi.groupe_dec.ManageGroupeDec;/** * * @author  rene */public class SignalitiqueFournisseurGroupeDecision implements srcastra.astra.sys.signalitique.Signalitique {        /** Creates a new instance of SignalitiqueFournisseurGroupeDecision */    astraimplement serveur;    public SignalitiqueFournisseurGroupeDecision(astraimplement serveur) {        this.serveur=serveur;    }        public Object ChargeObject(int urlmcleunik, int urcleunik, int objcleunik, int cas, Poolconnection connect) throws RemoteException {        ManageGroupeDec manage=(ManageGroupeDec)serveur.renvGrpDecRmiObject(urcleunik);        try{            return manage.selectFournisseur( objcleunik,connect.getConuser(),cas);        }catch(SQLException sl){         sl.printStackTrace();           }        return null;    /*        String sqlrequete=null;        Object returnValue = null;        Gestionerreur_T tmperreur = new Gestionerreur_T();        Gestionerreur_T tmperreur2 = new Gestionerreur_T();        if(cas==1)            sqlrequete="SELECT g.gncleunik,g.frcleunik,g.ttcleunik,g.itcleunik,g.aecleunik,g.gndatetimecrea,g.gndatetimemodif,g.gncodetvavente,g.gntvainclusvente,g.gncodetvaachat,g.gntvainclusachat,g.gnnbravanteche,g.gnacompteminpp,g.gnprodstockiata,g.gnprodstockautre,g.gnpccomvente,g.gncominclpvent,g.gnpcacompte,g.gnpccomachat,g.gnpcclerepvend,g.gnpcclerepconcept,g.gnpcclerepmmere,g.snumerosessioncrea,g.snumerosessionmodif,g.frgtcleunik,g.gncomptevente,g.gncompteachat,g.gnfracomptepc,g.gnfrnbda,g.gnfrsoldepc,g.gnfrnbds,g.gnfranchise,g.caecleunik,g.tecleunik,v.Tva_rate ,v1.Tva_rate,g.gn_tvacomptabiliser,g.gn_comsurtva  from groupedecision g,tva v,tva v1  where frgtcleunik="+objcleunik+" and g.gncodetvavente=v.tva_cleunik  and g.gncodetvaachat=v1.tva_cleunik ;";        //sqlrequete="SELECT * from groupedecision where frgtcleunik="+objcleunik+";";        else if(cas==2) {            Transaction.begin(connect.getConuser());            // sqlrequete="SELECT gncleunik,frcleunik,ttcleunik,itcleunik,gnanalytique,gndatetimecrea,gndatetimemodif,gncodetvavente,gntvainclusvente,gncodetvaachat,gntvainclusachat,gnnbravanteche,gnacomptefix,gnacompteminpp,gnprodstockiata,gnprodstockautre,gnpccomvente,gncominclpvent,gnpcacompte,gnpccomachat,gnpcclerepvend,gnpcclerepconcept,gnpcclerepmmere,snumerosessioncrea,snumerosessionmodif from groupedecision where frcleunik="+objcleunik+" FOR UPDATE;";            sqlrequete="SELECT g.gncleunik,g.frcleunik,g.ttcleunik,g.itcleunik,g.aecleunik,g.gndatetimecrea,g.gndatetimemodif,g.gncodetvavente,g.gntvainclusvente,g.gncodetvaachat,g.gntvainclusachat,g.gnnbravanteche,g.gnacompteminpp,g.gnprodstockiata,g.gnprodstockautre,g.gnpccomvente,g.gncominclpvent,g.gnpcacompte,g.gnpccomachat,g.gnpcclerepvend,g.gnpcclerepconcept,g.gnpcclerepmmere,g.snumerosessioncrea,g.snumerosessionmodif,g.frgtcleunik,g.gncomptevente,g.gncompteachat,g.gnfracomptepc,g.gnfrnbda,g.gnfrsoldepc,g.gnfrnbds,g.gnfranchise,g.caecleunik,g.tecleunik,v.Tva_rate,v1.Tva_rate,g.gn_tvacomptabiliser,g.gn_comsurtva from groupedecision g,tva v,tva v1 where frgtcleunik="+objcleunik+" and g.gncodetvavente=v.vacleunik and g.gncodetvaachat=v1.vacleunik FOR UPDATE;";        }        ResultSet tmpresult=Transaction.execrequete3(sqlrequete,connect.getConuser(),tmperreur);        if(tmperreur.getErreurcode()==10000) {            try{                tmpresult.last();                int tmpNbrLigne=tmpresult.getRow();                if(tmpNbrLigne!=0) {                    tmpresult.first();                    String[] numSession=Transaction.renvNomUserPourSession(connect.getConuser(),tmpresult.getString(22),tmpresult.getString(23));                                                                                                                                    Grpdecision_T tmpGrpDec=new Grpdecision_T(tmpresult.getInt(1),tmpresult.getInt(2),tmpresult.getInt(3),tmpresult.getInt(4),tmpresult.getInt(5), tmpresult.getDate(6),tmpresult.getDate(7),tmpresult.getInt(8),tmpresult.getInt(9),tmpresult.getInt(10),tmpresult.getInt(11),tmpresult.getInt(12),tmpresult.getFloat(13),tmpresult.getInt(14),tmpresult.getInt(15),tmpresult.getFloat(16),tmpresult.getInt(17),tmpresult.getFloat(18),tmpresult.getFloat(19),tmpresult.getFloat(20),tmpresult.getFloat(21),tmpresult.getFloat(22),tmpresult.getString(23),tmpresult.getString(24),tmpresult.getInt(25),tmpresult.getInt(26),tmpresult.getInt(27),tmpresult.getFloat(28),tmpresult.getInt(29),tmpresult.getInt(30),tmpresult.getInt(31),tmpresult.getInt(32),tmpresult.getInt(33),tmpresult.getInt(34),numSession[0],numSession[1], 0, 0);                    tmpGrpDec.setValeurGenFloat1(tmpresult.getFloat(35));                    tmpGrpDec.setValeurGenFloat2(tmpresult.getFloat(36));                    tmpGrpDec.setGnfrtvaComptabiliserVente(tmpresult.getInt(37));                    tmpGrpDec.setGnfrtvaCommissionVente(tmpresult.getInt(38));                    tmpGrpDec.setErreurcode(tmperreur.getErreurcode());                    tmpGrpDec.setErreurmessage(tmperreur.getErreurmessage());                     String req="SELECT g.gncomptevente,c.ce_num,c.cate_cleunik FROM groupedecision g,compte c WHERE g.gncomptevente=c.ce_cleunik AND g.frgtcleunik="+objcleunik+";";                    ResultSet tmp2=Transaction.execrequete3(req,connect.getConuser(),tmperreur2);                    tmp2.first();                    tmpGrpDec.setIntitulecomptev(tmp2.getInt(2));                    tmpGrpDec.setCategoriecomptev(tmp2.getInt(3));                    req="SELECT g.gncompteachat,c.ce_num,c.cate_cleunik FROM groupedecision g,compte c WHERE g.gncompteachat=c.ce_cleunik AND g.frgtcleunik="+objcleunik+";";                    tmp2=Transaction.execrequete3(req,connect.getConuser(),tmperreur2);                    tmp2.first();                    tmpGrpDec.setIntitulecomptea(tmp2.getInt(2));                    tmpGrpDec.setCategoriecomptea(tmp2.getInt(3));                                        returnValue=(Grpdecision_T) tmpGrpDec;                }                tmpresult.close();            }            catch(SQLException e){                Logger.getDefaultLogger().log(Logger.LOG_WARNING,"Erreur dans  ChargeCodePostaux: "+e);            }            catch(Exception e1){                Logger.getDefaultLogger().log(Logger.LOG_WARNING,"erreur dans chargecodepostaux :"+e1);            }        }        else{            Grpdecision_T GrpDecVide=new Grpdecision_T();            GrpDecVide.setErreurcode(tmperreur.getErreurcode());            GrpDecVide.setErreurmessage(tmperreur.getErreurmessage());            returnValue=(Grpdecision_T) GrpDecVide;        }        return returnValue;*/    }        private java.util.ArrayList renvIntituleGrpdecision(int urlmcleunik,Connection usercon,int cas,int caecleunik) {        String tmplangue;        String sqlrequete=null;        ArrayList tmpList;        if(cas==1)            sqlrequete="select t.tecleunik,t.tetraduction from traductionintitule t where  t.lmcleunik="+ urlmcleunik+" and t.caecleunik="+caecleunik+" order by t.tetraduction;";        else if(cas==2)            sqlrequete="select t.tecleunik,t.tetraduction from traductionintitule t where  t.lmcleunik="+ urlmcleunik+" and t.caecleunik="+caecleunik+" order by t.tetraduction;";        tmpList=Transaction.generecombostest(sqlrequete,usercon);        return tmpList;    }        public Object ChargeObjectPopup(int urlmcleunik, int urcleunik, int objcleunik, int cas, Poolconnection connect) throws RemoteException {        throw new srcastra.astra.sys.rmi.Exception.InvalidSignalitiqueOperation("operation not supported for FournisseurGroupeDecision");    }        public Object chargeObjetCombo(int objectCleunik, int urcleunik, int urlmcleunik, Poolconnection connect) throws RemoteException {        throw new srcastra.astra.sys.rmi.Exception.InvalidSignalitiqueOperation("operation not supported for FournisseurGroupeDecision");    }        public Gestionerreur_T insertObjectPopup(Object objdp, int urcleunik, int cas, Poolconnection connect) throws RemoteException {        throw new srcastra.astra.sys.rmi.Exception.InvalidSignalitiqueOperation("operation not supported for FournisseurGroupeDecision");    }        public Gestionerreur_T modifyObjectPopup(Object objdp, int urcleunik, int cas, Poolconnection connect) throws RemoteException {        throw new srcastra.astra.sys.rmi.Exception.InvalidSignalitiqueOperation("operation not supported for FournisseurGroupeDecision");    }        public java.util.ArrayList renvIntitule(int urlmcleunik, int urcleunik, int cas, int caecleunik, Poolconnection connect) throws RemoteException {        return renvIntituleGrpdecision(urlmcleunik,connect.getConuser(),cas,caecleunik);    }        public CompressArray renvSignalitiques(int urlmcleunik, int urcleunik, int cas, Poolconnection connect) throws RemoteException {        throw new srcastra.astra.sys.rmi.Exception.InvalidSignalitiqueOperation("operation not supported for FournisseurGroupeDecision");    }        public ArrayList renvcombo(int urcleunik, int urlmcleunik, char plettre, String cxcode, int cas, Poolconnection connect) throws RemoteException {        throw new srcastra.astra.sys.rmi.Exception.InvalidSignalitiqueOperation("operation not supported for FournisseurGroupeDecision");    }        public void deleteSignaletique(long objectCleunik, int typeObjec, Poolconnection connect) throws ServeurSqlFailure {    }    }