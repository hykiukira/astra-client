/* * SignaletiqueTypeProduit.java * * Created on 4 septembre 2002, 13:14 */package srcastra.astra.sys.signalitique;import srcastra.astra.sys.Transaction;import srcastra.astra.sys.Logger;import srcastra.astra.sys.rmi.utils.Poolconnection;import java.rmi.RemoteException;import srcastra.astra.sys.classetransfert.*;import srcastra.astra.sys.compress.CompressArray;import java.util.ArrayList;import java.sql.*;import srcastra.astra.sys.rmi.utils.ServeurBuffer;import srcastra.astra.sys.rmi.astrainterface;import srcastra.astra.sys.rmi.utils.QueryKeyGen;import srcastra.astra.sys.rmi.Exception.*;import srcastra.astra.gui.modules.aidedesicion.*;/** * * @author  Thomas */public class SignaletiqueCompte implements srcastra.astra.sys.signalitique.Signalitique{        /** Creates a new instance of SignaletiqueTypeProduit */    public SignaletiqueCompte() {    }        public Object ChargeObject(int urlmcleunik, int urcleunik, int objcleunik, int cas, Poolconnection connect) throws RemoteException {        return null;    }        public Object ChargeObjectPopup(int urlmcleunik, int urcleunik, int objcleunik, int cas, Poolconnection connect) throws RemoteException {     return null;    }        public Object chargeObjetCombo(int objectCleunik, int urcleunik, int urlmcleunik, Poolconnection connect) throws RemoteException {     return null;    }        public Gestionerreur_T insertObjectPopup(Object objdp, int urcleunik, int cas, Poolconnection connect) throws RemoteException {     return null;    }        public Gestionerreur_T modifyObjectPopup(Object objdp, int urcleunik, int cas, Poolconnection connect) throws RemoteException {     return null;    }        public java.util.ArrayList renvIntitule(int urlmcleunik, int urcleunik, int cas, int caecleunik, Poolconnection connect) throws RemoteException {     return null;    }        public CompressArray renvSignalitiques(int urlmcleunik, int urcleunik, int cas, Poolconnection connect) throws RemoteException {        return renvSignalitiquesCompte(urlmcleunik,connect.getConuser(),cas, connect.getBuffer());    }        public ArrayList renvcombo(int urcleunik, int urlmcleunik, char plettre, String cxcode, int cas, Poolconnection connect) throws RemoteException {     return null;    }       public CompressArray renvSignalitiquesCompte(int urlmcleunik,Connection usercon, int cas, ServeurBuffer buf) throws RemoteException {           String tmplangue;        String sqlrequete=null;        CompressArray cp;       // String signature=QueryKeyGen.renvSignalitiques(urlmcleunik, 0, cas, astrainterface.COMBO_CODE_POST);        synchronized(buf) {            Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"renv signalitique code postaux:"+cas);            sqlrequete="select c.ce_cleunik,c.ce_num,tx.trate_traduction  from compte c,traduction_compte tx where c.ce_cleunik=tx.ce_cleunik and tx.lmcleunik="+urlmcleunik+" AND LENGTH(c.ce_num)>5 order by c.ce_num";           return GestionnaireSignaletique.renvsignaletique(sqlrequete,urlmcleunik,buf,astrainterface.COMBO_COMPTE,usercon,astrainterface.COMBO_COMPTECAS+urlmcleunik,"codePostalDir");               /*    String tmplangue;        String sqlrequete=null;        CompressArray cp;        String signature=QueryKeyGen.renvSignalitiques(urlmcleunik, 0, cas, astrainterface.COMBO_DEVISE );        synchronized (buf) {            if(cas==1) {                if (buf.isValid("signCompteCas1"))                    cp=buf.getValue("signCompteCas1");                else {                    sqlrequete="SELECT c.ce_cleunik,c.ce_num,ca.cate_intitule FROM compte c,categorie_compte ca WHERE c.cate_cleunik=ca.cate_cleunik AND ca.lmcleunik=1 ORDER by c.ce_num;";                    cp=Transaction.generecombostest3(sqlrequete,usercon);                    buf.setValue("signCompteCas1",cp);                    buf.linkNewName(signature,"compteDir");                    buf.setValue(signature, new Long(System.currentTimeMillis()));                                   }            }            else if(cas==2) {                if (buf.isValid("signCompteCas2"))                    cp=buf.getValue("signCompteCas2");                else {                   sqlrequete="SELECT c.ce_cleunik,c.ce_num,ca.cate_intitule FROM compte c,categorie_compte ca WHERE c.cate_cleunik=ca.cate_cleunik AND ca.lmcleunik=1 ORDER by c.ce_num;";                    cp=Transaction.generecombostest3(sqlrequete,usercon);                    buf.setValue("signCompteCas1",cp);                    buf.linkNewName(signature,"compteDir");                    buf.setValue(signature, new Long(System.currentTimeMillis()));                }            }            else                cp=null;        }        return cp;*/    }     }    public void deleteSignaletique(long objectCleunik, int typeObjec, Poolconnection connect) throws ServeurSqlFailure {    }     AbstractBuffer compteTree;}