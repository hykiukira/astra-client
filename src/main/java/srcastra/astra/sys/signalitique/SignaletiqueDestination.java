/*















 * SignaletiqueTypeProduit.java















 *















 * Created on 4 septembre 2002, 13:14















 */































package srcastra.astra.sys.signalitique;















import srcastra.astra.sys.Transaction;















import srcastra.astra.sys.Logger;















import srcastra.astra.sys.rmi.utils.Poolconnection;















import java.rmi.RemoteException;















import srcastra.astra.sys.classetransfert.*;















import srcastra.astra.sys.compress.CompressArray;















import java.util.ArrayList;















import java.sql.*;















import srcastra.astra.sys.rmi.utils.ServeurBuffer;















import srcastra.astra.sys.rmi.astrainterface;















import srcastra.astra.sys.rmi.utils.QueryKeyGen;















import srcastra.astra.sys.rmi.Exception.*;















/**















 *















 * @author  Thomas















 */















public class SignaletiqueDestination implements srcastra.astra.sys.signalitique.Signalitique{















    















    /** Creates a new instance of SignaletiqueTypeProduit */















    public SignaletiqueDestination() {















    }















   















    public Object ChargeObject(int urlmcleunik, int urcleunik, int objcleunik, int cas, Poolconnection connect) throws RemoteException {















     return null;















    }















    















    public Object ChargeObjectPopup(int urlmcleunik, int urcleunik, int objcleunik, int cas, Poolconnection connect) throws RemoteException {

      String sqlrequete=null;

        ResultSet tmpresult=null;

       ResultSet tmpresult2=null;

        String tmpcrea=null;

        String tmpmodif=null;

        ArrayList tmpArray=null;



        int tmpNbrLigne;

        Object returnValue=null;

        boolean isOk=false;       /*mis à true si la requete est ok*/

        Statement select;

        ServeurBuffer buf=connect.getBuffer();

        Gestionerreur_T tmperreur=new Gestionerreur_T();

        String signature=QueryKeyGen.ChargeObjectPopup(urlmcleunik,urcleunik,objcleunik,cas,astrainterface.COMBO_DESTINATION);

        urlmcleunik=0;

        buf.linkNewName(signature,"destinationDir");

        if(cas==1)

            sqlrequete="SELECT d.dn_cleunik,d.dn_abrev,td.tn_traduction,td.lmcleunik FROM destination d,traduction_destination td WHERE d.dn_cleunik=td.dn_cleunik AND td.lmcleunik=0 and d.dn_cleunik="+objcleunik+";";

        else if(cas==2) {

            Transaction.begin(connect.getConuser());

            sqlrequete="SELECT d.dn_cleunik,d.dn_abrev,td.tn_traduction,td.lmcleunik FROM destination d,traduction_destination td WHERE d.dn_cleunik=td.dn_cleunik AND td.lmcleunik=0 and d.dn_cleunik="+objcleunik+" FOR UPDATE;";

        }

        tmpresult=Transaction.execrequete3(sqlrequete,connect.getConuser(),tmperreur);

        if(tmperreur.getErreurcode()==10000)

            try{

                tmpresult.last();

                tmpNbrLigne=tmpresult.getRow();

                if(tmpNbrLigne!=0) {

                    tmpresult.first();

                    srcastra.astra.sys.classetransfert.signaletique.Generique_T generique=new srcastra.astra.sys.classetransfert.signaletique.Generique_T(tmpresult.getInt(1),tmpresult.getString(2),tmpresult.getString(3),tmpresult.getInt(4));

                    tmpArray=ChargePopupTraduction(connect.getConuser(),cas,objcleunik);

                    generique.setdata(tmpArray);

                    isOk=true;

                    generique.setErreurcode(tmperreur.getErreurcode());

                    generique.setErreurmessage(tmperreur.getErreurmessage());

                    returnValue=(Object)generique;

                }

                tmpresult.close();



            }

            catch(SQLException e){

                Logger.getDefaultLogger().log(Logger.LOG_SECURITY,"Erreur dans  ChargeCodePostaux: "+e.getErrorCode()+"  "+e.getMessage());

            }

        catch(Exception e1){















            Logger.getDefaultLogger().log(Logger.LOG_SECURITY,"erreur dans chargecodepostaux :"+e1);















        }















        else{















            srcastra.astra.sys.classetransfert.signaletique.Generique_T generique=new srcastra.astra.sys.classetransfert.signaletique.Generique_T();















            generique.setErreurcode(tmperreur.getErreurcode());















            generique.setErreurmessage(tmperreur.getErreurmessage());















            returnValue=(Object)generique;















        }















        return returnValue;















        















    }















     private ArrayList ChargePopupTraduction(Connection usercon,int cas,int objectCleunik) {















        ArrayList returnvalue=null;















        String sqlrequete=null;

        String sqlrequete2=null;

        int  nbrLigne=0;

        sqlrequete ="select  lmcleunik,lmintitule from languesystem order by lmcleunik";

        sqlrequete2="select lmcleunik, tn_traduction from traduction_destination  where dn_cleunik="+objectCleunik+" AND lmcleunik=0 order by lmcleunik;";

        returnvalue=Transaction.selecttraductionDestination(sqlrequete,sqlrequete2,usercon,1);

        return returnvalue;















    }















    public Object chargeObjetCombo(int objectCleunik, int urcleunik, int urlmcleunik, Poolconnection connect) throws RemoteException {















     return null;















    }















    















    public Gestionerreur_T insertObjectPopup(Object objdp, int urcleunik, int cas, Poolconnection connect) throws RemoteException {















      boolean x=false;















        String[] sqlrequete;















        String sqlrequete2;















        Gestionerreur_T tmpret=null; 















        ServeurBuffer buf=connect.getBuffer();















        ArrayList tmplist=null;















        srcastra.astra.sys.classetransfert.signaletique.Generique_T generique=(srcastra.astra.sys.classetransfert.signaletique.Generique_T)objdp;















      















            sqlrequete=new String[2];















                            //"insert into codepostaux(cxcode,cxintitulegen) values('"+tmpCdpt.getCxcode()+"','"+tmpCdpt.getCxlocalite()+"');";















            sqlrequete[0]="insert into destination(dn_abrev,urcleunikcrea,urcleunikmodif,dn_datetimecrea,dn_datetimemodif ) values('"+generique.getGenerique_abrev()+"',"+connect.getUrcle2()+","+connect.getUrcle2()+",NOW(),NOW()"+");";
            synchronized (buf)   // Ensure buffer is thread safe















            {















                Transaction.begin(connect.getConuser());















                tmpret=Transaction.execrequeteinsert(sqlrequete[0],connect.getConuser());















                if(tmpret.getErreurcode()==10000) {















                 //   for(int j=0;j<=generique.getNbrLangue();j++) {















                        //Object[] tmpobj=(Object[])tmplist.get(j);















                        sqlrequete[1]="insert into traduction_destination (dn_cleunik,tn_traduction ,lmcleunik) values("+tmpret.getTmpint()+",'"+generique.getGenerique_traduction()+"',0);";















                        Transaction.execrequeteinsert(sqlrequete[1],connect.getConuser());















                  //  }



                    Transaction.commit(connect.getConuser()); 

                    buf.invalidateBuffer("destinationDir");















                }















            }















        















        return tmpret;















    }















    















    public Gestionerreur_T modifyObjectPopup(Object objdp, int urcleunik, int cas, Poolconnection connect) throws RemoteException {

     boolean x=false;

        String[] sqlrequete;

        String sqlrequete2=null;

        Gestionerreur_T tmpret=null;

        Gestionerreur_T tmpret2=null;

        ServeurBuffer buf = connect.getBuffer();

        ArrayList tmplist=null;

        srcastra.astra.sys.classetransfert.signaletique.Generique_T generique=(srcastra.astra.sys.classetransfert.signaletique.Generique_T)objdp;

        sqlrequete=new String[2];

        sqlrequete[0]="update destination set dn_abrev='"+generique.getGenerique_abrev()+"',urcleunikmodif="+connect.getUrcle2()+",dn_datetimemodif=NOW() where dn_cleunik="+generique.getGenerique_cleunik()+";";

        sqlrequete[1]="update traduction_destination set tn_traduction='"+generique.getGenerique_traduction()+"' where dn_cleunik="+generique.getGenerique_cleunik()+" and lmcleunik=0";

            synchronized (buf) // Ensure buffer is thread safe

            {

                Transaction.begin(connect.getConuser());

                tmpret=Transaction.execrequeteinsert(sqlrequete[0],connect.getConuser());

                if(tmpret.getErreurcode()==10000) {

                    tmpret2=Transaction.execrequeteinsert(sqlrequete[1],connect.getConuser());

                    if(tmpret2.getErreurcode()==10000) {

                        Transaction.commit(connect.getConuser());

                        buf.invalidateBuffer("destinationDir");

                    }

                }

            }

        return tmpret;

    }















    















    public java.util.ArrayList renvIntitule(int urlmcleunik, int urcleunik, int cas, int caecleunik, Poolconnection connect) throws RemoteException {















     return null;















    }















    















    public CompressArray renvSignalitiques(int urlmcleunik, int urcleunik, int cas, Poolconnection connect) throws RemoteException {

        return renvSignalitiquesDestination(urlmcleunik,connect.getConuser(),cas, connect.getBuffer());

    }















    















    public ArrayList renvcombo(int urcleunik, int urlmcleunik, char plettre, String cxcode, int cas, Poolconnection connect) throws RemoteException {















     return null;















    }















     public CompressArray renvSignalitiquesDestination(int urlmcleunik,Connection usercon, int cas, ServeurBuffer buf) throws RemoteException {   

        String tmplangue;

        String sqlrequete=null;

        CompressArray cp;

        urlmcleunik=0;

        String signature=QueryKeyGen.renvSignalitiques(urlmcleunik, 0, cas, astrainterface.COMBO_DESTINATION);

        synchronized(buf) {

            Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"renv signalitique code postaux:"+cas);

            sqlrequete="select d.dn_cleunik,d.dn_abrev,td.tn_traduction"

                    +" from destination d,traduction_destination td"

                    +" where d.dn_cleunik=td.dn_cleunik  and td.lmcleunik=0"

                    +" order by d.dn_abrev;";

           return GestionnaireSignaletique.renvsignaletique(sqlrequete,urlmcleunik,buf,astrainterface.COMBO_DESTINATION,usercon,astrainterface.COMBO_DESTINATIONCAS+"0","destinationDir");

       }





 

/*       String tmplangue;















        String sqlrequete=null;















        CompressArray cp;















        String signature=QueryKeyGen.renvSignalitiques(urlmcleunik, 0, cas, astrainterface.COMBO_DEVISE );















        synchronized (buf) {















            if(cas==1) {















                if (buf.isValid("signDestinationCas1"))















                    cp=buf.getValue("signDestinationCas1");















                else {















                    sqlrequete="select d.dn_cleunik,d.dn_abrev,td.tn_traduction"















                    +" from destination d,traduction_destination td"















                    +" where d.dn_cleunik=td.dn_cleunik  and td.lmcleunik="+urlmcleunik















                    +" order by d.dn_abrev;";















                    cp=Transaction.generecombostest3(sqlrequete,usercon);















                    buf.setValue("signDestinationCas1",cp);















                    buf.linkNewName(signature,"destinationDir");















                    buf.setValue(signature, new Long(System.currentTimeMillis()));                   















                }















            }















            else if(cas==2) {















                if (buf.isValid("signDestinationCas2"))















                    cp=buf.getValue("signDestinationCas2");















                else {















                   sqlrequete="select d.dn_cleunik,td.tn_traduction,d.dn_abrev"















                    +" from destination d,traduction_destination td"















                    +" where d.dn_cleunik=td.dn_cleunik  and td.lmcleunik="+urlmcleunik















                    +" order by td.tn_traduction;";















                    cp=Transaction.generecombostest(sqlrequete,usercon);















                    buf.setValue("signDestinationCas2",cp);















                    buf.linkNewName(signature,"destinationDir");















                    buf.setValue(signature, new Long(System.currentTimeMillis()));















                }















            }















            else















                cp=null;















        }















        return cp;







*/







    }















    















     public void deleteSignaletique(long objectCleunik, int typeObjec, Poolconnection connect) throws ServeurSqlFailure {



            boolean sw=false;



        ServeurSqlFailure sqe;



        String requetebrochure="SELECT de_cleunik FROM brochure WHERE de_cleunik=? ";



        String requetesegment="SELECT as_routing_de   FROM avion_segments  WHERE as_routing_de  =? OR as_routing_a =?";



        String deletepays="DELETE from destination  WHERE dn_cleunik=?";



        try{



        PreparedStatement pstmt=connect.getConuser().prepareStatement(requetebrochure);



        pstmt.setInt(1,new Long(objectCleunik).intValue());        



        ResultSet result=pstmt.executeQuery();



        result.beforeFirst();



        while(result.next()){ 



            sw=true;           



        }



        pstmt=connect.getConuser().prepareStatement(requetesegment);



        pstmt.setInt(1,new Long(objectCleunik).intValue());



        pstmt.setInt(2,new Long(objectCleunik).intValue()); 



        result=pstmt.executeQuery();



        result.beforeFirst();



        while(result.next()){



            sw=true;           



        }



        if(sw){



               sqe=new ServeurSqlFailure("Enregistrement lié, impossible de l'effacer");



               sqe.setErrorcode(120);



               throw sqe; 















        }















        else {















            synchronized (connect.getBuffer()) {















            Transaction.begin(connect.getConuser());















            pstmt=connect.getConuser().prepareStatement(deletepays);















            pstmt.setInt(1,new Long(objectCleunik).intValue());















            pstmt.execute();     















            Transaction.commit(connect.getConuser());















            connect.getBuffer().invalidateBuffer("destinationDir");















            }















        }       















    }catch(SQLException se){















        Transaction.rollback(connect.getConuser());















        sqe=new ServeurSqlFailure("Erreur lors de la requete à la base de donnée");















        sqe.setErrorcode(se.getErrorCode());















        throw sqe; 















        















        















    }















     }















     















}















