/* * SignaletiqueTypeProduit.java * * Created on 4 septembre 2002, 13:14 */package srcastra.astra.sys.signalitique;import srcastra.astra.sys.Transaction;import srcastra.astra.sys.Logger;import srcastra.astra.sys.rmi.utils.Poolconnection;import java.rmi.RemoteException;import srcastra.astra.sys.classetransfert.*;import srcastra.astra.sys.compress.CompressArray;import java.util.ArrayList;import java.sql.*;import srcastra.astra.sys.rmi.utils.ServeurBuffer;import srcastra.astra.sys.rmi.astrainterface;import srcastra.astra.sys.rmi.utils.QueryKeyGen;import srcastra.astra.sys.classetransfert.signaletique.Generique_T;import srcastra.astra.sys.rmi.Exception.*;/** * * @author  Thomas */public class SignaletiqueCompagnie implements srcastra.astra.sys.signalitique.Signalitique{        /** Creates a new instance of SignaletiqueTypeProduit */    public SignaletiqueCompagnie() {    }       public Object ChargeObject(int urlmcleunik, int urcleunik, int objcleunik, int cas, Poolconnection connect) throws RemoteException {     return null;    }        public Object ChargeObjectPopup(int urlmcleunik, int urcleunik, int objcleunik, int cas, Poolconnection connect) throws RemoteException {        String sqlrequete=null;        ResultSet tmpresult=null;        ResultSet tmpresult2=null;        String tmpcrea=null;        String tmpmodif=null;        ArrayList tmpArray=null;        int tmpNbrLigne;        Object returnValue=null;        boolean isOk=false;       /*mis à true si la requete est ok*/        Statement select;        ServeurBuffer buf=connect.getBuffer();        Gestionerreur_T tmperreur=new Gestionerreur_T();        String signature=QueryKeyGen.ChargeObjectPopup(urlmcleunik,urcleunik,objcleunik,cas,astrainterface.COMBO_COMPAGNIE);        buf.linkNewName(signature,"compagnieDir");        if(cas==1)            sqlrequete="SELECT coe_cleunik,coe_abrev,coe_nom FROM compagnie WHERE coe_cleunik="+objcleunik+";";        else if(cas==2) {            Transaction.begin(connect.getConuser());              sqlrequete="SELECT coe_cleunik,coe_abrev,coe_nom FROM compagnie WHERE coe_cleunik="+objcleunik+" FOR UPDATE;";        }        tmpresult=Transaction.execrequete3(sqlrequete,connect.getConuser(),tmperreur);        if(tmperreur.getErreurcode()==10000)            try{                tmpresult.last();                tmpNbrLigne=tmpresult.getRow();                if(tmpNbrLigne!=0) {                    tmpresult.first();                    srcastra.astra.sys.classetransfert.signaletique.Generique_T generique=new srcastra.astra.sys.classetransfert.signaletique.Generique_T(tmpresult.getInt(1),tmpresult.getString(2),tmpresult.getString(3),1);                    tmpArray=ChargePopupTraduction(connect.getConuser(),cas,objcleunik,generique);                    generique.setdata(tmpArray);                    isOk=true;                    generique.setErreurcode(tmperreur.getErreurcode());                    generique.setErreurmessage(tmperreur.getErreurmessage());                    returnValue=(Object)generique;                }                tmpresult.close();            }            catch(SQLException e){                Logger.getDefaultLogger().log(Logger.LOG_SECURITY,"Erreur dans  ChargeCodePostaux: "+e.getErrorCode()+"  "+e.getMessage());            }        catch(Exception e1){            Logger.getDefaultLogger().log(Logger.LOG_SECURITY,"erreur dans chargecodepostaux :"+e1);        }        else{            srcastra.astra.sys.classetransfert.signaletique.Generique_T generique=new srcastra.astra.sys.classetransfert.signaletique.Generique_T();            generique.setErreurcode(tmperreur.getErreurcode());            generique.setErreurmessage(tmperreur.getErreurmessage());            returnValue=(Object)generique;        }        return returnValue;    }    private ArrayList ChargePopupTraduction(Connection usercon,int cas,int objectCleunik,Generique_T gen) {        ArrayList returnvalue=new ArrayList();      /* String sqlrequete=null;        String sqlrequete2=null;        int  nbrLigne=0;        sqlrequete ="select  lmcleunik,lmintitule from languesystem order by lmcleunik";        sqlrequete2="select lmcleunik, tn_traduction from traduction_destination  where dn_cleunik="+objectCleunik+" order by lmcleunik;";        returnvalue=Transaction.selecttraduction(sqlrequete,sqlrequete2,usercon,1);*/                returnvalue.add(new Object[]{new Integer(1),"FRANCAIS",gen.getGenerique_traduction()});        returnvalue.add(new Object[]{new Integer(2),"NEERLANDAIS",gen.getGenerique_traduction()});        returnvalue.add(new Object[]{new Integer(3),"ANGLAIS",gen.getGenerique_traduction()});        returnvalue.add(new Object[]{new Integer(4),"ESPAGNOL",gen.getGenerique_traduction()});          returnvalue.add(new Object[]{new Integer(5),"ALLEMAND",gen.getGenerique_traduction()});          return returnvalue;    }    public Object chargeObjetCombo(int objectCleunik, int urcleunik, int urlmcleunik, Poolconnection connect) throws RemoteException {     return null;    }        public Gestionerreur_T insertObjectPopup(Object objdp, int urcleunik, int cas, Poolconnection connect) throws RemoteException {        boolean x=false;        String[] sqlrequete;        String sqlrequete2;        Gestionerreur_T tmpret=null;         ServeurBuffer buf=connect.getBuffer();        ArrayList tmplist=null;        srcastra.astra.sys.classetransfert.signaletique.Generique_T generique=(srcastra.astra.sys.classetransfert.signaletique.Generique_T)objdp;            sqlrequete=new String[2];            sqlrequete[0]= "INSERT INTO compagnie (coe_abrev,coe_nom,coe_urcleunikcrea,coe_urcleunikmodif,coe_datetimecrea,coe_datetimemodif) VALUES ('"+generique.getGenerique_abrev()+"','"+generique.getGenerique_traduction()+"',"+connect.getUrcle2()+","+connect.getUrcle2()+",NOW(),NOW()"+");";            synchronized (buf)   // Ensure buffer is thread safe            {                Transaction.begin(connect.getConuser());                tmpret=Transaction.execrequeteinsert(sqlrequete[0],connect.getConuser());                Transaction.commit(connect.getConuser());                buf.invalidateBuffer("compagnieDir");            }        return tmpret;        }               public Gestionerreur_T modifyObjectPopup(Object objdp, int urcleunik, int cas, Poolconnection connect) throws RemoteException {     boolean x=false;        String[] sqlrequete;        String sqlrequete2=null;        Gestionerreur_T tmpret=null;        Gestionerreur_T tmpret2=null;        ServeurBuffer buf = connect.getBuffer();        ArrayList tmplist=null;        srcastra.astra.sys.classetransfert.signaletique.Generique_T generique=(srcastra.astra.sys.classetransfert.signaletique.Generique_T)objdp;                 sqlrequete=new String[2];            sqlrequete[0]="update compagnie set coe_abrev ='"+generique.getGenerique_abrev()+"',coe_nom='"+generique.getGenerique_traduction()+"',coe_urcleunikmodif="+connect.getUrcle2()+",coe_datetimemodif=NOW() where coe_cleunik="+generique.getGenerique_cleunik()+";";          //  if(generique.getTmpString().compareTo("none")==0)            //    sqlrequete[1]="insert into traduction_destination values("+generique.getGenerique_cleunik()+","+generique.getGenerique_langue()+",'"+generique.getGenerique_traduction()+"');";          //  else            //    sqlrequete[1]="update traduction_destination set tn_traduction='"+generique.getGenerique_traduction()+"' where dn_cleunik="+generique.getGenerique_cleunik()+" and lmcleunik="+generique.getGenerique_langue()+";";         //   Transaction.begin(connect.getConuser());            tmpret=Transaction.execrequeteinsert(sqlrequete[0],connect.getConuser());            Transaction.commit(connect.getConuser());            synchronized (buf) // Ensure buffer is thread safe            {               // Transaction.begin(connect.getConuser());                //tmpret=Transaction.execrequeteinsert(sqlrequete[0],connect.getConuser());            //    if(tmpret.getErreurcode()==10000) {                   /* tmpret2=Transaction.execrequeteinsert(sqlrequete[1],connect.getConuser());                    if(tmpret2.getErreurcode()==10000) {                        Transaction.commit(connect.getConuser());                        buf.invalidateBuffer("destinationDir");                    }*/                      buf.invalidateBuffer("compagnieDir");                }          //  Transaction.commit(connect.getConuser());                    return tmpret;        }                    public java.util.ArrayList renvIntitule(int urlmcleunik, int urcleunik, int cas, int caecleunik, Poolconnection connect) throws RemoteException {     return null;    }        public CompressArray renvSignalitiques(int urlmcleunik, int urcleunik, int cas, Poolconnection connect) throws RemoteException {        return renvSignalitiquesCompagnie(urlmcleunik,connect.getConuser(),cas, connect.getBuffer());    }        public ArrayList renvcombo(int urcleunik, int urlmcleunik, char plettre, String cxcode, int cas, Poolconnection connect) throws RemoteException {     return null;    }     public CompressArray renvSignalitiquesCompagnie(int urlmcleunik,Connection usercon, int cas, ServeurBuffer buf) throws RemoteException {           String tmplangue;        String sqlrequete=null;        CompressArray cp;        String signature=QueryKeyGen.renvSignalitiques(urlmcleunik, 0, cas, astrainterface.COMBO_COMPAGNIE );        synchronized (buf) {            if(cas==1) {                if (buf.isValid("signCompagnieCas1"))                    cp=buf.getValue("signCompagnieCas1");                else {                    sqlrequete="select coe_cleunik,coe_abrev,coe_nom"                    +" from compagnie order by coe_abrev;";                    cp=Transaction.generecombostest3(sqlrequete,usercon);                    buf.setValue("signCompagnieCas1",cp);                    buf.linkNewName(signature,"compagnieDir");                    buf.setValue(signature, new Long(System.currentTimeMillis()));                                   }            }            else if(cas==2) {                if (buf.isValid("signCompagnieCas2"))                    cp=buf.getValue("signCompagnieCas2");                else {                   sqlrequete="select coe_cleunik,coe_nom,coe_abrev"                    +" from compagnie order by coe_nom;";                    cp=Transaction.generecombostest3(sqlrequete,usercon);                    buf.setValue("signCompagnieCas2",cp);                    buf.linkNewName(signature,"compagnieDir");                    buf.setValue(signature, new Long(System.currentTimeMillis()));                }            }            else                cp=null;        }        return cp;    }         public void deleteSignaletique(long objectCleunik, int typeObjec, Poolconnection connect) throws ServeurSqlFailure {          boolean sw=false;        ServeurSqlFailure sqe;        String requetavion="SELECT coe_cleunik  FROM avion_ticket WHERE coe_cleunik =? ";        String requetesegment="SELECT coe_cleunik  FROM avion_segments  WHERE coe_cleunik =?";        String deletepays="DELETE from compagnie  WHERE coe_cleunik =?";        try{        PreparedStatement pstmt=connect.getConuser().prepareStatement(requetavion);        pstmt.setInt(1,new Long(objectCleunik).intValue());                ResultSet result=pstmt.executeQuery();        result.beforeFirst();        while(result.next()){             sw=true;                   }        pstmt=connect.getConuser().prepareStatement(requetesegment);        pstmt.setInt(1,new Long(objectCleunik).intValue());        result=pstmt.executeQuery();        result.beforeFirst();        while(result.next()){            sw=true;                   }        if(sw){               sqe=new ServeurSqlFailure("Enregistrement lié, impossible de l'effacer");               sqe.setErrorcode(120);               throw sqe;         }        else {            synchronized (connect.getBuffer()) {            Transaction.begin(connect.getConuser());            pstmt=connect.getConuser().prepareStatement(deletepays);            pstmt.setInt(1,new Long(objectCleunik).intValue());            pstmt.execute();                 Transaction.commit(connect.getConuser());            connect.getBuffer().invalidateBuffer("compagnieDir");            }        }           }catch(SQLException se){        Transaction.rollback(connect.getConuser());        sqe=new ServeurSqlFailure("Erreur lors de la requete à la base de donnée");        sqe.setErrorcode(se.getErrorCode());        throw sqe;                     }     }     }