/* * My_Socket_Client.java * * Created on 16 januari 2003, 10:17 */package srcastra.astra.sys.reseaux;import java.io.*;import java.net.*;import java.util.Hashtable;import srcastra.astra.sys.rmi.astraimplement;import srcastra.astra.sys.rmi.utils.Poolconnection;/** * * @author  Thomas */public class My_Socket_Client{        /** Creates a new instance of My_Socket_Client */    public My_Socket_Client(Socket i, int c,astraimplement serveur) {          try{                incoming = i; counter = c;                 System.out.println("{{{{{{{{{{{{{{{{{  }}}}}}}}}}création d'un nouveau thread");                m_serveur=serveur;                 input=new My_Socket_Client.ThreadedInput();                output=new My_Socket_Client.ThreadedOutPut();             }catch(Exception e){                e.printStackTrace();               }    }     public My_Socket_Client( int c,String ip,int port) {            try{                InetAddress ia=InetAddress.getByName(ip);                incoming=new Socket(ip,port);                counter = c;                 System.out.println("{{{{{{{{{{{{{{{{{  }}}}}}}}}}création d'un nouveau thread");                input=new My_Socket_Client.ThreadedInput();                output=new My_Socket_Client.ThreadedOutPut();            }catch(Exception e){                e.printStackTrace();               }    }public class ThreadedInput extends Thread{    public ThreadedInput(){        try{            System.out.println("création de l'inputstream");            out = new ObjectOutputStream(incoming.getOutputStream());            in = new ObjectInputStream (incoming.getInputStream());            this.run();        }catch(Exception e){         e.printStackTrace();                           }            }    public void run(){        try{            boolean done=false;            System.out.println("InputStream lancé");            while (!done)                             {                      System.out.println("{{{{{{{{{{{{{{{{{  }}}}}}}}}}Attente de donnée");                    Object str = in.readObject();                    System.out.println("{{{{{{{{{{{{{{{{{  }}}}}}}}}}Récetpion d'une classe");                    if (str == null) done = true;                    else                    {                         if(str instanceof ClientResaux_T){                            ClientResaux_T cli=(ClientResaux_T)str;                            try{                                Poolconnection tmpool=m_serveur.getConnection(cli.getUrcleunik(),true);                                tmpool.setUserSock(incoming);                            }catch(java.rmi.RemoteException rn){                                rn.printStackTrace();                            }                            cli.afficheClient();                        }                    }             }          incoming.close();                }catch(Exception e){        e.printStackTrace();       }    } InputStream inp ;   }    public void sendData(Object objet)    {        output.sendData(objet);    }     public class ThreadedOutPut extends Thread{        public ThreadedOutPut(){            try{                System.out.println("création de l'outputstream");                //ObjectOutputStream out = new ObjectOutputStream(incoming.getOutputStream());                this.run();            }catch(Exception e){             e.printStackTrace();                               }         }        public void run(){            try{                System.out.println("OutPutStream lancé");                out = new ObjectOutputStream(incoming.getOutputStream());            }catch(Exception e){                e.printStackTrace();                               }                     }        public void sendData(Object object){           try{           out.writeObject(object);           out.flush();           }catch(Exception e){            e.printStackTrace();                            }             }         ObjectOutputStream out;                 }   private Socket incoming;   private int counter;   private astraimplement m_serveur;       private ObjectOutputStream out;   private ObjectInputStream in;    private My_Socket_Client.ThreadedInput input;   private My_Socket_Client.ThreadedOutPut output;}