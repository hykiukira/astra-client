/* * CheskSumCompta.java * * Created on 12 février 2003, 14:43 */package srcastra.astra.sys.compta.command;import srcastra.astra.sys.compta.*;import srcastra.astra.sys.classetransfert.dossier.*;import java.sql.*;import srcastra.astra.sys.rmi.*;import java.util.*;/** * * @author  thomas */public class CheskSumCompta extends AbstractLigneCompta implements Command{        /** Creates a new instance of CheskSumCompta */    boolean newdossier;     CheckSum_T check;     Dossier_T dossier;    public CheskSumCompta(String action,Dossier_T dossier,Configuration config) {       this.dossier=dossier;        m_config=config;            }        public void executeInsert(int urcleunik) throws java.sql.SQLException {        check.setArray(chargeDossierCourant(urcleunik,null,"Nouveau dossier",false));           }    private ArrayList chargeDossierCourant(int urcleunik,ArrayList array,String text,boolean modif) throws java.sql.SQLException {        if(array==null)             array=new ArrayList();        String sqlrequete="SELECT  ce_cleunik ,hevaleurbase  FROM historique2 WHERE hetypeligne='D' AND drcleunik=? AND hedossiercourant='O'";        String sqlrequeteDossier="SELECT  ce_cleunik ,hevaleur  FROM historique2 WHERE hetypeligne='B' AND drcleunik=? AND hedossiercourant='O'";        String sqlrequetePayement="SELECT  ce_cleunik ,hevaleur  FROM historique2 WHERE (hetypeligne='P'  OR hetypeligne='CP')  AND drcleunik=? AND hedossiercourant='O'";        String sqlrequeteTva="SELECT  ce_cleunik ,hevaleur  FROM historique2 WHERE  hetypeligne='TVA' AND drcleunik=? AND hedossiercourant='O'";                String sqlrequeteFrais="SELECT  ce_cleunik ,hevaleurbase   FROM historique2 WHERE  hetypeligne='F' AND drcleunik=? AND hedossiercourant='O'";        PreparedStatement pstmt=m_config.getCon().prepareStatement(sqlrequeteDossier);        pstmt.setLong(1,new Integer(dossier.getDrcleunik()).longValue());        ResultSet result=pstmt.executeQuery();        result.beforeFirst();        while (result.next()){           array.add(ligne(result,text,false));               }        pstmt=m_config.getCon().prepareStatement(sqlrequete);        pstmt.setLong(1,new Integer(dossier.getDrcleunik()).longValue());        result=pstmt.executeQuery();        result.beforeFirst();        while (result.next()){           array.add(ligne(result,text,false));               }        if(!modif){            pstmt=m_config.getCon().prepareStatement(sqlrequetePayement);            pstmt.setLong(1,new Integer(dossier.getDrcleunik()).longValue());            result=pstmt.executeQuery();            result.beforeFirst();            while (result.next()){                array.add(ligne(result,text,true));                   }        }        pstmt=m_config.getCon().prepareStatement(sqlrequeteTva);        pstmt.setLong(1,new Integer(dossier.getDrcleunik()).longValue());        result=pstmt.executeQuery();        result.beforeFirst();        while (result.next()){           array.add(ligne(result,text,false));               }                 pstmt=m_config.getCon().prepareStatement(sqlrequeteFrais);        pstmt.setLong(1,new Integer(dossier.getDrcleunik()).longValue());        result=pstmt.executeQuery();        result.beforeFirst();        while (result.next()){           array.add(ligne(result,text,false));               }         return array;           }             private Object[] ligne(ResultSet result,String text,boolean payement) throws java.sql.SQLException {            Object[] tmp=new Object[4];            tmp[0]=result.getString(1);            double montant=result.getDouble(2);            if(montant>0){                tmp[1]=new Double(montant);                tmp[2]="";                       }            else{                tmp[1]="";                tmp[2]=new Double(- montant);                                  }            if(payement)                tmp[3]="Nouveau dossier";            else                tmp[3]=text;               return tmp; }  /** Getter for property check.  * @return Value of property check.  */ public srcastra.astra.sys.compta.CheckSum_T getCheck() {     return check; }  /** Setter for property check.  * @param check New value of property check.  */ public void setCheck(srcastra.astra.sys.compta.CheckSum_T check) {     this.check = check; }  public void executeModif(int urcleunik, int sw) throws java.sql.SQLException {     ArrayList array;     String sqlrequeteNcb="SELECT  ce_cleunik ,hevaleur  FROM historique2 WHERE hetypeligne='NC' AND lignecleunik=0 AND drcleunik=? AND hedossiercourant='N'";     String sqlrequeteNcd="SELECT  ce_cleunik ,hevaleurbase  FROM historique2 WHERE hetypeligne='NC' AND lignecleunik!=0 AND  drcleunik=? AND hedossiercourant='N'";     if(first){        array=chargeDossierCourant(urcleunik,null,"Ancien dossier",false);        check.setArray(array);     }     else{         PreparedStatement pstmt=m_config.getCon().prepareStatement(sqlrequeteNcb);         pstmt.setLong(1,new Integer(dossier.getDrcleunik()).longValue());         ResultSet result=pstmt.executeQuery();         result.beforeFirst();         while (result.next()){             check.getArray().add(ligne(result,"Note de crédit",false));                 }          pstmt=m_config.getCon().prepareStatement(sqlrequeteNcd);         pstmt.setLong(1,new Integer(dossier.getDrcleunik()).longValue());         result=pstmt.executeQuery();         result.beforeFirst();         while (result.next()){             check.getArray().add(ligne(result,"Note de crédit",false));                 }          check.setArray(chargeDossierCourant(urcleunik,check.getArray(),"Nouveau dossier",true));        }     }   public void executeInsertNCService(int  urcleunik) throws java.sql.SQLException {      }  public boolean first;}