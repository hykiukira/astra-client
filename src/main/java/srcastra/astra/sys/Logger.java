/* * Logger.java * * Created on 13 août 2002, 15:27 */package srcastra.astra.sys;import java.io.*;import java.util.*;import java.util.regex.*;/** * * @author  David */public class Logger extends java.lang.Object {    public static final int LOG_DEBUG=1;    public static final int LOG_INFOS=2;    public static final int LOG_WARNING=3;    public static final int LOG_SECURITY=4;    public static final int LOG_EMERGENCY=5;    public static final int LOG_ALWAYS=Integer.MIN_VALUE;    public static final int LOG_NEVER=Integer.MAX_VALUE;    private File fichier=null;    private boolean showOnScreen=true;    private static Logger defaultLogger = new Logger(System.out,false);    private PrintStream ps = null;    private int minLogLevel = LOG_DEBUG;    /** Creates a new instance of Logger */    public Logger(File fichier) {        this.fichier= fichier;    }    public Logger (PrintStream out){        this.ps=out;    }    private Logger (PrintStream out,boolean onScreen){        this (out);        this.showOnScreen=onScreen;    }    public void onScreen (boolean value){showOnScreen = value;}    public boolean isOnScreen () {return showOnScreen;}        public PrintStream getPrintStream(){openStream();return ps;}    public static void setDefaultLogger (Logger tmp) {defaultLogger=tmp;}    public static Logger getDefaultLogger (){return defaultLogger;}    private static String calendarToString (Calendar cal)    {        String returnstr;        returnstr=cal.getTimeZone().getDisplayName(true,TimeZone.SHORT);        returnstr+=" "+cal.get(cal.DAY_OF_MONTH);        returnstr+="-"+cal.get(cal.MONTH);        returnstr+="-"+cal.get(cal.YEAR);        returnstr+=" "+cal.get(cal.HOUR_OF_DAY);        returnstr+=":"+cal.get(cal.MINUTE);        returnstr+=":"+cal.get(cal.SECOND);                   return returnstr;    }    private void openStream()    {        if (ps==null) synchronized (this)        {            if (ps==null)            {                try                {                    ps= new PrintStream (new FileOutputStream(fichier));                }                catch (FileNotFoundException e)                {                    ps=null;                }                            }        }    }    private String getPrefix(int logLevel)    {        switch (logLevel)        {            case LOG_DEBUG:                return "   DEBUG";            case LOG_INFOS:                return "   INFOS";            case LOG_WARNING:                return " WARNING";            case LOG_SECURITY:                return "SECURITY";            case LOG_EMERGENCY:                return "   ALERT";            case LOG_NEVER:                return "";            case LOG_ALWAYS:                return "  ALWAYS";            default:                return Integer.toString(logLevel);                            }    }    public String log (int logLevel, String message)    {        if (message==null) message="null";        String prefix="{"+getPrefix(logLevel)+"}["+calendarToString (Calendar.getInstance())+"] ";        String result ="";        if (logLevel<this.minLogLevel){           // System.out.println("loglevel<minlevel");            return prefix+message;        }        if (ps!=null)        {            try            {                String[]lines=message.split("\\n");                for (int i=0;i<lines.length;i++)                    result+=(i==0?"":"\n")+prefix+lines[i];            }            catch (PatternSyntaxException e)            {                e.printStackTrace();            }            ps.println(result);            ps.flush();        }        else{            System.out.println("ps null");            return defaultLogger.log(logLevel,"Could not write to log: "+message);        }        return message;            }    public String log (int logLevel, Object message) {        return log(logLevel,message.toString());    }    public String log (int logLevel, long message) {return log(logLevel,Long.toString(message));}    public String log (int logLevel, double message) {return log(logLevel,Double.toString(message));}    public String log (int logLevel, boolean message) {return log(logLevel,Boolean.toString(message));}    public String printStackTrace (int logLevel, Throwable e)    {        String message=e.getMessage();        StackTraceElement[] ste = e.getStackTrace();        for (int i=0;i<ste.length;i++)        {            message+="\n\t at "+ste[i].toString();        }        return log (logLevel,message);    }        public String log (int logLevel, String message,String host, String port)    {        return log (logLevel,"["+host+":"+port+"] "+message);    }            public String log (int logLevel, Object message,String host, String port)             {return log(logLevel,message.toString(),host,port);}    public String log (int logLevel, long message,String host, String port)             {return log(logLevel,Long.toString(message),host,port);}    public String log (int logLevel, double message,String host, String port)             {return log(logLevel,Double.toString(message),host,port);}    public String log (int logLevel, boolean message,String host, String port)             {return log(logLevel,Boolean.toString(message),host,port);}        public void setMinLogLevel (int val)    {        minLogLevel = val;    }        }