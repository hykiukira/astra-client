/* * CompressArray.java * * Created on 5 juillet 2002, 9:19 */package srcastra.astra.sys.compress;import java.io.*;import java.util.ArrayList;import java.util.zip.*;import java.sql.*;import srcastra.astra.sys.compress.*;/** * * @author  thom * @version 0.2 - small is beautifull */public class CompressArray extends ArrayList implements Externalizable, Compressible{    private byte[] tabByte=null;    private int sizeArray;    int sizeOfByteArray;    //ArrayList list;        //Object obj;    /** Creates new CompressArray */    public CompressArray() {        super();        signature=System.currentTimeMillis();      // this.list=new ArrayList();            //obj=new Object[]{"1","test","essais"};       //for(int i=0;i<10;i++)         //  this.list.add(obj);      ///affiche_array();       //this.compress();           //affiche_array();       //this.decompress();            //  affiche_array();    }    public static void main(String[] args) {              CompressArray obj=new CompressArray();      }    public void Compress_From_Array(ArrayList array){          long t1=System.currentTimeMillis();        ResultSetMetaData tmpresultmeta;        int tmpcolcount;        Object tmp=null;        this.sizeArray=0;        try{             ByteArrayOutputStream ByteOut=new ByteArrayOutputStream();             DeflaterOutputStream defOut=new DeflaterOutputStream(ByteOut);             ObjectOutputStream ObjOut=new ObjectOutputStream(defOut);              //ObjectOutputStream ObjOut=new ObjectOutputStream(ByteOut);           //  tmpresultmeta=Result.getMetaData();            // tmpcolcount=tmpresultmeta.getColumnCount();           //  Result.beforeFirst();             int cmpt=0;             if(array!=null){                 for(int i=0;i<array.size();i++){                     cmpt++;                      this.sizeArray++;                       tmp=(Object)array.get(i);                     ObjOut.writeObject(tmp);                                       }             }             else                 tmp=new Object();                  ObjOut.writeObject(tmp);                                  System.out.println ("did compress "+cmpt+" line(s)");            ObjOut.flush();            defOut.finish();            this.tabByte=ByteOut.toByteArray();             this.sizeOfByteArray=this.tabByte.length;                        ObjOut.close();            long t2=System.currentTimeMillis();            long total=t2-t1;            System.out.println("temps pour la compression= "+total);           }           catch(IOException e)            {             System.out.println(e);            }                                }    public void Compress_from_resulset(ResultSet Result)    {        long t1=System.currentTimeMillis();        ResultSetMetaData tmpresultmeta;        int tmpcolcount;        Object[] tmp;        this.sizeArray=0;        try{             ByteArrayOutputStream ByteOut=new ByteArrayOutputStream();             DeflaterOutputStream defOut=new DeflaterOutputStream(ByteOut);             ObjectOutputStream ObjOut=new ObjectOutputStream(defOut);             tmpresultmeta=Result.getMetaData();             tmpcolcount=tmpresultmeta.getColumnCount();             Result.beforeFirst();             int cmpt=0;                  while(Result.next())                    {                         cmpt++;                        this.sizeArray++;                       tmp=new Object[tmpcolcount];                       for(int i=0;i<tmpcolcount;i++)                           {                             tmp[i]=(Object)Result.getObject(i+1);                           }                       ObjOut.writeObject(tmp);                                  }              System.out.println ("did compress "+cmpt+" line(s)");            ObjOut.flush();            defOut.finish();            this.tabByte=ByteOut.toByteArray();             this.sizeOfByteArray=this.tabByte.length;                        ObjOut.close();            long t2=System.currentTimeMillis();            long total=t2-t1;            System.out.println("temps pour la compression= "+total);           }           catch(IOException e)            {             System.out.println(e);            }            catch(SQLException e3)            {                e3.printStackTrace();            }           }    public void Compress_from_resulset2(ResultSet Result)    {        long t1=System.currentTimeMillis();        ResultSetMetaData tmpresultmeta;        int tmpcolcount;        Object[] tmp;        this.sizeArray=0;        try{             ByteArrayOutputStream ByteOut=new ByteArrayOutputStream();             DeflaterOutputStream defOut=new DeflaterOutputStream(ByteOut);             ObjectOutputStream ObjOut=new ObjectOutputStream(defOut);             //ObjectOutputStream ObjOut=new ObjectOutputStream(ByteOut);             tmpresultmeta=Result.getMetaData();             tmpcolcount=tmpresultmeta.getColumnCount();             Result.beforeFirst();             int cmpt=0;                  while(Result.next())                    {                         cmpt++;                        this.sizeArray++;                       tmp=new Object[tmpcolcount+1];                       int j=0;                       for(int i=0;i<tmpcolcount;i++)                           {                             j++;                             tmp[i]=(Object)Result.getObject(j);                           }                       tmp[tmpcolcount]=new Integer(cmpt-1);                       ObjOut.writeObject(tmp);                                  }              System.out.println ("did compress "+cmpt+" line(s)");            ObjOut.flush();            defOut.finish();            this.tabByte=ByteOut.toByteArray();             this.sizeOfByteArray=this.tabByte.length;                        ObjOut.close();            long t2=System.currentTimeMillis();            long total=t2-t1;            System.out.println("temps pour la compression= "+total);           }           catch(IOException e)            {             System.out.println(e);            }            catch(SQLException e3)            {                e3.printStackTrace();            }           }    private byte[] compress()    {        long t1=System.currentTimeMillis();        ResultSetMetaData tmpresultmeta;        int tmpcolcount;        Object[] tmp;        byte[] tmpb = null;        this.sizeArray=0;        try{             ByteArrayOutputStream ByteOut=new ByteArrayOutputStream();             DeflaterOutputStream defOut=new DeflaterOutputStream(ByteOut);             ObjectOutputStream ObjOut=new ObjectOutputStream(defOut);             this.sizeArray=0;             for (int i = 0; i< size(); i++)             {                   ObjOut.writeObject(this.get(i));                           }               System.out.println ("did compress "+this.size()+" line(s)");             ObjOut.flush();             defOut.finish();             tmpb = ByteOut.toByteArray();              ObjOut.close();             long t2=System.currentTimeMillis();             long total=t2-t1;             System.out.println("temps pour la compression= "+total);           }           catch(IOException e)           {             System.out.println(e);             return null;           }            return tmpb;    }        private void decompress(byte[] tabin){       try{          long t1=System.currentTimeMillis();          Object tmpobj;          ByteArrayInputStream ByteIn=new  ByteArrayInputStream(tabin);          InflaterInputStream defIn=new InflaterInputStream(ByteIn);          ObjectInputStream ObjIn=new ObjectInputStream(defIn);          for(int i=0;i<sizeArray;i++)             {                tmpobj=ObjIn.readObject();                this.add(tmpobj);             }            ObjIn.close();           long t2=System.currentTimeMillis();          long total=t2-t1;          System.out.println ("read "+sizeArray+" objects");          System.out.println ("temps pour la décompression= "+total);        }        catch(IOException e)            {                e.printStackTrace();                System.out.println(e);            }            catch(ClassNotFoundException e3)            {                System.out.println(e3);            }    }public void affiche_array(){ Object[] tmpobj; for(int i=0;i<this.sizeArray;i++) {     tmpobj=(Object[])this.get(i);     for(int j=0;j<3;j++)     System.out.println(tmpobj[j]);     System.out.println("\n"); }}    public String toString()    {        String tmp = "";        if (isCompressed())            tmp=tmp+"[Compressed] ";        tmp=tmp+"sizeArray: "+size();        return tmp;    }public void readExternal(java.io.ObjectInput objectInput) throws java.io.IOException, java.lang.ClassNotFoundException {    byte[] tmpByte;    this.signature=objectInput.readLong();    this.sizeArray=objectInput.readInt();    this.sizeOfByteArray=objectInput.readInt();    tmpByte=new byte[this.sizeOfByteArray];    objectInput.readFully(tmpByte);    decompress(tmpByte);}public void writeExternal(java.io.ObjectOutput objectOutput) throws java.io.IOException {    if (!isCompressed())        compressNow();    objectOutput.writeLong(this.signature);    objectOutput.writeInt(this.sizeArray);    objectOutput.writeInt(this.sizeOfByteArray);    objectOutput.write(this.tabByte);    objectOutput.flush();}    public int getSizeArray()    {        return sizeArray;    }    public void compressNow() {        if (isCompressed())            return;        this.tabByte=compress();        if (isCompressed())        {            this.sizeOfByteArray=tabByte.length;            this.sizeArray=this.size();            this.clear();        }    }    public void decompressNow() {        if (isCompressed())        {            decompress(this.tabByte);            this.tabByte=null;        }    }    public boolean isCompressed() {        return (tabByte!=null);    }    /** Getter for property signature.     * @return Value of property signature.     */    public long getSignature() {        return signature;    }        /** Setter for property signature.     * @param signature New value of property signature.     */    public void setSignature(long signature) {        this.signature = signature;    }    long signature;}