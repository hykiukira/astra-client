/* * DossierIndexTableModel.java * * Created on 30 août 2002, 9:49 */package srcastra.astra.gui.sys.tableModel.dossierTableModel;import srcastra.astra.gui.sys.tableModel.AbstractVectorTableModel;import srcastra.astra.gui.sys.tableModel.ColumnData;import javax.swing.JLabel;import java.util.Vector;import java.util.ArrayList;import srcastra.astra.gui.sys.ErreurScreenLibrary;import srcastra.astra.sys.rmi.astrainterface;import srcastra.astra.sys.classetransfert.Loginusers_T;import srcastra.astra.gui.modules.mainScreenModule.DossierMainScreenModule;import java.rmi.RemoteException;import srcastra.astra.sys.classetransfert.dossier.Dossier_T;import srcastra.astra.sys.rmi.DossierRmiInterface;import srcastra.astra.sys.classetransfert.dossier.avion.*;import srcastra.astra.sys.classetransfert.utils.*;/** * * @author  Sébastien */public class DossierSegmentsTableModel extends javax.swing.table.AbstractTableModel implements DossierTableModelInterface {        /** Creates a new instance of DossierIndexTableModel */javax.swing.JList listeConjonction;javax.swing.DefaultListModel listemodel;    public DossierSegmentsTableModel(astrainterface serveur, Loginusers_T currentUser,DossierMainScreenModule parent,javax.swing.JList listeConjonction,javax.swing.DefaultListModel listemodel) {        super();//serveur, currentUser);        this.currentUser=currentUser;        this.parent=parent;        this.listeConjonction=listeConjonction;        this.listemodel=listemodel;        loadColumnNames();    }    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Méthodes Surchargées///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                protected ColumnData[] loadColumnNames() {        java.util.ResourceBundle rb = null;         try {            rb = java.util.ResourceBundle.getBundle("srcastra/astra/locale/tableHeader/dossier/DossierSegmentsTableTableHeader", currentUser.getLangage());         }         catch (java.util.MissingResourceException e) {            ErreurScreenLibrary.displayErreur(null, ErreurScreenLibrary.MISSING_RESSOURCE_EXCEPTION, srcastra.astra.Astra.DEBUG, e);                     }         if (rb != null) {            m_columnNames= new ColumnData[] { new ColumnData("1", rb, 0, JLabel.LEFT),                                        new ColumnData("2", rb, 0, JLabel.LEFT),                                        new ColumnData("3", rb, 0, JLabel.LEFT),                                        new ColumnData("4", rb, 0, JLabel.LEFT),                                        new ColumnData("5", rb, 0, JLabel.LEFT),                                        new ColumnData("6", rb, 0, JLabel.LEFT),                                       new ColumnData("7", rb, 0, JLabel.LEFT),                                       new ColumnData("8", rb, 0, JLabel.LEFT),             };                    }        else {           m_columnNames= new ColumnData[] {  new ColumnData("City Departure", rb, 0, JLabel.LEFT),                                        new ColumnData("City Arrival", rb, 0, JLabel.LEFT),                                        new ColumnData("Carrier", rb, 0, JLabel.LEFT),                                        new ColumnData("Flight", rb, 0, JLabel.LEFT),                                        new ColumnData("Departure date", rb, 0, JLabel.LEFT),                                        new ColumnData("Departure time", rb, 0, JLabel.LEFT),                                        new ColumnData("Arrival time", rb, 0, JLabel.LEFT),                                        new ColumnData("FARE", rb, 0, JLabel.LEFT),             };        }        return m_columnNames;    }        /*    public  ArrayList loadData() {      ArrayList data = new ArrayList();            }        return data;    }*/        public java.util.ArrayList getData() {        return segmentList;    }        public void setData(java.util.ArrayList data) {    }        public boolean retrieveData() {         m_vector=new Vector();         if(parent.getTicket()!=null){         ArrayList conjonctionlist=parent.getTicket().getConjonctionList();              if(conjonctionlist!=null){             listemodel.clear();             for(int i=0;i<conjonctionlist.size();i++) {                Conjonction_T tmpconj=(Conjonction_T)conjonctionlist.get(i);                   listemodel.addElement(tmpconj.getNumbillet());             //   javax.swing.ListModel listemodel=listeConjonction.getModel();                          /// javax.swing.DefaultListModel modelmerde=(javax.swing.DefaultListModel)listemodel;                segmentList=tmpconj.getSegmentList();                if(segmentList!=null) {                    for(int j=0;j<tmpconj.getSegmentList().size();j++) {                           Avion_segment_T tmpseg=(Avion_segment_T)tmpconj.getSegmentList().get(j);                        Date datedep = new Date(tmpseg.getAs_date_départ().toString().substring(0,19));                        if(!tmpseg.isDeleted())                        {                            //add by me                            if(tmpseg.getAs_farebasis().equals("VOID"))                            m_vector.addElement(new Object[] { new Integer(j),tmpseg.getAs_routing_de_intitule(),tmpseg.getAs_routing_a_intitule(),"","VOID", "", "", "",  tmpseg.getAs_farebasis(),tmpseg} );                            else                            m_vector.addElement(new Object[] { new Integer(j),tmpseg.getAs_routing_de_intitule(),tmpseg.getAs_routing_a_intitule(),tmpseg.getAs_compagnie_intitule(),tmpseg.getAs_numero_vol(), (datedep.isOpen() || datedep.isUnknow()) ? datedep.getSpecString() : datedep.toString2() , tmpseg.getAs_heure_départ(), tmpseg.getAs_heure_arrive(),  tmpseg.getAs_farebasis(),tmpseg} );                        }                    }               }            }      }    }   return true;    }     public boolean retrieveData(int conjonction) {         m_vector=new Vector();         if(parent.getTicket()!=null){         ArrayList conjonctionlist=parent.getTicket().getConjonctionList();              if(conjonctionlist!=null){                            Conjonction_T tmpconj=(Conjonction_T)conjonctionlist.get(conjonction);                //   javax.swing.ListModel listemodel=listeConjonction.getModel();                          /// javax.swing.DefaultListModel modelmerde=(javax.swing.DefaultListModel)listemodel;                segmentList=tmpconj.getSegmentList();                if(segmentList!=null) {                    for(int j=0;j<tmpconj.getSegmentList().size();j++) {                           Avion_segment_T tmpseg=(Avion_segment_T)tmpconj.getSegmentList().get(j);                        Date datedep = new Date(tmpseg.getAs_date_départ().toString().substring(0,19));                        if(!tmpseg.isDeleted())                        {                            if(tmpseg.getAs_farebasis().equals("VOID"))                            m_vector.addElement(new Object[] { new Integer(j),tmpseg.getAs_routing_de_intitule(),tmpseg.getAs_routing_a_intitule(),"","VOID", "", "", "",  tmpseg.getAs_farebasis(),tmpseg} );                            else                            m_vector.addElement(new Object[] { new Integer(j),tmpseg.getAs_routing_de_intitule(),tmpseg.getAs_routing_a_intitule(),tmpseg.getAs_compagnie_intitule(),tmpseg.getAs_numero_vol(), (datedep.isOpen() || datedep.isUnknow()) ? datedep.getSpecString() : datedep.toString2() , tmpseg.getAs_heure_départ(), tmpseg.getAs_heure_arrive(),  tmpseg.getAs_farebasis(),tmpseg} );                        }                     }               }          }    }   return true;    }    public Object getObject(int row){        Object[] tmp=null;        if(row < 0 || row >= m_vector.size()){           System.out.println("out of range");        }        else{            tmp=(Object[]) m_vector.get(row);        }        return tmp[tmp.length-1];            }      public int getRowCount() {        return m_vector==null ? 0 : m_vector.size();     }    /** Renvoi le nombre de colonnes */    public int getColumnCount() {         return m_columnNames.length;    }        /** renvoi la valeur à un point donné */    public Object getValueAt(int row, int col) {        Object[] obj = (Object[])m_vector.get(row);        switch(col){            case 0:     return obj[1];            case 1:     return obj[2];            case 2:     return obj[3];            case 3:     return obj[4];            case 4:     return obj[5];            case 5:     return obj[6];            case 6:     return obj[7];            case 7:     return obj[8];                   }        return "";    }           public String getColumnName(int col) {        return m_columnNames[col].getM_title();    }    /** Getter for property listeConjonction.     * @return Value of property listeConjonction.     */    public javax.swing.JList getListeConjonction() {        return listeConjonction;    }        /** Setter for property listeConjonction.     * @param listeConjonction New value of property listeConjonction.     */    public void setListeConjonction(javax.swing.JList listeConjonction) {        this.listeConjonction = listeConjonction;    }        private java.util.Vector m_vector;    private DossierMainScreenModule parent;    private ArrayList segmentList;    private ArrayList data;    private ArrayList tmpArray;    private DossierRmiInterface serveurDossier;    private boolean m_result = true;    ColumnData[] m_columnNames;    private Loginusers_T currentUser;}