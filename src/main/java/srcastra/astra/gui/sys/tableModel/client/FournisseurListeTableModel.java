/* * TransportTableModel.java * * Created on 20 novembre 2002, 14:22 */package srcastra.astra.gui.sys.tableModel.client;import srcastra.astra.sys.rmi.astrainterface;import srcastra.astra.sys.classetransfert.Loginusers_T;import java.util.ArrayList;import srcastra.astra.Astra;import java.rmi.RemoteException;import srcastra.astra.gui.sys.ErreurScreenLibrary;import srcastra.astra.gui.sys.formVerification.ListSelectorMask;import srcastra.astra.gui.sys.tableModel.AbstractAstraTableModel;import srcastra.astra.gui.sys.ErreurScreenLibrary;import srcastra.astra.gui.test.*;import srcastra.astra.sys.rmi.astrainterface;import srcastra.astra.sys.classetransfert.clients.Clients_T;import srcastra.astra.sys.classetransfert.Loginusers_T;import java.util.ArrayList;import srcastra.astra.Astra;import java.rmi.RemoteException;import srcastra.astra.gui.sys.ErreurScreenLibrary;import srcastra.astra.gui.sys.formVerification.ListSelectorMask;import srcastra.astra.sys.Logger;import srcastra.astra.sys.rmi.Exception.ServeurSqlFailure;import srcastra.astra.sys.manipuleclient.ClientConstante;import srcastra.astra.gui.sys.tableModel.AbstractAstraTableModel;import srcastra.astra.gui.sys.ErreurScreenLibrary;import srcastra.astra.sys.classetransfert.dossier.ProduitAffichage;import javax.swing.*;import java.util.*;import java.awt.Component;import javax.swing.table.AbstractTableModel;import srcastra.astra.gui.sys.comparator.ListeSelectorComparaTor2;/** * * @author  Thomas */public class FournisseurListeTableModel extends srcastra.astra.gui.components.combobox.liste2.ListeTableModel implements srcastra.astra.gui.components.combobox.liste2.ListeModelInterface, srcastra.astra.sys.manipuleclient.ClientConstante{        public static final int FIELD_CLEUNIK = 0;    public static final int FIELD_DATECREA = 1;    public static final int FIELD_DATEMODIF = 2;    public static final int FIELD_MAIL = 3;    public static final int FIELD_FAX = 4;    public static final int FIELD_PHONE = 5;    public static final int FIELD_NOM = 6;    public static final int FIELD_REF = 7;    public static final int FIELD_ADRESSE = 8;    public static final int FIELD_CLECP = 9;    public static final int FIELD_LOCALITE = 11;    public static final int FIELD_CP = 12;                   /** Creates a new instance of TransportTableModel */    srcastra.astra.gui.MainFrame main;    public FournisseurListeTableModel(astrainterface serveur, Loginusers_T login,srcastra.astra.gui.MainFrame main) {      super(serveur,login);        this.main=main;    }    public ArrayList loadata(String name){         try {                 System.out.println("Cle de l'entite "+m_login.getUreecleunik());            m_vector = main.getFournisseurRmi().getArrayOfFournisseur(m_login.getUrcleunik(),name);        }        catch (RemoteException e) {            ErreurScreenLibrary.displayErreur(null, ErreurScreenLibrary.REMOTE_EXCEPTION, Astra.DEBUG, e, m_login);        }        catch (Exception e) {            ErreurScreenLibrary.displayErreur(null, ErreurScreenLibrary.EXCEPTION, Astra.DEBUG, e,m_login);        }            return m_vector;     }        public void resetData() {        m_vector = new ArrayList(0);    }            /** Getter for property m_column.     * @return Value of property m_column.     */    public srcastra.astra.gui.test.ColumnData[] getM_column() {        return this.m_columns;    }     public Object[] getSelectedObject(int row){        return (Object[])m_vector.get(row);             }        /** Setter for property m_column.     * @param m_column New value of property m_column.     */    public void setM_column(srcastra.astra.gui.test.ColumnData[] m_column) {        this.m_columns = m_column;    }      public Object getValueAt(int param, int param1) {//                          0           1               2               3             4         5           6          //"SELECT c.cscleunik,c.csdatetimecrea,c.csdatetimemodi,c.csmailprincip,c.csfax,c.cstelephonep ,c.csnom //                  7           8           9           10         11          12                              //,c.csreference,c.csadresse,c.cxcleunik,c.csadresse,t.txtraduction,co.cxcode  FROM clients c ,traductioncodpostaux t          //,codepostaux co WHERE c.cxcleunik=t.cxcleunik AND co.cxcleunik=c.cxcleunik AND t.lmcleunik= ? AND c.csnom LIKE(CONCAT(?,'%'));";        if(m_vector==null)return "";         if(param<0 || param1>getColumnCount())            return "";        Object[] row=(Object[])m_vector.get(param);        int annuler=((Integer)row[row.length-2]).intValue();        int size;        int rowcount=0;        if(annuler==0){            // size=row.length-1;                     rowcount=1;        }        else if(annuler==1){             rowcount=-1;        }        switch(param1)        {                        case 0:return new srcastra.astra.gui.components.combobox.liste.RowColorListe(row[6],rowcount);            case 1:return new srcastra.astra.gui.components.combobox.liste.RowColorListe(row[7],rowcount);            case 2:return new srcastra.astra.gui.components.combobox.liste.RowColorListe(row[11],rowcount);            case 3:return new srcastra.astra.gui.components.combobox.liste.RowColorListe(row[12],rowcount);            case 4:return new srcastra.astra.gui.components.combobox.liste.RowColorListe(row[8],rowcount);               case 5:return new srcastra.astra.gui.components.combobox.liste.RowColorListe(row[3],rowcount);           }        return "";    }    public int searchAWord(Object word, int column) {        int position = -1;        m_sortCol = column;        Object[] array;        Object[] array2 = new Object[getColumnCount()+1];        for (int i=0; i < array2.length; i++) {          array2[i] = word;        }        if(column==0){            //loadata();           m_vector_by_key=(ArrayList)m_vector.clone();           Collections.sort(m_vector_by_key,new ListeSelectorComparaTor2(0,true));            array=m_vector_by_key.toArray();        //   for(int i=0;i<array.length;i++){         //  Object[] tmp=(Object[])array[i];             //System.out.println("pays "+" "+i+" "+tmp[0]+" "+tmp[1]);          // }                       position = Arrays.binarySearch(array, array2,this);           //m_vector=tmpArray;        }        else{             //loadata();             array=m_vector.toArray();             position = Arrays.binarySearch(array, array2,this);        }                                  // position = Arrays.binarySearch(array, array2, this);       // position = Arrays.binarySearch(array, word);       // System.out.println("[SEARCH A WORD] position after binarySearch : " + position);        if (position < 0) return (position +1) * -1;        return position;    }     public int compare(Object obj, Object obj1) {        System.out.println("[COMPARE] column = " + m_sortCol);        Object[] tmpObj1 =(Object[]) obj;        Object[] tempObj2 = (Object[]) obj1;        Object comp1=tempObj2[1];        int compare;        String cp1=null;        String cp2=null;        int entier1;        int entier2;        int comparaison =0;        switch(m_sortCol)        {            case 0:                entier1=((Integer)tmpObj1[0]).intValue();                entier2=((Integer)comp1).intValue();                if(entier1<entier2) comparaison=-1;                else if(entier1>entier2) comparaison=1;                else if(entier1==entier2) comparaison=0;                break;            case 1:                // faudrait dc pouvoir changer le number ici pour faire une recherche sur différents champs                cp1=tmpObj1[6].toString();                cp2=comp1.toString();                   comparaison = (cp1.toUpperCase()).compareTo(cp2.toUpperCase());                break;        }                     //  System.out.println("[COMPARE] Objet comparé 1 = " + cp1 + " Objet comparé 2 = " + cp2 + " Nbre de comparaison retourné = " + comparaison);        return comparaison;    }         /** Getter for property seveur.     * @return Value of property seveur.     */       /** Setter for property seveur.     * @param seveur New value of property seveur.     */          /** Getter for property login.     * @return Value of property login.     */          /** Setter for property login.     * @param login New value of property login.     */               /** Getter for property m_vector.      * @return Value of property m_vector.      */     public java.util.ArrayList getM_vector() {         return m_vector;     }          /** Setter for property m_vector.      * @param m_vector New value of property m_vector.      */     public void setM_vector(java.util.ArrayList m_vector) {         this.m_vector = m_vector;     }    public String getColumnName(int column)     {      return m_columns[column].c_title;      }         /** Getter for property m_vector_by_key.     * @return Value of property m_vector_by_key.     */    public java.util.ArrayList getM_vector_by_key() {        return m_vector_by_key;    }        public int getCleUnik(int row) {        Object[] obj = (Object[]) m_vector.get(row);        return ((Integer)obj[0]).intValue();    }        /** Setter for property m_vector_by_key.     * @param m_vector_by_key New value of property m_vector_by_key.     */    public void setM_vector_by_key(java.util.ArrayList m_vector_by_key) {        this.m_vector_by_key = m_vector_by_key;    }    public int getColumnCount(){         return m_columns.length;               }    public int getRowCount(){        if(m_vector==null) return 0;        else       return m_vector.size();     }       public ColumnData[] m_columns=new ColumnData[]{         new ColumnData(loadName("CADR_Nom"),135,JLabel.LEFT),        new ColumnData(loadName("CI_referenceClient"),77,JLabel.LEFT),        new ColumnData(loadName("CI_Localite"),127,JLabel.LEFT),        new ColumnData(loadName("CADR_codePostal"), 50,JLabel.CENTER),        new ColumnData(loadName("CADR_Adresse"), 176,JLabel.LEFT),        //new ColumnData("Téléphone", 25, JLabel.LEFT),        //new ColumnData("Fax",  25, JLabel.LEFT),        new ColumnData(loadName("CADR_Email"), 158, JLabel.LEFT), };  private String loadName(String key) {        String retVal = "";        try {            retVal = java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleClient", m_login.getLangage()).getString(key);             return retVal;        }        catch (java.util.MissingResourceException e) {        }        return "";    }       }