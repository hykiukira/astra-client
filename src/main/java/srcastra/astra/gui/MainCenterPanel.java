/* * MainCenterPanel.java * Created on 20 mars 2002, 12:18 */package srcastra.astra.gui;import srcastra.astra.sys.classetransfert.Loginusers_T;import srcastra.astra.sys.rmi.astrainterface;import srcastra.astra.gui.modules.signalitique.*;import srcastra.astra.gui.sys.*;import srcastra.astra.gui.components.AIframe;import srcastra.astra.sys.rmi.DossierRmiInterface;import srcastra.astra.gui.sys.ErreurScreenLibrary;import srcastra.astra.sys.classetransfert.*;import srcastra.astra.sys.classetransfert.dossier.produit_T;import srcastra.astra.sys.classetransfert.configuration.*;/** * @author Sébastien */public class MainCenterPanel extends javax.swing.JPanel implements srcastra.astra.gui.components.combobox.liste.ManipPanel {    private javax.swing.JPanel grp_Pan_CenterPan;    private javax.swing.JPanel grp_Pan_SouthPan;    private javax.swing.JPanel grp_Pan_EastPan;    private javax.swing.JDesktopPane grp_DPan_desktop;    private srcastra.astra.gui.components.actions.actionToolBar.ActionToolBar grp_ActionBar_actionToolBar;    private javax.swing.JInternalFrame currentInternalFrame;    private java.util.Vector currentInternalFrames;    private srcastra.astra.gui.modules.fournisseurs.FournisseurModules grp_Mod_fournisseur;    private srcastra.astra.gui.modules.compta.caisse.TypePayementFrame grp_Mod_typepaiement;    private srcastra.astra.gui.modules.compta.caisse.TypePayementFrame grp_Mod_caisselibelle;    private srcastra.astra.gui.modules.compta.achat.Achat grp_Mod_achat;    private srcastra.astra.gui.modules.compta.achat.NcFactService grp_Mod_ncFact;    private srcastra.astra.gui.modules.compta.od.ODFrame grp_Mod_od;    private srcastra.astra.gui.modules.btn.BTNFrame grp_Mod_btn;    private srcastra.astra.gui.modules.compta.od.ODFrame grp_Mod_bank;    private srcastra.astra.gui.modules.compta.compte.CompteFrame grp_Mod_plc;    private srcastra.astra.gui.list.ListingFrame grp_Mod_list;    private srcastra.astra.gui.modules.compta.achat.MenuDesFichiers grp_Mod_Integration;    private srcastra.astra.gui.modules.compta.caisse.Caisse grp_Mod_Caisse;    private srcastra.astra.gui.modules.compta.compte.CompteFrame grp_Mod_Compte;    private srcastra.astra.gui.modules.export.ExportComptable grp_Mod_export;    private srcastra.astra.gui.modules.dossier.MailOut grp_Mod_mailOut;    private srcastra.astra.gui.modules.config.EntiteUser grp_Mod_user;    private srcastra.astra.gui.modules.dossier.productSpecification.integration.IntegrationFrame grp_Mod_integra;    private srcastra.astra.gui.modules.clients.ClientModules grp_Mod_clients;    private srcastra.astra.gui.modules.signalitique.SignaletiqueInternalFrameChooser grp_IFrame_signaletique;    private srcastra.astra.gui.modules.dossier.DossierModules grp_Mod_dossier;    private srcastra.astra.gui.modules.dossier.BatchFacturation grp_Mod_batch;    private srcastra.astra.gui.About grp_about;    private srcastra.astra.gui.modules.decision.DecisionModule grp_Mod_decision;    private srcastra.astra.gui.modules.dossier.productSpecification.gestionnairepaneaux.TaxiEditionCourse grp_Tax_Edition;    private srcastra.astra.gui.modules.config.ConfigModule grp_Mod_config;    //ajout de Driart le 26 aout 2003    private srcastra.astra.gui.modules.agenda.Agenda agenda;    //end ajout    private astrainterface serveur;    private Loginusers_T currentUser;    private java.awt.Frame frameP;    private IFrameListener iFrameListener;    private DossierRmiInterface serveurDossier;    private MainFrame mainframe;    private srcastra.astra.gui.modules.configinitiale.EntitePane entite;    private srcastra.astra.gui.modules.configinitiale.GeneralConfig genconf;    private srcastra.astra.gui.modules.configinitiale.ConfigMediator confmed;    private srcastra.astra.gui.modules.configinitiale.UserCOnfig userconf;    /**     * Creates new MainCenterPanel     */    javax.swing.JLayeredPane jLayeredPane1;    public MainCenterPanel(astrainterface serveur, Loginusers_T currentUser, java.awt.Frame frameP, MainFrame mainframe) {        jLayeredPane1 = new javax.swing.JLayeredPane();        this.serveur = serveur;        this.currentUser = currentUser;        this.frameP = frameP;        iFrameListener = new IFrameListener();        currentInternalFrames = new java.util.Vector();        this.mainframe = mainframe;        initComponents();    }    private void initComponents() {        grp_Pan_CenterPan = new javax.swing.JPanel();        grp_Pan_SouthPan = new javax.swing.JPanel();        grp_Pan_EastPan = new javax.swing.JPanel();        grp_DPan_desktop = new javax.swing.JDesktopPane();        grp_ActionBar_actionToolBar = new srcastra.astra.gui.components.actions.actionToolBar.ActionToolBar(this.currentUser);        this.setLayout(new java.awt.BorderLayout(5, 5));        // desktop        grp_DPan_desktop.setBackground(java.awt.Color.lightGray);        grp_Pan_CenterPan.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.SoftBevelBorder.LOWERED));        // grp_DPan_desktop.setDesktopManager(new srcastra.astra.gui.components.desktop.ADesktopManager());        // CenterPan        grp_Pan_CenterPan.setLayout(new java.awt.GridLayout(1, 1));        grp_Pan_CenterPan.add(grp_DPan_desktop);        // Action tool bar        // RightPan (action pan)        grp_Pan_EastPan.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));        grp_Pan_EastPan.setLayout(new java.awt.GridLayout());        grp_Pan_EastPan.add(grp_ActionBar_actionToolBar);        // South Pan (Status bar)        grp_Pan_SouthPan.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));        // this.add()        this.add(grp_Pan_CenterPan, java.awt.BorderLayout.CENTER);        this.add(grp_Pan_EastPan, java.awt.BorderLayout.EAST);        this.add(grp_Pan_SouthPan, java.awt.BorderLayout.SOUTH);    }///////////////////////////////////////////////////////////////////////////////////////////////////////////////  ADDING - REMOVING CORRESPONDANCE AVEC MENUBAR    /////////////////////////////////////////////////////////////////////////////////////////////////////////////    public void initialisePanelConfiguration() {        this.add(jLayeredPane1);        AbstractConfig_T config = new Config2_T();        confmed = new srcastra.astra.gui.modules.configinitiale.ConfigMediator(jLayeredPane1);        entite = new srcastra.astra.gui.modules.configinitiale.EntitePane(this.grp_ActionBar_actionToolBar, config, confmed, currentUser, this.serveur);        genconf = new srcastra.astra.gui.modules.configinitiale.GeneralConfig(currentUser, this.grp_ActionBar_actionToolBar, config, confmed);        userconf = new srcastra.astra.gui.modules.configinitiale.UserCOnfig(this.grp_ActionBar_actionToolBar, config, confmed, currentUser, this.serveur);        jLayeredPane1.add(entite);        jLayeredPane1.add(genconf);        jLayeredPane1.add(userconf);        jLayeredPane1.moveToFront(genconf);        //  confmed.setGenconf(genconf);        // confmed.setEniteconf(entite);    }    private void addClosedListener(javax.swing.JInternalFrame iframe) {        iframe.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {                formInternalFrameClosed(evt);            }            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {            }        });    }    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {        int rep = new javax.swing.JOptionPane().showConfirmDialog(this, "LE dossier n'est pas encore enregistre dans la base de donnée", "  ", javax.swing.JOptionPane.YES_NO_OPTION);        if (rep == 0) ;        // evt.consume();        // evt.getInternalFrame().dispose();    }    private boolean addInternalFrame(javax.swing.JInternalFrame iframe) {        javax.swing.JInternalFrame[] iframes = grp_DPan_desktop.getAllFrames();        boolean similitude = false;        /* for (int i=0; i < iframes.length; i++) {            if (iframes[i].getClientProperty("source").equals(source)) {                similitude = true;                break;            }                        }*/        if (!similitude) {            grp_DPan_desktop.add(iframe, javax.swing.JLayeredPane.DEFAULT_LAYER);            ((srcastra.astra.gui.MainFrame) frameP).addNewOpenedWindowItem(iframe);            grp_DPan_desktop.setSelectedFrame(iframe);            grp_DPan_desktop.getDesktopManager().activateFrame(iframe);            /*  try{                iframe.setSelected(true);            }catch(java.beans.PropertyVetoException pn){             pn.printStackTrace();               }*/            // iframe.requestFocus();            /*   try {               ((javax.swing.JComponent) source).setEnabled(false);            }            catch (Exception e) {                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);            }*/            return true;        } else {            return false;        }    }    private boolean addInternalFrame(javax.swing.JInternalFrame iframe, Object source) {        /* Récupération de toutes les frames du Desktop et recherche d'une similitude* au niveau de la source pour chacunes des frames du desktop */        javax.swing.JInternalFrame[] iframes = grp_DPan_desktop.getAllFrames();        boolean similitude = false;        for (int i = 0; i < iframes.length; i++) {            if (iframes[i].getClientProperty("source").equals(source)) {                similitude = true;                break;            }        }        if (!similitude) {            //  try{            //    DossierModules dossiermodule=(DossierModules            //}catch(ClassCastException){            //  System.out.println("ce n'est pas dossier module");            // }            // if(iframe instanceof srcastra.astra.gui.modules.dossier.DossierModules)            //   addClosedListener(iframe);            iframe.putClientProperty("source", source);            grp_DPan_desktop.add(iframe, javax.swing.JLayeredPane.DEFAULT_LAYER);            ((srcastra.astra.gui.MainFrame) frameP).addNewOpenedWindowItem(iframe);            grp_DPan_desktop.setSelectedFrame(iframe);            grp_DPan_desktop.getDesktopManager().activateFrame(iframe);            /*         try{                iframe.setSelected(true);             }catch(java.beans.PropertyVetoException pn){             pn.printStackTrace();               }*/            // iframe.requestFocus();            try {                ((javax.swing.JComponent) source).setEnabled(false);            }            catch (Exception e) {                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);            }            return true;        } else {            return false;        }    }    public void removeInternalFrame(javax.swing.JInternalFrame iframe) {        Object source = iframe.getClientProperty("source");        try {            ((srcastra.astra.gui.MainFrame) frameP).removeOpenedWindowItem(iframe);            ((javax.swing.JComponent) source).setEnabled(true);            //  grp_DPan_desktop.remove(iframe);            iframe = null;        }        catch (Exception e) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);        }    }/////////////////////////////////////////////////////////////////////////////////////////////////////////////////// ACTION DU TYPE DESKTOP MANAGER SUR LES IFRAMES////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public void setFrontSelectedIframe(javax.swing.JInternalFrame iFrame) {        /*      try{       // iFrame.setMaximum(false);        if(iFrame.isIcon());         // iFrame.doDsetMaximum(true);      }catch(java.beans.PropertyVetoException pn){        pn.prin*/        if (iFrame.isIcon())            grp_DPan_desktop.getDesktopManager().deiconifyFrame(iFrame);        else            grp_DPan_desktop.getDesktopManager().activateFrame(iFrame);        //iFrame.requestFocus();        // grp_DPan_desktop.getDesktopManager().activateFrame(mainframe);        grp_DPan_desktop.getDesktopManager().activateFrame(iFrame);    }///////////////////////////////////////////////////////////////////////////////////////////////////////////////////  LAUCH MODULE/////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public void displayModulesFournisseurs(Object source) {        grp_Mod_fournisseur = new srcastra.astra.gui.modules.fournisseurs.FournisseurModules(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener);        grp_Mod_fournisseur.setVisible(true);        addInternalFrame(grp_Mod_fournisseur, source);        // defineSize();    }    public void displayModulesListe(Object source) {        grp_Mod_list = new srcastra.astra.gui.list.ListingFrame(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener, (MainFrame) frameP);        grp_Mod_list.setVisible(true);        addInternalFrame(grp_Mod_list, source);        // defineSize();    }    public void displayModulesOd(Object source) {        grp_Mod_od = new srcastra.astra.gui.modules.compta.od.ODFrame(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener, null, null, "", new java.awt.Dimension(700, 400), 0);                                                            //(this,connect.serveur2,connect.tmpgestion2,this.grp_ActionBar_actionToolBar,null,null,null,"",new java.awt.Dimension(700,400),1);        grp_Mod_od.setVisible(true);        addInternalFrame(grp_Mod_od, source);        // defineSize();    }    public void displayModulesBank(Object source) {        grp_Mod_od = new srcastra.astra.gui.modules.compta.od.ODFrame(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener, null, null, "", new java.awt.Dimension(700, 400), 1);                                                            //(this,connect.serveur2,connect.tmpgestion2,this.grp_ActionBar_actionToolBar,null,null,null,"",new java.awt.Dimension(700,400),1);        grp_Mod_od.setVisible(true);        addInternalFrame(grp_Mod_od, source);        // defineSize();    }    public void displayModulesBtn(Object source) {        grp_Mod_btn = new srcastra.astra.gui.modules.btn.BTNFrame(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener);        grp_Mod_btn.setVisible(true);        addInternalFrame(grp_Mod_btn, source);        // defineSize();    }    public void displayModulesPlanComptable(Object source) {        grp_Mod_plc = new srcastra.astra.gui.modules.compta.compte.CompteFrame(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener);                                                            //(this,connect.serveur2,connect.tmpgestion2,this.grp_ActionBar_actionToolBar,null,null,null,"",new java.awt.Dimension(700,400),1);        grp_Mod_plc.setVisible(true);        addInternalFrame(grp_Mod_plc, source);        // defineSize();    }    public void displayModulesIntegrationIATA(Object source) {        grp_Mod_integra = new srcastra.astra.gui.modules.dossier.productSpecification.integration.IntegrationFrame(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener, mainframe);        grp_Mod_integra.setVisible(true);        addInternalFrame(grp_Mod_integra, source);        // defineSize();    }    public void displayModulesTypePayement(Object source) {        grp_Mod_typepaiement = new srcastra.astra.gui.modules.compta.caisse.TypePayementFrame(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener, 0);        grp_Mod_typepaiement.setVisible(true);        addInternalFrame(grp_Mod_typepaiement, source);        // defineSize();    }    public void displayModulesCaisseLibelle(Object source) {        grp_Mod_caisselibelle = new srcastra.astra.gui.modules.compta.caisse.TypePayementFrame(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener, 1);        grp_Mod_caisselibelle.setVisible(true);        addInternalFrame(grp_Mod_caisselibelle, source);        // defineSize();    }    public void displayModulesAchat(Object source) {        grp_Mod_achat = new srcastra.astra.gui.modules.compta.achat.Achat(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener);        grp_Mod_achat.setVisible(true);        addInternalFrame(grp_Mod_achat, source);        // defineSize();    }    public void displayModulesTaxiCourse(Object source) {        this.grp_Tax_Edition = new srcastra.astra.gui.modules.dossier.productSpecification.gestionnairepaneaux.TaxiEditionCourse(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener);        //grp_Mod_achat = new srcastra.astra.gui.modules.compta.achat.Achat(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener);        this.grp_Tax_Edition.setVisible(true);        addInternalFrame(this.grp_Tax_Edition, source);        // defineSize();    }    public void displayModulesNCFService(Object source) {        grp_Mod_ncFact = new srcastra.astra.gui.modules.compta.achat.NcFactService(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener);        grp_Mod_ncFact.setVisible(true);        addInternalFrame(grp_Mod_ncFact, source);        // defineSize();    }    public void displayModulesAbout(Object source) {        About a = new About(frameP, true);        a.show();        // defineSize();    }    public void displayModulesBatchFacturation(Object source) {        this.grp_Mod_batch = new srcastra.astra.gui.modules.dossier.BatchFacturation(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener);        this.grp_Mod_batch.setVisible(true);        addInternalFrame(this.grp_Mod_batch, source);        // defineSize();    }    public void displayModulesAgenda(Object source) {        agenda = new srcastra.astra.gui.modules.agenda.Agenda(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener);        agenda.setVisible(true);        addInternalFrame(agenda, source);        // defineSize();    }    public void displayModulesIntegration(Object source) {        grp_Mod_Integration = new srcastra.astra.gui.modules.compta.achat.MenuDesFichiers(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener);        grp_Mod_Integration.setVisible(true);        addInternalFrame(grp_Mod_Integration, source);        // defineSize();    }    public void displayModulesMailOut(Object source) {        grp_Mod_mailOut = new srcastra.astra.gui.modules.dossier.MailOut(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener);        grp_Mod_mailOut.setVisible(true);        addInternalFrame(grp_Mod_mailOut, source);    }    public void displayModulesExportCompta(Object source) {        grp_Mod_export = new srcastra.astra.gui.modules.export.ExportComptable(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener);        grp_Mod_export.setVisible(true);        addInternalFrame(grp_Mod_export, source);    }    public void displayModulesCaisses(Object source) {        grp_Mod_Caisse = new srcastra.astra.gui.modules.compta.caisse.Caisse(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener);        grp_Mod_Caisse.setVisible(true);        addInternalFrame(grp_Mod_Caisse, source);        // defineSize();    }    public void displayModulesUsers(Object source) {        grp_Mod_user = new srcastra.astra.gui.modules.config.EntiteUser(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener);        // grp_Mod_fournisseur = new srcastra.astra.gui.modules.fournisseurs.FournisseurModules(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, iFrameListener);        grp_Mod_user.setVisible(true);        addInternalFrame(grp_Mod_user, source);        // defineSize();    }    public void displayModulesGrpDec(Object source) {        grp_Mod_decision = new srcastra.astra.gui.modules.decision.DecisionModule(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, this.iFrameListener);        grp_Mod_decision.setVisible(true);        addInternalFrame(grp_Mod_decision, source);        // defineSize();    }    public void displayModulesGrpDec(Object source, boolean nested, srcastra.astra.sys.classetransfert.dossier.InterfaceProduit produit, srcastra.astra.gui.modules.dossier.productSpecification.gestionnairepaneaux.InterfacePanel panel) {        grp_Mod_decision = new srcastra.astra.gui.modules.decision.DecisionModule(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, this.iFrameListener, produit, panel);        grp_Mod_decision.setVisible(true);        addInternalFrame(grp_Mod_decision, source);        // defineSize();    }    public void displayModulesClients(Object source) {        grp_Mod_clients = new srcastra.astra.gui.modules.clients.ClientModules(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, this.iFrameListener);        grp_Mod_clients.setVisible(true);        addInternalFrame(grp_Mod_clients, source);        // defineSize();    }    public srcastra.astra.gui.modules.clients.ClientModules displayModulesClients2(Object source) {        if (grp_Mod_clients == null) {            grp_Mod_clients = new srcastra.astra.gui.modules.clients.ClientModules(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, this.iFrameListener);            // grp_Mod_clients.displayCreateSequence();            grp_Mod_clients.setVisible(true);            addInternalFrame(grp_Mod_clients, source);        } else {            // grp_Mod_clients.displayCreateSequence();            grp_Mod_clients.setVisible(true);            addInternalFrame(grp_Mod_clients, source);            setFrontSelectedIframe(grp_Mod_clients);        }        return grp_Mod_clients;        // defineSize();    }    public void displayModulesConfig(Object source, int i, int typeDecision, boolean multiline) {        grp_Mod_config = new srcastra.astra.gui.modules.config.ConfigModule(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, this.iFrameListener, i, this.mainframe, typeDecision, multiline);        grp_Mod_config.setVisible(true);        addInternalFrame(grp_Mod_config, source);      // defineSize();    }    //   public void displayModulesClientsCreate(Object source) {    //   grp_Mod_clients = new srcastra.astra.gui.modules.clients.ClientModules(frameP, this.serveur, this.currentUser, this.grp_ActionBar_actionToolBar, this.iFrameListener);    // grp_Mod_clients.displayCreateSequence();    // grp_Mod_clients.setVisible(true);    // addInternalFrame(grp_Mod_clients, source);    //}    public void displaySignaletique(int signaletiqueType, Object source) {        grp_IFrame_signaletique = new srcastra.astra.gui.modules.signalitique.SignaletiqueInternalFrameChooser(this.serveur, this.currentUser, grp_ActionBar_actionToolBar, signaletiqueType, iFrameListener, frameP);        grp_IFrame_signaletique.setVisible(true);        addInternalFrame(grp_IFrame_signaletique, source);        this.currentInternalFrame = grp_IFrame_signaletique;        // defineSize();    }    public void displayNestedSignaletique(int signaletiqueType, Object source, boolean nested) {        grp_IFrame_signaletique = new srcastra.astra.gui.modules.signalitique.SignaletiqueInternalFrameChooser(this.serveur, this.currentUser, grp_ActionBar_actionToolBar, signaletiqueType, iFrameListener, frameP, nested);        grp_IFrame_signaletique.setVisible(true);        addInternalFrame(grp_IFrame_signaletique, source);        this.currentInternalFrame = grp_IFrame_signaletique;        // defineSize();    }    public void displayPrintingModule(srcastra.astra.sys.classetransfert.dossier.Dossier_T dossier) {        /*  grp_IFrame_signaletique = new srcastra.astra.gui.modules.signalitique.SignaletiqueInternalFrameChooser(this.serveur, this.currentUser, grp_ActionBar_actionToolBar, signaletiqueType, iFrameListener, frameP,nested);      grp_IFrame_signaletique.setVisible(true);      addInternalFrame(grp_IFrame_signaletique, source);      this.currentInternalFrame = grp_IFrame_signaletique;*/        // defineSize();    }    public void displayDossier(Object source) {        if (this.serveurDossier == null) {            try {                serveurDossier = serveur.renvDossierRmiObject(currentUser.getUrcleunik());            } catch (java.rmi.RemoteException re) {                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);            }        }        grp_Mod_dossier = new srcastra.astra.gui.modules.dossier.DossierModules(frameP, serveur, currentUser, grp_ActionBar_actionToolBar, iFrameListener, this.serveurDossier);        grp_Mod_dossier.setMainframe(this.mainframe);        grp_Mod_dossier.setVisible(true);        addInternalFrame(grp_Mod_dossier, source);    }    public void closePanne() {    }    public void fillValueFromComponent(InterfaceClasseTransfert transfert, String nameOfComponent) {    }    public void openPannel(int i) {        switch (i) {            case 1:                //  displayModulesClientsCreate(this.mainframe.getGrp_MenuItem_Clients());                break;        }    }    public void setReadModeToPanel() {    }    public void getSignaletique(int typeSignaletique) {    }    /**     * Getter for property grp_Mod_clients.     *     * @return Value of property grp_Mod_clients.     */    public srcastra.astra.gui.modules.clients.ClientModules getGrp_Mod_clients() {        return grp_Mod_clients;    }    /**     * Setter for property grp_Mod_clients.     *     * @param grp_Mod_clients New value of property grp_Mod_clients.     */    public void setGrp_Mod_clients(srcastra.astra.gui.modules.clients.ClientModules grp_Mod_clients) {        this.grp_Mod_clients = grp_Mod_clients;    }    /**     * Getter for property grp_Mod_dossier.     *     * @return Value of property grp_Mod_dossier.     */    public srcastra.astra.gui.modules.dossier.DossierModules getGrp_Mod_dossier() {        return grp_Mod_dossier;    }    /**     * Setter for property grp_Mod_dossier.     *     * @param grp_Mod_dossier New value of property grp_Mod_dossier.     */    public void setGrp_Mod_dossier(srcastra.astra.gui.modules.dossier.DossierModules grp_Mod_dossier) {        this.grp_Mod_dossier = grp_Mod_dossier;    }    /**     * Getter for property grp_ActionBar_actionToolBar.     *     * @return Value of property grp_ActionBar_actionToolBar.     */    public srcastra.astra.gui.components.actions.actionToolBar.ActionToolBar getGrp_ActionBar_actionToolBar() {        return grp_ActionBar_actionToolBar;    }    /**     * Setter for property grp_ActionBar_actionToolBar.     *     * @param grp_ActionBar_actionToolBar New value of property grp_ActionBar_actionToolBar.     */    public void setGrp_ActionBar_actionToolBar(srcastra.astra.gui.components.actions.actionToolBar.ActionToolBar grp_ActionBar_actionToolBar) {        this.grp_ActionBar_actionToolBar = grp_ActionBar_actionToolBar;    }    /**     * Getter for property syn.     *     * @return Value of property syn.     */    public java.lang.Object getSyn() {        return syn;    }    /**     * Setter for property syn.     *     * @param syn New value of property syn.     */    public void setSyn(java.lang.Object syn) {        this.syn = syn;    }    /**     * Getter for property grp_DPan_desktop.     *     * @return Value of property grp_DPan_desktop.     */    public javax.swing.JDesktopPane getGrp_DPan_desktop() {        return grp_DPan_desktop;    }    /**     * Setter for property grp_DPan_desktop.     *     * @param grp_DPan_desktop New value of property grp_DPan_desktop.     */    public void setGrp_DPan_desktop(javax.swing.JDesktopPane grp_DPan_desktop) {        this.grp_DPan_desktop = grp_DPan_desktop;    }    /**     * Getter for property currentUser.     *     * @return Value of property currentUser.     */    public srcastra.astra.sys.classetransfert.Loginusers_T getCurrentUser() {        return currentUser;    }    /**     * Setter for property currentUser.     *     * @param currentUser New value of property currentUser.     */    public void setCurrentUser(srcastra.astra.sys.classetransfert.Loginusers_T currentUser) {        this.currentUser = currentUser;    }    private Object syn = new Object();//////////////////////////////////////////////////////////////////////////////////////////////////////////////////// LISTENER POUR LES IFRAMES//////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public class IFrameListener implements javax.swing.event.InternalFrameListener {        public void internalFrameActivated(javax.swing.event.InternalFrameEvent internalFrameEvent) {            ((AIframe) internalFrameEvent.getSource()).reloadToolBarInfo();            ((srcastra.astra.gui.MainFrame) frameP).setSelectedOpenedWindowItem((javax.swing.JInternalFrame) internalFrameEvent.getSource());            System.out.println("LISTENER DE FRAME : activation : " + internalFrameEvent.getSource().getClass().getName());        }        public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent internalFrameEvent) {            System.out.println("LISTENER DE FRAME : déiconification : " + internalFrameEvent.getSource().getClass().getName());        }        public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent internalFrameEvent) {            ((AIframe) internalFrameEvent.getSource()).saveToolBarInfo();            System.out.println("LISTENER DE FRAME : désactivation : " + internalFrameEvent.getSource().getClass().getName());        }        public void internalFrameOpened(javax.swing.event.InternalFrameEvent internalFrameEvent) {            System.out.println("LISTENER DE FRAME : ouverture : " + internalFrameEvent.getSource().getClass().getName());        }        public void internalFrameIconified(javax.swing.event.InternalFrameEvent internalFrameEvent) {            System.out.println("LISTENER DE FRAME : iconification : " + internalFrameEvent.getSource().getClass().getName());        }        public void internalFrameClosing(javax.swing.event.InternalFrameEvent internalFrameEvent) {            synchronized (getSyn()) {                System.out.println("LISTENER DE FRAME : en cours de fermeture : " + internalFrameEvent.getSource().getClass().getName());                javax.swing.JInternalFrame frame = (javax.swing.JInternalFrame) internalFrameEvent.getSource();                javax.swing.JInternalFrame[] jif = grp_DPan_desktop.getAllFrames();                // voir si il y a une frame de selectionner avant de remettre la toolBar à 0                boolean barToDefault = true;                if (jif.length > 0) {                    for (int i = 0; i < jif.length; i++) {                        if (jif[i].isSelected() && !jif[i].equals(frame)) {                            barToDefault = false;                            break;                        }                    }                }                // mettre la barre à 0                if (barToDefault) grp_ActionBar_actionToolBar.setActionToDefault();                removeInternalFrame(frame);            }        }        public void internalFrameClosed(javax.swing.event.InternalFrameEvent internalFrameEvent) {            synchronized (getSyn()) {                System.out.println("LISTENER DE FRAME : fermeture : " + internalFrameEvent.getSource().getClass().getName());            }        }    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}