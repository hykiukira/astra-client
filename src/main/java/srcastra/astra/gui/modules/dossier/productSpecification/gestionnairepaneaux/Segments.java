/* * Segments.java * * Created on 2 octobre 2002, 14:28 */package srcastra.astra.gui.modules.dossier.productSpecification.gestionnairepaneaux;// Interfacesimport srcastra.astra.gui.modules.InternScreenModule;import srcastra.astra.gui.components.actions.actionToolBar.ToolBarComposer;import srcastra.astra.sys.classetransfert.dossier.avion.*;// listenersimport java.awt.event.ComponentListener;// srcastra diversimport srcastra.astra.gui.modules.mainScreenModule.DossierMainScreenModule;import srcastra.astra.gui.sys.tableModel.dossierTableModel.DossierSegmentsTableModel;import srcastra.astra.gui.components.actions.actionToolBar.ActionToolBar;import srcastra.astra.gui.components.fx.*;import srcastra.astra.sys.classetransfert.dossier.avion.Avion_segment_T;import srcastra.astra.gui.event.NavigateInTable;import java.awt.*;import java.awt.event.*;import srcastra.astra.gui.sys.utils.*;import javax.swing.*;/** * @author Sébastien */public class Segments extends javax.swing.JPanel implements InternScreenModule, ComponentListener, ToolBarComposer, InterfacePanel {//,RootPaneContainer  {//, KeyListener {////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// CONSTRUCTOR////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Creates new form Segments     */    public JRootPane rootpane;    DefaultListModel listemodel = new DefaultListModel();    public Segments(SegmentGui parent2) {        rootpane = new JRootPane();        rootpane.add(this);        this.parent = parent2.getMainScreenModule();        // this.parentpanel=parentpanel;        init();        setSize(708, 140);        this.setBounds(0, 218, 708, 140);        /*      jScrollPane1.setFocusable(false);        jScrollPane2.setFocusable(false);        jLabel1.setFocusable(false);        jLabel28.setFocusable(false);        jLayeredPane1.setFocusable(false);        jList1.setFocusable(false);        jPanel1.setFocusable(false);        jPanel10.setFocusable(false);        jPanel12.setFocusable(false);        jPanel13.setFocusable(false);        jPanel14.setFocusable(false);        jPanel2.setFocusable(false);        jPanel3.setFocusable(false);        grp_Table_SegmentIndex.setFocusable(false);*/        // setFocusable(false);    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// INITIALISATION////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    private void init() {        initComponents();        grp_Table_SegmentIndex.setSelectionBackground(new java.awt.Color(221, 221, 255));        tbSegments = new DossierSegmentsTableModel(parent.getServeur(), parent.getCurrentUser(), parent, this.jList1, this.listemodel);        this.grp_Table_SegmentIndex.setModel(tbSegments);        if (parent.getTicket().getConjonctionList() != null) {            listemodel.clear();            for (int i = 0; i < parent.getTicket().getConjonctionList().size(); i++) {                Conjonction_T conj = (Conjonction_T) parent.getTicket().getConjonctionList().get(i);                if (!conj.isDeleted())                    listemodel.addElement(conj.getNumbillet());            }            if (jList1.getModel().getSize() > 0) {                jList1.setSelectedIndex(0);                refresh();            }        }        //grp_Table_SegmentIndex.setModel(new DossierSegmentsTableModel(parent.getServeur(), parent.getCurrentUser(),parent));        //if(grp_Table_SegmentIndex.getRowCount()!=0)        //grp_Table_SegmentIndex.changeSelection(0,0,false,false);        initTable();        // grp_TField_Invisible.addKeyListener(new NavigateInTable(grp_Table_SegmentIndex));        grp_Table_SegmentIndex.getTableHeader().setReorderingAllowed(false);        grp_Table_SegmentIndex.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);//        grp_TField_Invisible.requestFocus();        //   addKeyListener(this);    }    public void initTable() {        if (grp_Table_SegmentIndex.getRowCount() != 0)            grp_Table_SegmentIndex.changeSelection(0, 0, false, false);    }    public java.awt.Component getTable() {        return grp_Table_SegmentIndex;    }    public int getTableSize() {        return tbSegments.getRowCount();    }    public void reloadTable() {        // tbSegments.setToDefault();        if (parent.getTicket().getConjonctionList() != null) {            listemodel.clear();            for (int i = 0; i < parent.getTicket().getConjonctionList().size(); i++) {                Conjonction_T conj = (Conjonction_T) parent.getTicket().getConjonctionList().get(i);                if (!conj.isDeleted())                    listemodel.addElement(conj.getNumbillet());            }            if (jList1.getModel().getSize() > 0) {                jList1.setSelectedIndex(0);                refresh();                //tbSegments.retrieveData(jList1.getModel().getSize()-1);                //grp_Table_SegmentIndex.tableChanged(new javax.swing.event.TableModelEvent(tbSegments));                //grp_Table_SegmentIndex.repaint();                //if(grp_Table_SegmentIndex.getRowCount()!=0)                //  grp_Table_SegmentIndex.changeSelection(0,0,false,false);            }        } else {            tbSegments.retrieveData();            grp_Table_SegmentIndex.tableChanged(new javax.swing.event.TableModelEvent(tbSegments));            if (grp_Table_SegmentIndex.getRowCount() != 0)                grp_Table_SegmentIndex.changeSelection(0, 0, false, false);        }    }    /**     * This method is called from within the constructor to     * <p/>     * <p/>     * initialize the form.     * <p/>     * <p/>     * WARNING: Do NOT modify this code. The content of this method is     * <p/>     * <p/>     * always regenerated by the Form Editor.     */    private void initComponents() {//GEN-BEGIN:initComponents        jPanel2 = new javax.swing.JPanel();        jPanel10 = new javax.swing.JPanel();        jPanel12 = new javax.swing.JPanel();        jLabel1 = new javax.swing.JLabel();        jScrollPane1 = new javax.swing.JScrollPane();        jList1 = new javax.swing.JList();        jPanel13 = new javax.swing.JPanel();        jPanel1 = new javax.swing.JPanel();        jPanel14 = new javax.swing.JPanel();        jLabel28 = new javax.swing.JLabel();        jScrollPane2 = new javax.swing.JScrollPane();        grp_Table_SegmentIndex = new javax.swing.JTable();        setLayout(new java.awt.BorderLayout());        setBorder(new javax.swing.border.EtchedBorder());        setMinimumSize(new java.awt.Dimension(56, 120));        setName("manisegment");        setPreferredSize(new java.awt.Dimension(154, 120));        jPanel10.setLayout(new java.awt.BorderLayout());        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 4));        jPanel12.setPreferredSize(new java.awt.Dimension(10, 18));        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 10));        jLabel1.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleDossier/productSpecification/AviationPanel", parent.getCurrentUser().getLangage()).getString("TitrePane_Segment"));        jPanel12.add(jLabel1);        jPanel10.add(jPanel12, java.awt.BorderLayout.NORTH);        jScrollPane1.setPreferredSize(new java.awt.Dimension(70, 70));        jList1.setModel(listemodel);        jList1.setRequestFocusEnabled(false);        jList1.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseReleased(java.awt.event.MouseEvent evt) {                jList1MouseReleased(evt);            }        });        jScrollPane1.setViewportView(jList1);        jPanel10.add(jScrollPane1, java.awt.BorderLayout.CENTER);        jPanel10.add(jPanel13, java.awt.BorderLayout.EAST);        add(jPanel10, java.awt.BorderLayout.WEST);        jPanel1.setLayout(new java.awt.BorderLayout());        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 1));        jPanel14.setPreferredSize(new java.awt.Dimension(10, 18));        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 10));        jLabel28.setText("Aviation");        jLabel28.setPreferredSize(new java.awt.Dimension(50, 18));        jPanel14.add(jLabel28);        jPanel1.add(jPanel14, java.awt.BorderLayout.NORTH);        jScrollPane2.setPreferredSize(new java.awt.Dimension(150, 100));        grp_Table_SegmentIndex.setFont(new java.awt.Font("Tahoma", 0, 10));        grp_Table_SegmentIndex.setModel(new javax.swing.table.DefaultTableModel());        grp_Table_SegmentIndex.setRequestFocusEnabled(false);        grp_Table_SegmentIndex.setSelectionForeground(new java.awt.Color(0, 102, 0));        jScrollPane2.setViewportView(grp_Table_SegmentIndex);        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);        add(jPanel1, java.awt.BorderLayout.CENTER);    }//GEN-END:initComponents    private void jList1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseReleased        refresh();    }//GEN-LAST:event_jList1MouseReleased    private void refresh() {        int i = jList1.getSelectedIndex();        tbSegments.retrieveData(i);        grp_Table_SegmentIndex.tableChanged(new javax.swing.event.TableModelEvent(tbSegments));        grp_Table_SegmentIndex.repaint();        if (grp_Table_SegmentIndex.getRowCount() != 0)            grp_Table_SegmentIndex.changeSelection(0, 0, false, false);    }    public void initSegmentsEditionPanel() {        /*       if (grp_Pan_SegmentsEdition == null) {                  grp_Pan_SegmentsEdition = new SegmentsEdition(parent,this);                  jLayeredPane1.add(grp_Pan_SegmentsEdition);                  grp_Pan_SegmentsEdition.setBounds(0,0, jPanel3.getWidth(), jPanel3.getHeight());              }        */    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => LISTENERS////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public void componentHidden(java.awt.event.ComponentEvent componentEvent) {    }    public void componentMoved(java.awt.event.ComponentEvent componentEvent) {    }    public void componentResized(java.awt.event.ComponentEvent componentEvent) {    }    public void componentShown(java.awt.event.ComponentEvent componentEvent) {    }    /* public void keyPressed(java.awt.event.KeyEvent evt) {      /*  int key = evt.getKeyCode();        if (grp_Table_SegmentIndex.getRowCount() > 0) {            System.out.println("ATENTION MON NOMBRE DE LIGNES TOTALES EST ========> " + grp_Table_SegmentIndex.getRowCount());            int cur = grp_Table_SegmentIndex.getSelectedRow();            int tot = grp_Table_SegmentIndex.getRowCount();            if (key == KeyEvent.VK_DOWN && (cur < tot -1)) grp_Table_SegmentIndex.changeSelection(cur + 1, 0, false, false);              if (key == KeyEvent.VK_UP && (cur >0) ) grp_Table_SegmentIndex.changeSelection(cur - 1, 0, false, false);                        }           }           public void keyReleased(java.awt.event.KeyEvent keyEvent) {    }            public void keyTyped(java.awt.event.KeyEvent keyEvent) {    }*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE AU BEANS////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public void showIndexPane() {        /* action = ActionToolBar.ACT_READ;            // parent.enabledTabbedPane(true);            jLayeredPane1.moveToFront(jPanel3);            if (tbSegments.retrieveData()) {                grp_Table_SegmentIndex.tableChanged(new javax.swing.event.TableModelEvent(tbSegments));                grp_Table_SegmentIndex.repaint();                if(grp_Table_SegmentIndex.getRowCount()!=0)                grp_Table_SegmentIndex.changeSelection(0,0,false,false);            //fx_manager.needReselect();    //        grp_TField_Invisible.requestFocus();        */    }    public void showEditionPane() {        // parent.enabledTabbedPane(false);        //initSegmentsEditionPanel();        //  jLayeredPane1.moveToFront(grp_Pan_SegmentsEdition);    }    public void fxPanelDiselected() {        /*   setFocusable(false);        grp_Table_SegmentIndex.setEnabled(false);        adaptBackgroundColor(false);        parentpanel.removeSegmentPanel();*/    }    public void fxPanelSelected() {        /*   setFocusable(true);        grp_Table_SegmentIndex.setEnabled(true);        adaptBackgroundColor(true);        parentpanel.displaySegmentPanel();        //requestFocus();*/    }    private void adaptBackgroundColor(boolean enabled) {        java.awt.Color background = enabled ? java.awt.Color.white : java.awt.Color.lightGray;        grp_Table_SegmentIndex.setBackground(background);        grp_Table_SegmentIndex.setRowSelectionAllowed(enabled);        if (enabled && grp_Table_SegmentIndex.getRowCount() > 0)            grp_Table_SegmentIndex.changeSelection(0, 0, false, false);    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => FONCTIONS APPARENTES AU TRANSFERT DE DONNEE////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Permet au parent de lancer le chargement des données au     * <p/>     * <p/>     * sein de liste (Ici : ListSelector)     */    public void chargeData() {    }    /**     * Demande d'une suppression ou d'une annulation physique au serveur     */    public void dbDelete() {    }    /**     * Demande d'une insertion au serveur     */    public void dbInsert() {    }    /**     * Demande de sélection au serveur     */    public void dbSelect() {    }    /**     * Demande de sélection en vue d'une modification au serveur     */    public void dbSelectForUpdate() {    }    /**     * Demande d'une modification au serveur     */    public void dbUpdate() {    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE A L' AFFICHAGE DES DONNEES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Affichage en Mode disable     */    public void displayDisableMode() {        /*   action = ActionToolBar.ACT_DISABLE;                        showEditionPane();        grp_Pan_SegmentsEdition.setSegment((Avion_segment_T)parent.renvObjectSelectedInTable(grp_Table_SegmentIndex));        grp_Pan_SegmentsEdition.displayReadMode();*/    }    /**     * Affichage en mode Insertion     */    public void displayInsertMode() {        /*  if(!checkValiditynum_billet()){            // parent.enabledTabbedPane(false);            // fx_manager.setActivated(false);            action = ActionToolBar.ACT_INSERT;            showEditionPane();            grp_Pan_SegmentsEdition.displayInsertMode();                    }*/    }    /**     * Affichage en mode Lecture     */    public void displayReadMode() {        /*parent.enabledTabbedPane(true);                fx_manager.setActivated(true);                action = ActionToolBar.ACT_READ;                this.removeAll();        init();        this.updateUI();*/    }    /**     * Affichage en mode Modification     */    public void displayUpdateMode() {        /*if(grp_Table_SegmentIndex.getRowCount()==0){                parent.getMessageManager().showMessageDialog(this,"dos_no_segment","dos_no_segment_text",parent.getCurrentUser());            }else{            parent.enabledTabbedPane(false);            fx_manager.setActivated(false);            action = ActionToolBar.ACT_INSERT;            this.removeAll();            initSegmentsEditionPanel();            grp_Pan_SegmentsEdition.setSegment((Avion_segment_T)parent.renvObjectSelectedInTable(grp_Table_SegmentIndex));            grp_Pan_SegmentsEdition.displayUpdateMode();            this.updateUI();        }*/    }    /**     * Méthode pour l'update de tous les champs     */    public void updateAllFields() {    }    public void updateAllFields(Object donnee) {    }    private boolean checkValiditynum_billet()    {        boolean sw = false;        System.out.println("[***********]Numero du billet: " + parent.getTicket().getAt_num_billet());        if (parent.getTicket().getAt_num_billet().equals("") || parent.getTicket().getAt_num_billet() == null || parent.getTicket().getAt_num_billet().equals("null"))        {            // parent.getMessageManager().showMessageDialog(this,"check_num_billet","check_num_billet_title",parent.getCurrentUser());            sw = true;        }        return sw;    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE AUX APPELS DE LA TOOLBAR////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Spécifie le composant qui implémente cette fonction comme     * <p/>     * <p/>     * le composant qui pilote l'actionToolBar     */    public void setThisAsToolBarComponent() {    }    public void doAccept() {        /*switch (action) {    case ActionToolBar.ACT_INSERT:        grp_Pan_SegmentsEdition.displayDisableMode();        grp_Pan_SegmentsEdition.dbInsert();        showIndexPane();        break;    case ActionToolBar.ACT_READ:        */        //   if (grp_Table_SegmentIndex.getRowCount() > 0) {        //         displayDisableMode();        //}        // else {        //  parent.getMessageManager().showMessageDialog(this, "dos_no_segment_text", "dos_no_segment", parent.getCurrentUser());        //}        /*                break;            case ActionToolBar.ACT_MODIFY:                grp_Pan_SegmentsEdition.dbUpdate();                showIndexPane();                break;        }*/    }    public void doCancel() {        /*    switch (action) {            case ActionToolBar.ACT_INSERT :                grp_Pan_SegmentsEdition.displayDisableMode();                showIndexPane();                break;            case ActionToolBar.ACT_DISABLE:                showIndexPane();                break;            case ActionToolBar.ACT_MODIFY:                grp_Pan_SegmentsEdition.displayDisableMode();                showIndexPane();                break;            case ActionToolBar.ACT_READ :                parentpanel.doCancel();                break;/*            case ActionToolBar.ACT_MODIFY :                displayReadMode();                if (fx_manager != null) fx_manager.needReselect();                break;                     }*/    }    public void doClose() {    }    public void doCreate() {        displayInsertMode();    }    public void doDelete() {    }    public void doHelp() {    }    public void doModify() {        /*    switch(action) {           case ActionToolBar.ACT_DISABLE:               grp_Pan_SegmentsEdition.displayUpdateMode();               action = ActionToolBar.ACT_MODIFY;               break;           default:               if (grp_Table_SegmentIndex.getRowCount() > 0) {                   displayDisableMode();                   action = ActionToolBar.ACT_MODIFY;                   grp_Pan_SegmentsEdition.displayUpdateMode();               }               else {                   parent.getMessageManager().showMessageDialog(this, "dos_no_segment_text", "dos_no_segment", parent.getCurrentUser());               }               break;       }       // displayUpdateMode();*/    }    public void doNext() {        /*System.out.println("\n\n\n¨******************ISNERECORD?:"+parent.getTicket().isIsnewreccord());       System.out.println("\n\n\n¨******************ISATTACHED?:"+parent.getTicket().isIsattached());       System.out.println("\n\n\n¨******************ISMODIFY?:"+parent.getTicket().isModify());        if(parent.getTicket().isIsnewreccord()&&!parent.getTicket().isIsattached()){            System.out.println("\n\n[okokkokokoInsert]");                parent.getTicket().setIsattached(true);                parent.getDossier().addTicket(parent.getTicket());                parentpanel.getGrp_Pane_produit().activeBoutonProduit(false,null);                parentpanel.getGrp_Pane_produit().showProductPanel(0);        }        else if(parent.getTicket().isModify()){               System.out.println("\n\n[okokkokokoModif]");                parent.getDossier().addTicket(parent.getTicket());                parentpanel.getGrp_Pane_produit().activeBoutonProduit(false,null);                parentpanel.getGrp_Pane_produit().showProductPanel(0);               }        else        {          System.out.println("\n\n[okokkokokoRien]");          }*/    }    public void doPrevious() {        /*   parent.changeCursor(CursorChange.CHANGE_CURSOR_EVERYWHERE,new Cursor(Cursor.WAIT_CURSOR));         switch (action) {             case ActionToolBar.ACT_INSERT:                 grp_Pan_SegmentsEdition.displayDisableMode();                 grp_Pan_SegmentsEdition.dbInsert();                 showIndexPane();                 break;             case ActionToolBar.ACT_MODIFY:                 grp_Pan_SegmentsEdition.dbUpdate();                 showIndexPane();                 break;             case ActionToolBar.ACT_READ:                /* System.out.println("\n\n\n¨******************ISNERECORD?:"+parent.getTicket().isIsnewreccord());                 System.out.println("\n\n\n¨******************ISATTACHED?:"+parent.getTicket().isIsattached());                 System.out.println("\n\n\n¨******************ISMODIFY?:"+parent.getTicket().isModify());                 if(parent.getTicket().isIsnewreccord()&&!parent.getTicket().isIsattached()){                     System.out.println("\n\n[okokkokokoInsert]");                         parent.getTicket().setIsattached(true);                         parent.getDossier().addTicket(parent.getTicket());                         parentpanel.getGrp_Pane_produit().activeBoutonProduit(false,null);                         parentpanel.getGrp_Pane_produit().showProductPanel(0);                         parent.getTicket().setLocalyModify(false);                 }                 else if(parent.getTicket().isModify()){                     System.out.println("\n\n[okokkokokoModif]");                         parent.getDossier().addTicket(parent.getTicket());                         parentpanel.getGrp_Pane_produit().activeBoutonProduit(false,null);                         parentpanel.getGrp_Pane_produit().showProductPanel(0);                         parent.getTicket().setLocalyModify(false);                 }                 else System.out.println("\n\n[okokkokokoRien]");                 break;                 parentpanel.validateProduct();                 break;         }       parent.changeCursor(CursorChange.CHANGE_CURSOR_EVERYWHERE,new Cursor(Cursor.DEFAULT_CURSOR));        */    }    public void doPrint() {    }    public void doSwitch() {        try {            if (action != ActionToolBar.ACT_READ) {                doPrevious();                fx_manager.swithPanel();            } else {                //this.setFocusable(false);                fx_manager.swithPanel();            }        } catch (Exception en) {            System.out.println("WAAAAAAAAAAAAAAAAAAAAAAAAAAZZZZZZZZZZZZZZZZZAAAAAAAAAAAAAAAA");            en.printStackTrace();        }    }    public boolean isManagingFocus() {        return true;    }    public int[] getDefaultActionToolBarMask() {        return new int[]{ActionToolBar.DO_CREATE,                ActionToolBar.DO_MODIFY,                ActionToolBar.DO_ACCEPT,                ActionToolBar.DO_CANCEL,                ActionToolBar.DO_PREVIOUS,                ActionToolBar.DO_SWITCH};    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => Champs de la classe////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    private DossierMainScreenModule parent;    private int action;    private int dr_cleUnik;    private JPanelSelectionFxManager fx_manager;    //  private AviationPanel parentpanel;    private DossierSegmentsTableModel tbSegments;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// STATIC VARIABLES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => Graphic Component////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // private SegmentsEdition grp_Pan_SegmentsEdition;    // Variables declaration - do not modify//GEN-BEGIN:variables    private javax.swing.JTable grp_Table_SegmentIndex;    private javax.swing.JLabel jLabel1;    private javax.swing.JLabel jLabel28;    private javax.swing.JList jList1;    private javax.swing.JPanel jPanel1;    private javax.swing.JPanel jPanel10;    private javax.swing.JPanel jPanel12;    private javax.swing.JPanel jPanel13;    private javax.swing.JPanel jPanel14;    private javax.swing.JPanel jPanel2;    private javax.swing.JScrollPane jScrollPane1;    private javax.swing.JScrollPane jScrollPane2;    // End of variables declaration//GEN-END:variables////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// BEANS PROPERTIES GET/SET SUPPORT////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Permet à la classe qui implémente cette méthode de se     * <p/>     * <p/>     * référencer auprès d' ActionToolBar     *     * @return le n° de l'action     */    public int getAction() {        return action;    }    /**     * Sert à recevoir le titre de son parent     * <p/>     * <p/>     * pour un cadre éventuel     *     * @return le titre du panneau     */    public String getTitle() {        return "# Segments #";    }    /**     * Permet de préciser le type d'action qu'on est occupé de faire :     * <p/>     * <p/>     * 0 pour lecture     * <p/>     * <p/>     * 1 pour création     * <p/>     * <p/>     * 2 pour modification     *     * @param action type d'action     */    public void setAction(int action) {        this.action = action;    }    /**     * Permet de recevoir la clé unique d'un objet relatif     * <p/>     * <p/>     * au modules : création par partie ou modification     *     * @param frCleUnik la clé unique     */    public void setFrCleunik(int frCleUnik) {        this.dr_cleUnik = frCleUnik;    }    /** Getter for property fx_manager.     * @return Value of property fx_manager.     */    /*  public JPanelSelectionFxManager getFx_manager() {    return fx_manager;}    */    /**     * Setter for property fx_manager.     *     * @param fx_manager New value of property fx_manager.     */    /*   public void setFx_manager(JPanelSelectionFxManager fx_manager) {        this.fx_manager = fx_manager;    }    */    /*   public void fxPanelSelected(int key) {}    */    public void goUp() {    }    public void moveInTable(int direction) {        if (grp_Table_SegmentIndex.getRowCount() > 0) {            int cur = grp_Table_SegmentIndex.getSelectedRow();            int tot = grp_Table_SegmentIndex.getRowCount();            if (direction == KeyEvent.VK_DOWN && (cur < tot - 1))                grp_Table_SegmentIndex.changeSelection(cur + 1, 0, false, false);            if (direction == KeyEvent.VK_UP && (cur > 0))                grp_Table_SegmentIndex.changeSelection(cur - 1, 0, false, false);        }    }    /*   public java.awt.Container getContentPane() {        return rootpane.getContentPane();    }    public java.awt.Component getGlassPane() {        return rootpane.getGlassPane();    }    public javax.swing.JLayeredPane getLayeredPane() {         return rootpane.getLayeredPane();    }    public void setContentPane(java.awt.Container container) {          rootpane.setContentPane(container);    }    public void setGlassPane(java.awt.Component component) {        rootpane.setGlassPane(component);    }    public void setLayeredPane(javax.swing.JLayeredPane jLayeredPane) {          rootpane.setLayeredPane(jLayeredPane);    }*/    public java.awt.Component m_getGeneriqueTable() {        return grp_Table_SegmentIndex;    }    public Object getSupReduc2(int i) {        return parent.renvObjectSelectedInTable(grp_Table_SegmentIndex);    }    public void setSup_reduc(Object sup_reduc) {    }    public void reloadTableModel() {    }    public int doPrevious(boolean sw) {        return 1;    }    public int doModify(boolean sw) {        return 1;    }    public int doCancel(boolean sw) {        return 1;    }    public int doAccept(boolean sw) {        return 1;    }    public int doCreate(boolean sw) {        return 1;    }    public int doDelete(boolean sw) {        if (grp_Table_SegmentIndex.getRowCount() > 0) {            int rep = parent.getMessageManager().showConfirmDialog(parent.getSuperOwner(), "eff_produit_text", "eff_produit", parent.getCurrentUser());            if (rep == 0) {                if (!parent.getDossier().isNewreccord())                    parent.getDossier().setModifreccord(true);                if (!parent.getTicket().isIsnewreccord())                    parent.getTicket().setModify(true);                Avion_segment_T tmp = (Avion_segment_T) tbSegments.getObject(grp_Table_SegmentIndex.getSelectedRow());                long conj = tmp.getConcleunik();                tmp.setDeleted(true);                if (parent.getTicket().getConjonctionList() != null) {                    for (int i = 0; i < parent.getTicket().getConjonctionList().size(); i++) {                        Conjonction_T conjtmp = (Conjonction_T) parent.getTicket().getConjonctionList().get(i);                        if (conjtmp.getNumconjonction() == conj) {                            conjtmp.setModif(true);                            if (conjtmp.getSegmentList() != null) {                                for (int j = 0; j < conjtmp.getSegmentList().size(); j++) {                                    Avion_segment_T tmpseg = (Avion_segment_T) conjtmp.getSegmentList().get(j);                                    if (!tmpseg.isDeleted())                                        return 1;                                }                                conjtmp.setDeleted(true);                                parent.getTicket().addDeletedConj(conjtmp);                                parent.getTicket().getConjonctionList().remove(conjtmp);                                //  jList1.remove(i);                            }                        }                    }                }            }        }        reloadTable();        return 1;    }    public void doF10() {    }    public void addKeystroque() {    }    public void doF7() {    }}