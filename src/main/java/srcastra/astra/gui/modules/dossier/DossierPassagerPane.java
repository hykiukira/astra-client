/*
* DossierPassagerIndexPane.java
*
* Created on 3 septembre 2002, 13:09
*/
package srcastra.astra.gui.modules.dossier;

import srcastra.astra.gui.components.actions.actionToolBar.ActionToolBar;
import srcastra.astra.gui.components.actions.actionToolBar.ToolBarComposer;
import srcastra.astra.gui.components.fx.JPanelSelectionSpecialFxActions;
import srcastra.astra.gui.event.NavigateInTable;
import srcastra.astra.gui.modules.InternScreenModule;
import srcastra.astra.gui.modules.dossier.utils.PassagerManager;
import srcastra.astra.gui.modules.mainScreenModule.DossierMainScreenModule;
import srcastra.astra.gui.sys.tableModel.dossierTableModel.PassagerTableModel;
import srcastra.astra.sys.classetransfert.dossier.Passager_T;

import javax.swing.*;
import javax.swing.table.*;

/**
 * @author Sébastien
 */
public class DossierPassagerPane extends javax.swing.JPanel implements InternScreenModule, ToolBarComposer, JPanelSelectionSpecialFxActions {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CONSTRUCTOR

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Creates new form DossierPassagerIndexPane
     */
    public DossierPassagerPane(DossierMainScreenModule parent, DossierGeneralInfoPane parentPanel) {
        this.parent = parent;
        this.parentPanel = parentPanel;
        init();
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INITIALISATION

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public void init() {
        initComponents();
//grp_TFied_invisible.setVisible(false);
        initTable();
        action = ActionToolBar.ACT_READ;
        grp_TFied_invisible.addKeyListener(new NavigateInTable(grp_Table_passager));
        grp_Table_passager.setBackground(java.awt.Color.lightGray);
        grp_Table_passager.clearSelection();
        grp_Table_passager.setEnabled(false);
    }

    private void initTable() {
        tbModel_passager = new PassagerTableModel(parent.getServeur(), parent.getCurrentUser(), parent);
        tbModel_passager.retrieveData();
        grp_Table_passager.setAutoCreateColumnsFromModel(false);
        grp_Table_passager.setModel(tbModel_passager);
        grp_Table_passager.getTableHeader().setReorderingAllowed(false);
        grp_Table_passager.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        for (int i = 0; i < tbModel_passager.getColumnCount(); i++) {
            DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
            renderer.setHorizontalAlignment(tbModel_passager.m_columnNames[i].getM_alignment());
            TableCellEditor editor = new DefaultCellEditor(new JTextField());
            grp_Table_passager.addColumn(new TableColumn(i, tbModel_passager.m_columnNames[i].getM_width(), renderer, editor));
            JTableHeader header = grp_Table_passager.getTableHeader();
            header.setUpdateTableInRealTime(false);
        }
// grp_Table_passager.setModel(tbModel_passager);
/// grp_ScrollPane_Passager.updateUI();
//grp_Table_passager.setSelectionBackground(new java.awt.Color(221,221,255));
        if (grp_Table_passager.getRowCount() > 0)
            grp_Table_passager.changeSelection(0, 0, false, false);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLayeredPane1 = new javax.swing.JLayeredPane();
        grp_Pane_PassagerIndex = new javax.swing.JPanel();
        grp_ScrollPane_Passager = new javax.swing.JScrollPane();
        grp_Table_passager = new javax.swing.JTable();
        grp_TFied_invisible = new javax.swing.JTextField();
        setLayout(new java.awt.BorderLayout());
        setBorder(new javax.swing.border.TitledBorder(null, java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleDossier/DossierPassagerPane", parent.getCurrentUser().getLangage()).getString("Passager_titre"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10)));
        grp_Pane_PassagerIndex.setLayout(new java.awt.BorderLayout());
        grp_Pane_PassagerIndex.setMaximumSize(new java.awt.Dimension(0, 0));
        grp_Table_passager.setModel(new DefaultTableModel());
        grp_Table_passager.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                grp_Table_passagerFocusGained(evt);
            }
        });
        grp_ScrollPane_Passager.setViewportView(grp_Table_passager);
        grp_Pane_PassagerIndex.add(grp_ScrollPane_Passager, java.awt.BorderLayout.CENTER);
        grp_Pane_PassagerIndex.setBounds(0, 0, 703, 140);
        jLayeredPane1.add(grp_Pane_PassagerIndex, 50,0);
        grp_TFied_invisible.setText("jTextField1");
        grp_TFied_invisible.setMaximumSize(new java.awt.Dimension(0, 0));
        grp_TFied_invisible.setMinimumSize(new java.awt.Dimension(0, 0));
        grp_TFied_invisible.setPreferredSize(new java.awt.Dimension(0, 0));
        grp_TFied_invisible.setBounds(0, 0, -1, -1);
        jLayeredPane1.add(grp_TFied_invisible, 50,1);
        add(jLayeredPane1, java.awt.BorderLayout.CENTER);
    }//GEN-END:initComponents

    private void grp_Table_passagerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_grp_Table_passagerFocusGained
        grp_TFied_invisible.requestFocus();        // Add your handling code here:
    }//GEN-LAST:event_grp_Table_passagerFocusGained

    public void initPassagerEditionPanel() {
        if (grp_Pan_edition == null) {
            grp_Pan_edition = new DossierPassagerEditionPane(parent, this);
            grp_Pan_edition.setPmanager(this.getPmanager());
            jLayeredPane1.add(grp_Pan_edition,50,1);
            grp_Pan_edition.setBounds(0, 0, jLayeredPane1.getWidth(), jLayeredPane1.getHeight());
        }
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// => LISTENERS

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public void fxPanelDiselected() {
        requestFocus();
        grp_Table_passager.setBackground(java.awt.Color.lightGray);
        grp_Table_passager.clearSelection();
        grp_Table_passager.setEnabled(false);
    }

    public void fxPanelSelected() {
        grp_TFied_invisible.requestFocus();
        grp_Table_passager.setBackground(java.awt.Color.white);
        grp_Table_passager.setEnabled(true);
        if (grp_Table_passager.getRowCount() > 0)
            grp_Table_passager.changeSelection(0, 0, false, false);
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// => METHODE APPARENTE AU BEANS

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private void showEditionPane() {
        parent.enabledTabbedPane(false);
        initPassagerEditionPanel();
        jLayeredPane1.moveToFront(grp_Pan_edition);
    }

    public void refreshTable() {
        tbModel_passager.retrieveData();
        grp_Table_passager.tableChanged(new javax.swing.event.TableModelEvent(tbModel_passager));
        if (grp_Table_passager.getRowCount() > 0)
            grp_Table_passager.changeSelection(0, 0, false, false);
    }

    private void showIndexPane() {
        action = ActionToolBar.ACT_READ;
        parent.enabledTabbedPane(true);
        jLayeredPane1.moveToFront(grp_Pane_PassagerIndex);
//  if (tbModel_passager.retrieveData()) {
        tbModel_passager.retrieveData();
        grp_Table_passager.tableChanged(new javax.swing.event.TableModelEvent(tbModel_passager));
        grp_Table_passager.repaint();
        if (grp_Table_passager.getRowCount() != 0)
            grp_Table_passager.changeSelection(0, 0, false, false);
//}
        fx_manager.needReselect();
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// => FONCTIONS APPARENTES AU TRANSFERT DE DONNEE

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Permet au parent de lancer le chargement des données au
     * sein de liste (Ici : ListSelector)
     */
    public void chargeData() {
    }

    /**
     * Demande d'une suppression ou d'une annulation physique au serveur
     */
    public void dbDelete() {
        Passager_T tmpass = null;
        if (grp_Table_passager.getRowCount() != 0) {
            int rep = parent.getMessageManager().showConfirmDialog(this, "eff_pass_text", "eff_pass", parent.getCurrentUser());
            if (rep == 0) {
                int numrow = grp_Table_passager.getSelectedRow();
                if (parent.getDossier().isNewreccord()) {
                    tmpass = (Passager_T) parent.getDossier().getPassager().remove(numrow);
                } else {
                    tmpass = (Passager_T) parent.getDossier().getPassager().get(numrow);
                    if (tmpass.isNewReccord()) {
                        parent.getDossier().getPassager().remove(tmpass);
                    } else {
                        parent.getDossier().setModifreccord(true);
                        tmpass.setModify(false);
                        tmpass.setNewReccord(false);
                        tmpass.setDeleted(true);
                    }
                }
                if (tmpass != null) {
                    if (tmpass.getCscleunik2() != 0)
                        pmanager.setIsClientIn(false);
                }
                parent.chargeStatusPanel();
                showIndexPane();
            }
        }
    }

    /**
     * Demande d'une insertion au serveur
     */
    public void dbInsert() {
    }

    /**
     * Demande de sélection au serveur
     */
    public void dbSelect() {
    }

    /**
     * Demande de sélection en vue d'une modification au serveur
     */
    public void dbSelectForUpdate() {
    }

    /**
     * Demande d'une modification au serveur
     */
    public void dbUpdate() {
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// => METHODE APPARENTE A L' AFFICHAGE DES DONNEES

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Affichage en Mode disable
     */
    public void displayDisableMode() {
        if (grp_Table_passager.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Aucun passager dans ce dossier");
        } else {
            parent.enabledTabbedPane(false);
            action = ActionToolBar.ACT_DISABLE;
            showEditionPane();
            grp_Pan_edition.setPassager((Passager_T) parent.renvObjectSelectedInTable(grp_Table_passager));
            grp_Pan_edition.displayReadMode();
        }
    }

    /**
     * Affichage en mode Insertion
     */
    public void displayInsertMode() {
        System.out.println("===============================> DISPLAY INSERT MODE !!!!!<======================================");
        action = ActionToolBar.ACT_INSERT;
        showEditionPane();
        grp_Pan_edition.displayInsertMode();
/*this.removeAll();
initPassagerEditionPanel();
grp_Pan_edition.displayInsertMode();
this.updateUI();*/
    }

    public void displayInsertMode(boolean sw, int passagerSelect) {
        System.out.println("===============================> DISPLAY INSERT MODE !!!!!<======================================");
        action = ActionToolBar.ACT_INSERT;
        showEditionPane();
        grp_Pan_edition.displayInsertMode(sw, passagerSelect);
    }

    /**
     * Affichage en mode Lecture
     */
    public void displayReadMode() {
/* parent.enabledTabbedPane(true);
action = ActionToolBar.ACT_READ;
this.removeAll();
init();
this.updateUI();*/
    }

    /**
     * Affichage en mode Modification
     */
    public void displayUpdateMode() {
        if (grp_Table_passager.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Aucun passager dans ce dossier");
        } else {
            parent.enabledTabbedPane(false);
            action = ActionToolBar.ACT_MODIFY;
            showEditionPane();
            grp_Pan_edition.setPassager((Passager_T) parent.renvObjectSelectedInTable(grp_Table_passager));
            grp_Pan_edition.displayUpdateMode();
        }
    }

    /**
     * Méthode pour l'update de tous les champs
     */
    public void updateAllFields() {
    }

    public void updateAllFields(Object donnee) {
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// => METHODE APPARENTE AUX APPELS DE LA TOOLBAR

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public void doAccept() {
/*switch (action) {
case ActionToolBar.ACT_INSERT:
grp_Pan_edition.displayDisableMode();
grp_Pan_edition.dbInsert();
showIndexPane();
break;
case ActionToolBar.ACT_READ:*/
        displayDisableMode();
/*break;
case ActionToolBar.ACT_MODIFY:
grp_Pan_edition.dbUpdate();
showIndexPane();
break;
}
// displayDisableMode();*/
    }

    public void doCancel() {
        switch (action) {
            case ActionToolBar.ACT_INSERT:
                grp_Pan_edition.displayDisableMode();
                showIndexPane();
                break;
            case ActionToolBar.ACT_READ:
                if (parent.getDossier().isNewreccord()) {
                    String annulTitle = java.util.ResourceBundle.getBundle("srcastra/astra/locale/alertmessage", parent.getCurrentUser().getLangage()).getString("dosmodifnonrec");
                    String annulText = java.util.ResourceBundle.getBundle("srcastra/astra/locale/alertmessage", parent.getCurrentUser().getLangage()).getString("dosnewnonrec");
// int resp = parent.getMessageManager().showConfirmDialog(this, "dos_annul_new", "dos_annul", parent.getCurrentUser());
                    DossierMessage dossnew = new DossierMessage(parent.getSuperOwner(), true, annulTitle, annulText, DossierMessage.FOCUSCANCEL);
                    int resp = dossnew.retval;
                    dossnew.dispose();
                    requestFocus();
                    if (resp != JOptionPane.YES_OPTION) {
                        return;
                    }
                } else if (parent.getDossier().isModifreccord()) {
                    String annulTitle = java.util.ResourceBundle.getBundle("srcastra/astra/locale/alertmessage", parent.getCurrentUser().getLangage()).getString("dosmodifnonrectitle");
                    String annulText = java.util.ResourceBundle.getBundle("srcastra/astra/locale/alertmessage", parent.getCurrentUser().getLangage()).getString("dosmodifnonrec");
                    DossierMessage dossnew = new DossierMessage(parent.getSuperOwner(), true, annulTitle, annulText, DossierMessage.FOCUSCANCEL);
                    int resp = dossnew.retval;
                    dossnew.dispose();
                    requestFocus();
                    if (resp != JOptionPane.YES_OPTION) {
                        return;
                    }
                }
                parent.cancelModule();
                break;
            case ActionToolBar.ACT_MODIFY:
                grp_Pan_edition.displayDisableMode();
                showIndexPane();
                break;
            case ActionToolBar.ACT_DISABLE:
                showIndexPane();
                break;
/*displayReadMode();
if (fx_manager != null) fx_manager.needReselect();
parentPanel.requestFocus();
break;*/
/*   case ActionToolBar.ACT_READ :
if (parent.getDossier().isNewreccord()) {
int resp = parent.getMessageManager().showConfirmDialog(this, "dos_annul_new", "dos_annul", parent.getCurrentUser());
requestFocus();
if (resp != JOptionPane.YES_OPTION) {
return;
}
}
else if (parent.getDossier().isModifreccord()) {
int resp = parent.getMessageManager().showConfirmDialog(this, "dos_annul_modif", "dos_annul", parent.getCurrentUser());
requestFocus();
if (resp != JOptionPane.YES_OPTION) {
return;
}
}
parent.cancelModule();
break;
case ActionToolBar.ACT_MODIFY :
displayReadMode();
if (fx_manager != null) fx_manager.needReselect();
break;
*/
        }
    }

    public void doClose() {
    }

    public void doCreate() {
        int rep;
        if (tbModel_passager.getRowCount() <= 0) {
            DossierPassagerAskForGroup dp_ask = new DossierPassagerAskForGroup(getPmanager());            // pane.add(new DossierPassagerAskForGroup());
            rep = JOptionPane.showConfirmDialog(this, dp_ask, "Choix de l'encodage", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/lion.gif")));
            displayInsertMode(dp_ask.sw, dp_ask.passagerSelect);
        } else
            displayInsertMode();
    }

    public void doDelete() {
        dbDelete();
    }

    public void doHelp() {
    }

    public void doModify() {
        switch (action) {
            case ActionToolBar.ACT_DISABLE:
                action = ActionToolBar.ACT_MODIFY;
                grp_Pan_edition.displayUpdateMode();
                break;
            default:
                displayUpdateMode();
                break;
        }
    }

    public void doNext() {
    }

    public void doPrevious() {
        switch (action) {
            case ActionToolBar.ACT_INSERT:
                if (grp_Pan_edition.isGoodForInsertion()) {
                    grp_Pan_edition.displayDisableMode();
                    grp_Pan_edition.dbInsert();
                    if (!parent.getDossier().isNewreccord())
                        parent.getDossier().setModifreccord(true);
                    parent.chargeStatusPanel();
                    showIndexPane();
                }
                break;
            case ActionToolBar.ACT_MODIFY:
                if (grp_Pan_edition.isGoodForInsertion()) {
                    grp_Pan_edition.dbUpdate();
                    if (!parent.getDossier().isNewreccord())
                        parent.getDossier().setModifreccord(true);
                    showIndexPane();
                }
                break;
            case ActionToolBar.ACT_READ:
                System.out.println("========================> DO PREVIOUS <====================================");
                if (parent.getDossier().isNewreccord() == true) {
// System.out.println("\n\n\n\n\n[**************ok je suis en mode insert");
                    if (parent.getDossier().getPassager() == null || parent.getDossier().getPassager().size() == 0)
                        parent.getMessageManager().showMessageDialog(this, "dos_no_pass_text", "dos_no_pass", parent.getCurrentUser());
                    else {
//parentPanel.dbInsert();
                        if (parent.isCreatingSequence()) {
// System.out.println("***********************DISPLAY READ SEQUENCE !!!!!**********************************");
// parent.displayReadSequence(0);
                            parent.nextScreen(0);
                        }
                    }
                } else {
                    parent.nextSpecificScreen(1);
// System.out.println("\n\n\n\n\n[**************ok je suis en mode modification");
// if(parent.getDossier().isModifreccord()==false && parent.getDossier().isListPassagerModif()==false)
//    parent.getMessageManager().showMessageDialog(this,"dos_no_mod_text","dos_no_mod",parent.getCurrentUser());
//else parentPanel.dbUpdate();
                }
        }// Add your handling code here:*/
    }

    public void doPrint() {
    }

    public void doSwitch() {
        if (action != ActionToolBar.ACT_READ) {
            if (grp_Pan_edition.isGoodForInsertion()) {
                doPrevious();
                fx_manager.swithPanel();
            }
        } else
            fx_manager.swithPanel();
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// => Champs de la classe
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private int action;
    private DossierMainScreenModule parent;
    private srcastra.astra.gui.components.fx.JPanelSelectionFxManager fx_manager;
    private PassagerTableModel tbModel_passager;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// STATIC VARIABLES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// => Graphic Component
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private DossierPassagerEditionPane grp_Pan_edition;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel grp_Pane_PassagerIndex;
    private javax.swing.JScrollPane grp_ScrollPane_Passager;
    private javax.swing.JTextField grp_TFied_invisible;
    private javax.swing.JTable grp_Table_passager;
    private javax.swing.JLayeredPane jLayeredPane1;
// End of variables declaration//GEN-END:variables
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BEANS PROPERTIES GET/SET SUPPORT

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Permet à la classe qui implémente cette méthode de se
     * référencer auprès d' ActionToolBar
     *
     * @return le n° de l'action
     */
    public int getAction() {
        return this.action;
    }

    public int[] getDefaultActionToolBarMask() {
        System.out.println("[DOSSIER PASS] getDEFAULT !!!");
        return new int[]{ActionToolBar.DO_ACCEPT,
                ActionToolBar.DO_MODIFY,
                ActionToolBar.DO_CREATE,
                ActionToolBar.DO_CANCEL,
                ActionToolBar.DO_DELETE,
                ActionToolBar.DO_PREVIOUS,
                ActionToolBar.DO_SWITCH};
    }

    /**
     * Sert à recevoir le titre de son parent
     * pour un cadre éventuel
     *
     * @return le titre du panneau
     */
    public String getTitle() {
        return "# Passager # ";
    }

    /**
     * Permet de préciser le type d'action qu'on est occupé de faire :
     * 0 pour lecture
     * 1 pour création
     * 2 pour modification
     *
     * @param action type d'action
     */
    public void setAction(int action) {
        this.action = action;
    }

    /**
     * Permet de recevoir la clé unique d'un objet relatif
     * au modules : création par partie ou modification
     *
     * @param frCleUnik la clé unique
     */
    public void setFrCleunik(int frCleUnik) {
    }

    /**
     * Spécifie le composant qui implémente cette fonction comme
     * le composant qui pilote l'actionToolBar
     */
    public void setThisAsToolBarComponent() {
    }

    /**
     * Getter for property fx_manager.
     *
     * @return Value of property fx_manager.
     */
    public srcastra.astra.gui.components.fx.JPanelSelectionFxManager getFx_manager() {
        return fx_manager;
    }

    /**
     * Setter for property fx_manager.
     *
     * @param fx_manager New value of property fx_manager.
     */
    public void setFx_manager(srcastra.astra.gui.components.fx.JPanelSelectionFxManager fx_manager) {
        this.fx_manager = fx_manager;
    }

    public void setLibellé(String libellé) {
    }

    public void fxPanelSelected(int key) {
    }

    public void goUp() {
    }

    public java.awt.Component m_getGeneriqueTable() {
        return grp_Table_passager;
    }

    /**
     * Getter for property grp_Pan_edition.
     *
     * @return Value of property grp_Pan_edition.
     */
    public srcastra.astra.gui.modules.dossier.DossierPassagerEditionPane getGrp_Pan_edition() {
        return grp_Pan_edition;
    }

    /**
     * Setter for property grp_Pan_edition.
     *
     * @param grp_Pan_edition New value of property grp_Pan_edition.
     */
    public void setGrp_Pan_edition(srcastra.astra.gui.modules.dossier.DossierPassagerEditionPane grp_Pan_edition) {
        this.grp_Pan_edition = grp_Pan_edition;
    }

    /**
     * Getter for property pmanager.
     *
     * @return Value of property pmanager.
     */
    public srcastra.astra.gui.modules.dossier.utils.PassagerManager getPmanager() {
        return pmanager;
    }

    /**
     * Setter for property pmanager.
     *
     * @param pmanager New value of property pmanager.
     */
    public void setPmanager(srcastra.astra.gui.modules.dossier.utils.PassagerManager pmanager) {
        this.pmanager = pmanager;
    }

    public void doF10() {
    }

    public void addKeystroque() {
    }

    public void doF7() {
    }

    DossierGeneralInfoPane parentPanel;
    PassagerManager pmanager;
}
