/*

 * ExportComptable.java

 *

 * Created on 19 décembre 2003, 9:18

 */


package srcastra.astra.gui.modules.dossier;

import java.io.*;
import java.lang.Object.*;


import srcastra.astra.sys.classetransfert.clients.*;

import srcastra.astra.sys.classetransfert.configuration.*;

import javax.swing.*;

import srcastra.astra.gui.modules.mainScreenModule.DossierMainScreenModule.*;

import srcastra.astra.gui.modules.*;

import srcastra.astra.gui.components.*;

import java.awt.event.*;

import srcastra.astra.gui.components.actions.actionToolBar.*;

import srcastra.astra.sys.rmi.*;

import srcastra.astra.sys.classetransfert.*;

import srcastra.astra.gui.sys.*;

import javax.swing.event.*;

import java.rmi.*;

import java.util.*;

import srcastra.astra.sys.rmi.Exception.*;

import srcastra.astra.sys.export.*;
import srcastra.astra.gui.sys.*;
import srcastra.astra.sys.utils.*;

import srcastra.astra.sys.classetransfert.dossier.*;

import srcastra.astra.sys.classetransfert.utils.*;

import srcastra.astra.gui.components.date.thedate.*;
import java.util.Locale.*;
import java.text.DateFormat.*;


/**
 * @author Thomas
 */


public class MailOut extends javax.swing.JInternalFrame implements MainScreenModule, AIframe, ActionListener, ToolBarComposer {


    /**
     * Creates new form ExportComptable
     */

    //ComptaPanel panel;

    ActionToolBar actionToolBar;

    javax.swing.event.InternalFrameListener iFrameListener;

    int[] actionTab;

    astrainterface serveur;

    Loginusers_T user;

    java.awt.Frame parent;

    String chemin;

    public MailOut(java.awt.Frame superOwner, astrainterface serveur, Loginusers_T currentUser, ActionToolBar actionToolBar, javax.swing.event.InternalFrameListener iFrameListener) {

        initComponents();

        deb = new ADate();
        fin = new ADate();

        getContentPane().add(deb);
        deb.setBounds(120, 20, 100, 18);
        getContentPane().add(fin);
        fin.setBounds(230, 20, 100, 18);
        deb.setGrp_Comp_nextComponent(fin);


        this.parent = superOwner;

        this.actionToolBar = actionToolBar;

        this.actionToolBar.setActionEnabled(activeToolbar(false));

        //panel=new ComptaPanel(this);        

        ///getContentPane().add(panel);

        this.iFrameListener = iFrameListener;

        this.addInternalFrameListener(iFrameListener);

        this.actionToolBar.setTbComposer(this);

        this.serveur = serveur;

        this.user = currentUser;

    }

    private int[] activeToolbar(boolean enabled) {

        //if(enabled){

        actionTab = new int[]{ActionToolBar.DO_PREVIOUS, ActionToolBar.DO_CLOSE};

        //}else{

        //  actionTab=new int[]{ActionToolBar.DO_CLOSE};

        //}

        return actionTab;

    }

    public void doDefaultCloseAction() {

        try {

            serveur.remoterollback(getCurrentUser().getUrcleunik());

        } catch (java.rmi.RemoteException re) {

            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.MISSING_RESSOURCE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);

        }

        InternalFrameEvent closeWindow = new InternalFrameEvent(this, InternalFrameEvent.INTERNAL_FRAME_CLOSING);

        this.iFrameListener.internalFrameClosing(closeWindow);

        super.doDefaultCloseAction();

    }


    /**
     * This method is called from within the constructor to
     * <p/>
     * initialize the form.
     * <p/>
     * WARNING: Do NOT modify this code. The content of this method is
     * <p/>
     * always regenerated by the Form Editor.
     */

    private void initComponents() {//GEN-BEGIN:initComponents
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        button1 = new java.awt.Button();
        label4 = new java.awt.Label();

        getContentPane().setLayout(null);

        setClosable(true);
        setIconifiable(true);
        setName("exportcompta");
        label1.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/listing").getString("retour"));
        getContentPane().add(label1);
        label1.setBounds(10, 0, 80, 20);

        label2.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/listing").getString("do_de"));
        getContentPane().add(label2);
        label2.setBounds(70, 20, 40, 20);

        label3.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/listing").getString("dos_a"));
        getContentPane().add(label3);
        label3.setBounds(210, 20, 20, 20);

        button1.setLabel("Open");
        button1.setVisible(false);
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        getContentPane().add(button1);
        button1.setBounds(370, 20, 57, 24);

        label4.setFont(new java.awt.Font("Arial", 1, 12));
        label4.setForeground(new java.awt.Color(255, 51, 51));
        getContentPane().add(label4);
        label4.setBounds(580, 20, 40, 20);

        setBounds(0, 0, 469, 117);
    }//GEN-END:initComponents

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed


        try {
            System.out.println(chemin);

            char un = (char) 47;
            char deux = (char) 92;

            chemin = chemin.replace(un, deux);

            System.out.println(chemin);


            Runtime.getRuntime().exec("explorer.exe " + this.chemin);
        } catch (Exception e) {
        }         // TODO add your handling code here:
    }//GEN-LAST:event_button1ActionPerformed


    public void cancelModule() {

    }


    public void changeCursor(int changeLocation, java.awt.Cursor cursor) {

    }


    public void chargeStatusPanel(String[] statuts) {

    }


    public void closeModule() {

    }


    public void displayCreateSequence() {

    }


    public void displayDeleteSequence() {

    }


    public void displayReadSequence(int cleUnik) {

    }


    public void enabledTabbedPane(boolean enabled) {

    }


    public srcastra.astra.sys.classetransfert.Loginusers_T getCurrentUser() {

        return user;

    }


    public boolean getNestedSignaletique() {

        return false;

    }


    public java.awt.Frame getOwner() {

        return null;

    }


    public srcastra.astra.sys.rmi.astrainterface getServeur() {

        return null;

    }


    public srcastra.astra.sys.rmi.DossierRmiInterface getServeurDossier() {

        return null;

    }


    public java.awt.Frame getSuperOwner() {

        return null;

    }


    public void nextScreen(int currentScreen) {


    }


    public void nextScreen(int currentScreen, boolean affich) {

    }


    public void nextScreen(int currentScreen, int insert) {

    }


    public void registerTable(javax.swing.JTable generique_table) {

    }


    public void reloadToolBarInfo() {

        this.actionToolBar.setActionEnabled(actionTab);

        actionToolBar.setTbComposer(this);

    }

    public void reloadToolBarInfo(boolean enabled) {

        activeToolbar(enabled);

        this.actionToolBar.setActionEnabled(actionTab);

        actionToolBar.setTbComposer(this);

    }


    public void setContextCleUnik(int ContextCleUnik) {

    }


    public void setCurrentActionEnabled(int[] actionEnabled) {

    }


    public void setCurrentPanel(srcastra.astra.gui.components.actions.actionToolBar.ToolBarComposer currentPanel) {

    }


    public void setNestedSignaletique(boolean netstedSignletique) {

    }


    public void saveToolBarInfo() {

    }


    public void actionPerformed(ActionEvent e) {

    }


    public void doAccept() {

    }


    public void doCancel() {

    }


    public void doClose() {

    }


    public void doCreate() {

    }


    public void doDelete() {

    }


    public void doF10() {

    }


    public void doF7() {

    }


    public void doHelp() {

    }


    public void doModify() {

    }


    public void doNext() {

    }


    public void doPrevious() {

        ArrayList array = new ArrayList();

        try {

            //parent.get
            Entite_T e = (Entite_T) serveur.renvDossierRmiObject(user.getUrcleunik()).getAgenceInfo(user.getUrcleunik());

            String licence = e.getLicence();

            if (licence == "")
                licence = "UNKNOWN";

            //Entite e=serveur.renvEntiteRmiObject(user.getUrcleunik()).

            this.button1.setVisible(false);

            //System.out.println(this.getDebDeb()+" "+this.getDateFin());

            array = serveur.renvListRmiObject(user.getUrcleunik()).getMailOut(user.getUrcleunik(), this.getDebDeb(), this.getDateFin());

            //System.out.println(array.toString());

            String path = srcastra.astra.sys.ManageDirectory.testDirectory("mailCSV\\");


            System.out.println(licence);


            this.chemin = path;


            int ii = 0;

            String temp = "";


            FileWriter fw = null;
            String data = "";
            int jour = 0;
            int ms = 0;
            String msa = "";
            String msa1 = "";
            String joura = "";
            String joura1 = "";


            while (ii < array.size()) {
                Object[] tab = (Object[]) array.get(ii);
                //temp=tab[3].toString();
                System.out.println(temp);

                if (temp.compareTo(tab[3].toString()) != 0) {

                    if (fw != null) {
                        BufferedWriter output = new BufferedWriter(fw);
                        output.write(data);
                        output.flush();
                        output.close();
                    }

                    licence = tab[3].toString().replaceAll("A", "");
                    licence = licence.replaceAll(" ", "");

                    temp = tab[3].toString();
                    fw = new FileWriter(this.chemin + licence + ".txt");
                    System.out.println(this.chemin + licence);

                    data = "";
                    

                }

                


                while (ii < array.size() && temp.compareTo(tab[3].toString()) == 0) {
                    tab = (Object[]) array.get(ii);
                    String lic = tab[3].toString().replaceAll("A", "");
                    srcastra.astra.sys.classetransfert.utils.Date dd = (srcastra.astra.sys.classetransfert.utils.Date) tab[1];
                    lic = lic.replaceAll(" ", "");
                    jour = dd.getDay();
                    ms = dd.getMonth();
                    joura = String.valueOf(jour);
                    if (joura.length()==1) {

                        joura1 = "0" + joura;
                        System.out.println(joura1);

                    } else if(joura.length()!=1) {
                        joura1 = joura;

                    }

                    msa = String.valueOf(ms);
                    
                    if (msa.length()==1) {
                        
                        msa1 = "0" + msa;
                        System.out.println(msa1);
                    }  else if(msa.length()!=1) {
                        msa1=msa;
                    }


                    data = data + tab[0].toString() + ";" +  joura1 + "/" + msa1 + "/" + dd.getYear() + ";" + tab[2].toString().substring(0, 1) +  ";" + lic + "00" + "\r\n";
                    System.out.println(data);

                    ii++;
                }

                //ii++;

            }

            if (fw != null) {
                BufferedWriter output = new BufferedWriter(fw);
                output.write(data);
                output.flush();
                output.close();
                this.button1.setVisible(true);
            }

            /*
           FileWriter fw = new FileWriter(this.chemin+licence+".txt");
           String data="";

            for (int ii=0;ii<array.size();ii++)
            {
                Object[] tab=(Object[])array.get(ii);

                srcastra.astra.sys.classetransfert.utils.Date dd = (srcastra.astra.sys.classetransfert.utils.Date)tab[1];

                String lic=tab[3].toString().replaceAll("A","");
                lic=lic.replaceAll(" ","");



                data=data+tab[0].toString()+";"+dd.getDay()+"/"+dd.getMonth()+"/"+dd.getYear()+";"+tab[2].toString().substring(0,1)+";"+lic+"\n";

                //System.out.println(data);


                this.button1.setVisible(true);
            }

           //String date1=Integer.toString(deb.getDate().getDay())+"-"+Integer.toString(deb.getDate().getMonth())+"-"+Integer.toString(deb.getDate().getYear())+"_"+Integer.toString(fin.getDate().getDay())+"-"+Integer.toString(fin.getDate().getMonth())+"-"+Integer.toString(fin.getDate().getYear());



               // le BufferedWriter output auquel on donne comme argument le FileWriter fw cree juste au dessus
               BufferedWriter output = new BufferedWriter(fw);

               //on marque dans le fichier ou plutot dans le BufferedWriter qui sert comme un tampon(stream)
               output.write(data);
               //on peut utiliser plusieurs fois methode write

               output.flush();
               //ensuite flush envoie dans le fichier, ne pas oublier cette methode pour le BufferedWriter

               output.close();
               //et on le ferme*/


        } catch (srcastra.astra.sys.rmi.Exception.ServeurSqlFailure se) {

            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se, user);

        } catch (RemoteException re) {
            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);
        }

        catch (IOException ioe) {
            System.out.println("erreur : " + ioe);
        }


    }



    private void checkError() {

        /*  DbfManager2.EmptyFile(panel.getPath().vente);

        DbfManager2.EmptyFile(panel.getPath().achat);

        DbfManager2.EmptyFile(panel.getPath().financier);

        DbfManager2.EmptyFile(panel.getPath().od);

        DbfManager2.EmptyFile(panel.getPath().fournisseur);

        DbfManager2.EmptyFile(panel.getPath().client);*/

        //JOptionPane.showMessageDialog(this,java.util.ResourceBundle.getBundle("srcastra/astra/locale/alertmessage").getString("error_export"),java.util.ResourceBundle.getBundle("srcastra/astra/locale/alertmessage").getString("error_export_title"),JOptionPane.INFORMATION_MESSAGE);

    }

    public void doPrint() {

    }


    public void doSwitch() {

    }


    public int[] getDefaultActionToolBarMask() {

        return null;

    }


    public java.awt.Component m_getGeneriqueTable() {

        return null;

    }


    public void setThisAsToolBarComponent() {

    }

    private String getDebDeb() {

        srcastra.astra.sys.classetransfert.utils.Date date = deb.getDate();
        date.setHours(0);
        date.setMinutes(0);
        date.setSeconds(0);

        if (date == null || date.isOpen() || date.isUnknow()) {

            return "0000-00-00 00:00:00";

        }

        return date.toString();


    }

    private String getDateFin() {

        srcastra.astra.sys.classetransfert.utils.Date date = fin.getDate();
        date.setHours(0);
        date.setMinutes(0);
        date.setSeconds(0);

        if (date == null || date.isOpen() || date.isUnknow()) {

            return "9999-01-01 00:00:00";

        }

        return date.toString();


    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    // End of variables declaration//GEN-END:variables

    ADate deb;
    ADate fin;


}
