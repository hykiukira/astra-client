/*
* ClientModules.java
* Created on 21 mars 2002, 11:05
*/
package srcastra.astra.gui.modules.dossier;

import srcastra.astra.sys.classetransfert.Loginusers_T;
import srcastra.astra.sys.rmi.astrainterface;
import srcastra.astra.gui.modules.*;
import srcastra.astra.gui.modules.mainScreenModule.DossierMainScreenModule;
import srcastra.astra.gui.components.actions.actionToolBar.*;
import srcastra.astra.gui.components.AIframe;
import srcastra.astra.gui.sys.ErreurScreenLibrary;
import srcastra.astra.sys.rmi.DossierRmiInterface;
import srcastra.astra.sys.classetransfert.dossier.*;
import srcastra.astra.gui.sys.tableModel.dossierTableModel.DossierTableModelInterface;

import java.util.ArrayList;

import srcastra.astra.gui.sys.MessageManager;
import srcastra.astra.sys.classetransfert.dossier.avion.Avion_ticket_T;

import java.util.*;
import java.text.*;

import srcastra.astra.sys.classetransfert.utils.*;
import srcastra.astra.gui.sys.utils.*;

import java.awt.*;

import srcastra.astra.sys.classetransfert.dossier.assurance.*;
import srcastra.astra.sys.classetransfert.dossier.brochure.*;
import srcastra.astra.sys.classetransfert.dossier.hotel.*;
import srcastra.astra.sys.classetransfert.dossier.bateau.*;
import srcastra.astra.sys.classetransfert.dossier.train.*;
import srcastra.astra.sys.classetransfert.dossier.car.*;
import srcastra.astra.sys.classetransfert.dossier.voitureLocation.*;
import srcastra.astra.sys.classetransfert.dossier.taxi.*;
import srcastra.astra.sys.classetransfert.dossier.divers.*;
import srcastra.astra.sys.compta.*;

import javax.swing.event.InternalFrameEvent;
import java.awt.event.*;
import java.io.*;

/**
 * @author Sébastien
 */
public class DossierModules extends javax.swing.JInternalFrame implements DossierMainScreenModule, AIframe, InterfaceModuleDossier, java.awt.event.KeyListener {
    /**
     * Creates new form ClientModules
     */
    Dossier_T dossierInit;
    int selectedPanel = 0;
    public static final int INDEX = 1;
    public static final int OTHER = 2;
    ArrayList dossierIndexArray;
    int selectedRow;

    public DossierModules(java.awt.Frame superOwner, astrainterface serveur, Loginusers_T currentUser, ActionToolBar actionToolBar, javax.swing.event.InternalFrameListener iFrameListener, DossierRmiInterface serveurDossier) {
        this.serveur = serveur;
        this.currentUser = currentUser;
        this.actionToolBar = actionToolBar;
        this.frameP = frameP;
        this.iFrameListener = iFrameListener;
        this.superOwner = superOwner;
        this.serveurDossier = serveurDossier;
        this.addKeyListener(this);
        initIndexComponents();
        this.addInternalFrameListener(iFrameListener);
// nom & titre de l'iframe
        try {
            setName(java.util.ResourceBundle.getBundle("srcastra/astra/locale/IFrame", currentUser.getLangage()).getString("IF_Dossier"));
            setTitle(java.util.ResourceBundle.getBundle("srcastra/astra/locale/IFrame", currentUser.getLangage()).getString("IF_Dossier"));
        } catch (java.util.MissingResourceException mre) {
            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.MISSING_RESSOURCE_EXCEPTION, srcastra.astra.Astra.DEBUG, mre);
        }
        this.updateUI();
    }

    public boolean getNestedSignaletique() {
        return false;
    }

    public void setNestedSignaletique(boolean netstedSignletique) {

    }

    public void cloneDossier() {
        try {
            ByteArrayOutputStream ByteOut = new ByteArrayOutputStream();
//DeflaterOutputStream defOut=new DeflaterOutputStream(ByteOut);
            ObjectOutputStream ObjOut = new ObjectOutputStream(ByteOut);
            ObjOut.writeObject(this.getDossier());
            ObjOut.flush();
            ObjOut.close();
            byte[] tmpArray = ByteOut.toByteArray();
            ByteArrayInputStream ByteIn = new ByteArrayInputStream(tmpArray);
            ObjectInputStream objIn = new ObjectInputStream(ByteIn);
            Dossier_T dossierinit = (Dossier_T) objIn.readObject();
            objIn.close();
/// System.out.println("dossier                  dddddddddddddd "+dossierinit.toString());
            setDossierInit(dossierinit);
        } catch (java.io.IOException in) {
            in.printStackTrace();
        } catch (java.lang.ClassNotFoundException cn) {
            cn.printStackTrace();
        }


    }


    private void postInit() {
//     grp_TPane_dispPane.setFocusable(false);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        grp_Pan_NorthPan = new javax.swing.JPanel();
        grp_Pan_StatusPan = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        grp_Label_datecrea = new javax.swing.JLabel();
        grp_Label_numdossier = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        grp_Label_datedepart = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        grp_Label_datefin = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        grp_Label_status = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        grp_Label_typeb = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        grp_Label_nomclient = new javax.swing.JLabel();
        tamere = new javax.swing.JLabel();
        grp_Label_statut2 = new javax.swing.JLabel();
        grp_Button_memo = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        grp_Label_owner = new javax.swing.JLabel();
        grp_Label_Passager = new javax.swing.JLabel();
        grp_Label_Passager_nbr = new javax.swing.JLabel();
        grp_Label_nuite = new javax.swing.JLabel();
        grp_Label_nuite_nbr = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        grp_Pan_CenterPan = new javax.swing.JPanel();
        grp_TPane_dispPane = new javax.swing.JTabbedPane();
        grp_Pan_SouthPan = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        grp_Label_Total = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        grp_Label_montantTva = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jLabel217 = new javax.swing.JLabel();
        jLabel218 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel211 = new javax.swing.JLabel();
        jLabel212 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel213 = new javax.swing.JLabel();
        jLabel214 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jLabel215 = new javax.swing.JLabel();
        jLabel216 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle(java.util.ResourceBundle.getBundle("srcastra/astra/locale/IFrame", currentUser.getLangage()).getString("IF_Dossier"));
        setName(java.util.ResourceBundle.getBundle("srcastra/astra/locale/IFrame").getString("IF_Client"));
        setPreferredSize(new java.awt.Dimension(730, 520));
        setVisible(true);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                formFocusLost(evt);
            }
        });
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }

            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }

            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }

            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }

            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }

            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }

            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        grp_Pan_NorthPan.setLayout(new java.awt.BorderLayout());

        grp_Pan_NorthPan.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(4, 4, 4, 4)));
        grp_Pan_StatusPan.setLayout(new java.awt.GridLayout(1, 2));

        grp_Pan_StatusPan.setBackground(java.awt.Color.white);
        grp_Pan_StatusPan.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        grp_Pan_StatusPan.setPreferredSize(new java.awt.Dimension(419, 48));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(java.awt.Color.white);
        jPanel2.setMinimumSize(new java.awt.Dimension(139, 50));
        jPanel2.setPreferredSize(new java.awt.Dimension(139, 50));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setOpaque(false);
        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel2.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleDossier/Dossier", currentUser.getLangage()).getString("grp_Label_reference"));
        jLabel2.setMinimumSize(new java.awt.Dimension(90, 14));
        jLabel2.setPreferredSize(new java.awt.Dimension(50, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel3.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleDossier/Dossier", currentUser.getLangage()).getString("grp_Label_creation"));
        jLabel3.setMinimumSize(new java.awt.Dimension(90, 14));
        jLabel3.setPreferredSize(new java.awt.Dimension(70, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
        jPanel1.add(jLabel3, gridBagConstraints);

        grp_Label_datecrea.setFont(new java.awt.Font("Tahoma", 0, 10));
        grp_Label_datecrea.setForeground(new java.awt.Color(204, 0, 0));
        grp_Label_datecrea.setText("10/02/2002");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 21);
        jPanel1.add(grp_Label_datecrea, gridBagConstraints);

        grp_Label_numdossier.setFont(new java.awt.Font("Tahoma", 0, 10));
        grp_Label_numdossier.setForeground(new java.awt.Color(204, 0, 0));
        grp_Label_numdossier.setText("Rfz440");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel1.add(grp_Label_numdossier, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel5.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleDossier/Dossier", currentUser.getLangage()).getString("grp_Label_depart"));
        jLabel5.setPreferredSize(new java.awt.Dimension(70, 13));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        jPanel1.add(jLabel5, gridBagConstraints);

        grp_Label_datedepart.setFont(new java.awt.Font("Tahoma", 0, 10));
        grp_Label_datedepart.setForeground(new java.awt.Color(204, 0, 0));
        grp_Label_datedepart.setText("25/03/2002");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 21);
        jPanel1.add(grp_Label_datedepart, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel7.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleDossier/Dossier", currentUser.getLangage()).getString("grp_Label_retour"));
        jLabel7.setPreferredSize(new java.awt.Dimension(70, 13));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        jPanel1.add(jLabel7, gridBagConstraints);

        grp_Label_datefin.setFont(new java.awt.Font("Tahoma", 0, 10));
        grp_Label_datefin.setForeground(new java.awt.Color(204, 0, 0));
        grp_Label_datefin.setText("03/04/2002");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 20);
        jPanel1.add(grp_Label_datefin, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel9.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleDossier/Dossier", currentUser.getLangage()).getString("grp_Label_Statut"));
        jLabel9.setPreferredSize(new java.awt.Dimension(70, 13));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jLabel9, gridBagConstraints);

        grp_Label_status.setFont(new java.awt.Font("Tahoma", 0, 10));
        grp_Label_status.setForeground(new java.awt.Color(204, 0, 0));
        grp_Label_status.setText("jLabel10");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(grp_Label_status, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel11.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleDossier/Dossier", currentUser.getLangage()).getString("grp_Label_TypeB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        jPanel1.add(jLabel11, gridBagConstraints);

        grp_Label_typeb.setFont(new java.awt.Font("Tahoma", 0, 10));
        grp_Label_typeb.setForeground(new java.awt.Color(204, 0, 0));
        grp_Label_typeb.setText("jLabel12");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        jPanel1.add(grp_Label_typeb, gridBagConstraints);

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel14.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleDossier/Dossier", currentUser.getLangage()).getString("grp_Label_nomclient"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        jPanel1.add(jLabel14, gridBagConstraints);

        grp_Label_nomclient.setFont(new java.awt.Font("Tahoma", 0, 10));
        grp_Label_nomclient.setForeground(new java.awt.Color(204, 0, 0));
        grp_Label_nomclient.setText("De Groote Alexandre");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 13);
        jPanel1.add(grp_Label_nomclient, gridBagConstraints);

        tamere.setFont(new java.awt.Font("Tahoma", 0, 10));
        tamere.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleDossier/Dossier", currentUser.getLangage()).getString("grp_Label_etat"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        jPanel1.add(tamere, gridBagConstraints);

        grp_Label_statut2.setFont(new java.awt.Font("Tahoma", 0, 10));
        grp_Label_statut2.setForeground(new java.awt.Color(204, 0, 0));
        grp_Label_statut2.setPreferredSize(new java.awt.Dimension(80, 13));
        jPanel1.add(grp_Label_statut2, new java.awt.GridBagConstraints());

        grp_Button_memo.setBackground(new java.awt.Color(255, 255, 255));
        grp_Button_memo.setFont(new java.awt.Font("Tahoma", 0, 10));
        grp_Button_memo.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleDossier/Dossier").getString("butmemo"));
        grp_Button_memo.setPreferredSize(new java.awt.Dimension(110, 15));
        grp_Button_memo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grp_Button_memoActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(grp_Button_memo, gridBagConstraints);

        jPanel2.add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBackground(new java.awt.Color(204, 0, 0));
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setPreferredSize(new java.awt.Dimension(298, 15));
        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 10));
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Owner");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        jPanel3.add(jLabel4, gridBagConstraints);

        grp_Label_owner.setFont(new java.awt.Font("Tahoma", 1, 10));
        grp_Label_owner.setForeground(new java.awt.Color(255, 255, 0));
        grp_Label_owner.setPreferredSize(new java.awt.Dimension(68, 13));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 50);
        jPanel3.add(grp_Label_owner, gridBagConstraints);

        grp_Label_Passager.setFont(new java.awt.Font("Tahoma", 1, 10));
        grp_Label_Passager.setForeground(new java.awt.Color(255, 255, 255));
        grp_Label_Passager.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleDossier/DossierGeneralInfoPane").getString("grp_Label_Passager"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 0);
        jPanel3.add(grp_Label_Passager, gridBagConstraints);

        grp_Label_Passager_nbr.setFont(new java.awt.Font("Tahoma", 1, 10));
        grp_Label_Passager_nbr.setForeground(new java.awt.Color(255, 255, 0));
        grp_Label_Passager_nbr.setPreferredSize(new java.awt.Dimension(30, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 50);
        jPanel3.add(grp_Label_Passager_nbr, gridBagConstraints);

        grp_Label_nuite.setFont(new java.awt.Font("Tahoma", 1, 10));
        grp_Label_nuite.setForeground(new java.awt.Color(255, 255, 255));
        grp_Label_nuite.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleDossier/DossierGeneralInfoPane").getString("grp_Label_nuite"));
        jPanel3.add(grp_Label_nuite, new java.awt.GridBagConstraints());

        grp_Label_nuite_nbr.setFont(new java.awt.Font("Tahoma", 1, 10));
        grp_Label_nuite_nbr.setForeground(new java.awt.Color(255, 255, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 50);
        jPanel3.add(grp_Label_nuite_nbr, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 10));
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleDossier/DossierGeneralInfoPane").getString("echeance"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        jPanel3.add(jLabel13, gridBagConstraints);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 10));
        jLabel15.setForeground(new java.awt.Color(255, 255, 0));
        jLabel15.setText("25/02/2002");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 70);
        jPanel3.add(jLabel15, gridBagConstraints);

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 10));
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("NBJ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        jPanel3.add(jLabel16, gridBagConstraints);

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 10));
        jLabel17.setForeground(new java.awt.Color(255, 255, 0));
        jLabel17.setText("10");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel3.add(jLabel17, gridBagConstraints);

        jPanel2.add(jPanel3, java.awt.BorderLayout.SOUTH);

        grp_Pan_StatusPan.add(jPanel2);

        grp_Pan_NorthPan.add(grp_Pan_StatusPan, java.awt.BorderLayout.CENTER);

        getContentPane().add(grp_Pan_NorthPan, java.awt.BorderLayout.NORTH);

        grp_Pan_CenterPan.setLayout(new java.awt.GridLayout(1, 0));

        grp_TPane_dispPane.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        grp_TPane_dispPane.setRequestFocusEnabled(false);
        grp_Pan_CenterPan.add(grp_TPane_dispPane);

        getContentPane().add(grp_Pan_CenterPan, java.awt.BorderLayout.CENTER);

        grp_Pan_SouthPan.setLayout(new java.awt.GridLayout(1, 0));

        grp_Pan_SouthPan.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jPanel4.setBackground(new java.awt.Color(204, 0, 0));
        jPanel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jPanel15.setBackground(new java.awt.Color(204, 0, 0));
        jPanel15.setMinimumSize(new java.awt.Dimension(335, 13));
        jPanel15.setPreferredSize(new java.awt.Dimension(450, 13));
        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 3, 0));

        jPanel5.setOpaque(false);
        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 10));
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleDossier/DossierGeneralInfoPane", getCurrentUser().getLangage()).getString("total"));
        jPanel5.add(jLabel18);

        grp_Label_Total.setFont(new java.awt.Font("Tahoma", 1, 10));
        grp_Label_Total.setForeground(new java.awt.Color(255, 255, 0));
        grp_Label_Total.setText("0 \u20ac");
        jPanel5.add(grp_Label_Total);

        jPanel15.add(jPanel5);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 3, 0));

        jPanel9.setOpaque(false);
        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 10));
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleDossier/DossierGeneralInfoPane").getString("Paye"));
        jPanel9.add(jLabel6);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 10));
        jLabel8.setForeground(new java.awt.Color(255, 255, 0));
        jLabel8.setText("0 \u20ac");
        jPanel9.add(jLabel8);

        jPanel15.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 3, 0));

        jPanel10.setOpaque(false);
        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 10));
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleDossier/DossierGeneralInfoPane").getString("solde"));
        jPanel10.add(jLabel10);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 10));
        jLabel12.setForeground(new java.awt.Color(255, 255, 0));
        jLabel12.setText("0 \u20ac");
        jPanel10.add(jLabel12);

        jPanel15.add(jPanel10);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 3, 0));

        jPanel6.setOpaque(false);
        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 10));
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleDossier/DossierGeneralInfoPane", getCurrentUser().getLangage()).getString("montant_tva"));
        jPanel6.add(jLabel19);

        grp_Label_montantTva.setFont(new java.awt.Font("Tahoma", 1, 10));
        grp_Label_montantTva.setForeground(new java.awt.Color(255, 255, 0));
        grp_Label_montantTva.setText("0 \u20ac");
        jPanel6.add(grp_Label_montantTva);

        jPanel15.add(jPanel6);

        jPanel4.add(jPanel15);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jPanel14.setBackground(new java.awt.Color(204, 0, 0));
        jPanel14.setPreferredSize(new java.awt.Dimension(100, 13));
        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 0));

        jPanel7.setBackground(new java.awt.Color(204, 0, 0));
        jPanel7.setPreferredSize(new java.awt.Dimension(95, 13));
        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 10));
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("doc");
        jLabel21.setPreferredSize(new java.awt.Dimension(20, 13));
        jPanel7.add(jLabel21);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel1.setForeground(new java.awt.Color(255, 255, 0));
        jLabel1.setPreferredSize(new java.awt.Dimension(15, 13));
        jPanel7.add(jLabel1);

        jPanel14.add(jPanel7);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jPanel13.setBackground(new java.awt.Color(204, 0, 0));
        jPanel13.setPreferredSize(new java.awt.Dimension(60, 13));
        jLabel217.setFont(new java.awt.Font("Tahoma", 1, 10));
        jLabel217.setForeground(new java.awt.Color(255, 255, 255));
        jLabel217.setText("Nbr conf");
        jLabel217.setPreferredSize(new java.awt.Dimension(35, 13));
        jPanel13.add(jLabel217);

        jLabel218.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel218.setForeground(new java.awt.Color(255, 255, 0));
        jLabel218.setPreferredSize(new java.awt.Dimension(15, 13));
        jPanel13.add(jLabel218);

        jPanel14.add(jPanel13);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 0));

        jPanel8.setBackground(new java.awt.Color(204, 0, 0));
        jPanel8.setPreferredSize(new java.awt.Dimension(60, 13));
        jLabel211.setFont(new java.awt.Font("Tahoma", 1, 10));
        jLabel211.setForeground(new java.awt.Color(255, 255, 255));
        jLabel211.setText("Nbr F");
        jLabel211.setPreferredSize(new java.awt.Dimension(35, 13));
        jPanel8.add(jLabel211);

        jLabel212.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel212.setForeground(new java.awt.Color(255, 255, 0));
        jLabel212.setPreferredSize(new java.awt.Dimension(15, 13));
        jPanel8.add(jLabel212);

        jPanel14.add(jPanel8);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 0));

        jPanel11.setBackground(new java.awt.Color(204, 0, 0));
        jPanel11.setPreferredSize(new java.awt.Dimension(60, 13));
        jLabel213.setFont(new java.awt.Font("Tahoma", 1, 10));
        jLabel213.setForeground(new java.awt.Color(255, 255, 255));
        jLabel213.setText("Nbr Nc");
        jLabel213.setPreferredSize(new java.awt.Dimension(35, 13));
        jPanel11.add(jLabel213);

        jLabel214.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel214.setForeground(new java.awt.Color(255, 255, 0));
        jLabel214.setPreferredSize(new java.awt.Dimension(15, 13));
        jPanel11.add(jLabel214);

        jPanel14.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 0));

        jPanel12.setBackground(new java.awt.Color(204, 0, 0));
        jPanel12.setPreferredSize(new java.awt.Dimension(60, 13));
        jLabel215.setFont(new java.awt.Font("Tahoma", 1, 10));
        jLabel215.setForeground(new java.awt.Color(255, 255, 255));
        jLabel215.setText("Nbr Fs");
        jLabel215.setPreferredSize(new java.awt.Dimension(35, 13));
        jPanel12.add(jLabel215);

        jLabel216.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel216.setForeground(new java.awt.Color(255, 255, 0));
        jLabel216.setPreferredSize(new java.awt.Dimension(15, 13));
        jPanel12.add(jLabel216);

        jPanel14.add(jPanel12);

        jPanel4.add(jPanel14);

        grp_Pan_SouthPan.add(jPanel4);

        getContentPane().add(grp_Pan_SouthPan, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void grp_Button_memoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_Button_memoActionPerformed
        new MemoFrame(getSuperOwner(), true, this).show();
        chargeStatusPanel();
    }//GEN-LAST:event_grp_Button_memoActionPerformed

    private void formFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusLost
// new javax.swing.JOptionPane().showConfirmDialog(this,"Dossier module is losing de fucking focus");        // Add your handling code here:
    }//GEN-LAST:event_formFocusLost

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        requestFocus();
//if(currentPanel instanceof srcastra.astra.gui.modules.dossier.productSpecification.gestionnairepaneaux.ProductLayeredPanel){
//   System.out.println("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[on est un mainpanel");
// actionToolBar.setActionEnabled(currentPanel.getDefaultActionToolBarMask());

// }// Add your handling code here:
    }//GEN-LAST:event_formInternalFrameActivated

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
//   new javax.swing.JOptionPane().showMessageDialog(null,"j'ai le focus");
// System.out.println("dossiermodule foc");// Add your handling code here:        // Add your handling code here:
    }//GEN-LAST:event_formFocusGained

    private void initIndexComponents() {
        grp_Pan_DossierIndex = new DossierIndex(this);
        this.setPreferredSize(new java.awt.Dimension(730, 500));
        this.setMaximizable(false);
        this.setIconifiable(true);
        this.setClosable(true);
        this.setResizable(false);
        this.getContentPane().setLayout(new java.awt.GridLayout(1, 0));
        this.getContentPane().add(grp_Pan_DossierIndex);
        pack();
        grp_Pan_DossierIndex.displayReadMode();
        selectedPanel = INDEX;
    }

    public void displayGeneralInfosPane() {
        nextScreen(-1, false);
    }

    public void doDefaultCloseAction() {
        try {
            getServeur().renvDossierRmiObject(getCurrentUser().getUrcleunik()).remoteUnlock(getMainframe().getSelectedDossier());

        } catch (srcastra.astra.sys.rmi.Exception.ServeurSqlFailure se) {
            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se);
        } catch (java.rmi.RemoteException re) {
            re.printStackTrace();
            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);
        }
        if (getCurrentPanel() instanceof DossierProduitPane) {
            java.util.Vector tmp = (java.util.Vector) this.popupHashtable.get(new Integer(1));
            for (int i = 0; i < tmp.size(); i++) {
                javax.swing.JPopupMenu tmpPopup = (javax.swing.JPopupMenu) tmp.get(i);
                if (tmpPopup != null)
                    if (tmpPopup.isVisible())
                        tmpPopup.setVisible(false);
                //  cancelModule();
            }
        }
        if (getDossier() != null) {
            if (getDossier().isNewreccord() || getDossier().isModifreccord()) {
                int rep = getMessageManager().showConfirmDialog(this, "dos_annul_new", "dos_annul", getCurrentUser());
                if (rep == 0) {
                    closingSignalToMainFrame();
//  getMainframe().getGrp_mcp_mainpan().removeInternalFrame(this);
// dispose();
                }
            } else {
                closingSignalToMainFrame();
//getMainframe().getGrp_mcp_mainpan().removeInternalFrame(this);
// dispose();
            }
        } else {
            closingSignalToMainFrame();
// getMainframe().getGrp_mcp_mainpan().removeInternalFrame(this);
// dispose();
        }
    }

    private void closingSignalToMainFrame() {
        try {
            serveur.remoterollback(getCurrentUser().getUrcleunik());
        } catch (java.rmi.RemoteException re) {
            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.MISSING_RESSOURCE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);
        }
        InternalFrameEvent closeWindow = new InternalFrameEvent(this, InternalFrameEvent.INTERNAL_FRAME_CLOSING);
        this.iFrameListener.internalFrameClosing(closeWindow);
        dispose();
    }

    public void getTheLostFocus() {
        javax.swing.event.InternalFrameEvent evt = new javax.swing.event.InternalFrameEvent(this, InternalFrameEvent.INTERNAL_FRAME_ACTIVATED);
        this.formInternalFrameActivated(evt);
    }

    public void nextScreen(int currentScreen) {
        int cs = ((currentScreen + 1) > screenDisplaying.length) ? 0 : currentScreen + 1;
        screenDisplaying[cs].setAction(1);
        screenDisplaying[cs].setFrCleunik(this.clCleunik);
        screenDisplaying[cs].displayInsertMode();
        screenDisplaying[cs].chargeData();
        screenDisplaying[cs].setEnabled(false);
        screenDisplaying[cs].setRequestFocusEnabled(false);
        screenDisplaying[cs].setThisAsToolBarComponent();
        grp_TPane_dispPane.addTab(screenDisplaying[cs].getTitle(), (java.awt.Component) screenDisplaying[cs]);
        grp_TPane_dispPane.setSelectedComponent((java.awt.Component) screenDisplaying[cs]);
    }

    public void nextScreen(int currentScreen, int insert) {
        int cs = ((currentScreen + 1) > screenDisplaying.length) ? 0 : currentScreen + 1;
        screenDisplaying[cs].setAction(1);
        screenDisplaying[cs].setFrCleunik(this.clCleunik);
        if (insert == 1)
            screenDisplaying[cs].displayInsertMode();
        else
            screenDisplaying[cs].displayReadMode();
        screenDisplaying[cs].chargeData();
        screenDisplaying[cs].setEnabled(false);
        screenDisplaying[cs].setRequestFocusEnabled(false);
        screenDisplaying[cs].setThisAsToolBarComponent();
        grp_TPane_dispPane.addTab(screenDisplaying[cs].getTitle(), (java.awt.Component) screenDisplaying[cs]);
        grp_TPane_dispPane.setSelectedComponent((java.awt.Component) screenDisplaying[cs]);
    }

    public void nextSpecificScreen(int i) {
        grp_TPane_dispPane.setSelectedComponent((java.awt.Component) screenDisplaying[i]);
    }
//  private void Defa


    public void nextScreen(int currentScreen, boolean affich) {
        int cs = ((currentScreen + 1) > screenDisplaying.length) ? 0 : currentScreen + 1;
        if (!affich) {
            screenDisplaying[cs].setAction(1);
//screenDisplaying[cs].setLibellé("Insérer le dossier");
            screenDisplaying[cs].setFrCleunik(this.clCleunik);
            screenDisplaying[cs].displayInsertMode();
            screenDisplaying[cs].setEnabled(false);
            screenDisplaying[cs].setRequestFocusEnabled(false);
            screenDisplaying[cs].chargeData();
            screenDisplaying[cs].setThisAsToolBarComponent();
            grp_TPane_dispPane.addTab(screenDisplaying[cs].getTitle(), (java.awt.Component) screenDisplaying[cs]);
        } else {
            displayReadSequence(this.clCleunik);
        }
    }

    /**
     * De l'interface : MainScreenModule
     * fixe la clé unik selon le contexte
     */
    public void setContextCleUnik(int ContextCleUnik) {
        this.clCleunik = ContextCleUnik;
    }

    public void displayDeleteSequence() {
    }

    public void displayReadSequence(int cleUnik) {
        this.clCleunik = cleUnik;
        this.getContentPane().removeAll();
        loadScreen();
        this.getContentPane().setLayout(new java.awt.BorderLayout());
        initComponents();
        postInit();
        grp_Pan_StatusPan.setVisible(true);
        this.updateUI();
        for (int i = 0; i < screenDisplaying.length; i++) {
            grp_TPane_dispPane.addTab(screenDisplaying[i].getTitle(), (java.awt.Component) screenDisplaying[i]);
            screenDisplaying[i].setAction(0);
            screenDisplaying[i].setFrCleunik(cleUnik);
// screenDisplaying[i].addKeystroque();
            if (i == 0) {
                grp_TPane_dispPane.setSelectedComponent((java.awt.Component) screenDisplaying[i]);
                screenDisplaying[i].displayReadMode();
//    ((javax.swing.JPanel)screenDisplaying[i]).requestFocus();
            }
        }
        selectedPanel = OTHER;
        grp_Button_memo.setMnemonic(KeyEvent.VK_F10);
    }

    public Object renvObjectSelectedInTable(javax.swing.JTable table) {
//Hashtable tableauTableModel=new Hashtable(0);
//tableauTableModel.put(T_MODEL_INDEX_DOSSIER,new DossierIndexTableModel());
        DossierTableModelInterface tmpModel = (DossierTableModelInterface) table.getModel();//tableModel;
        ArrayList tmpArray = tmpModel.getData();
        int numrow = table.getSelectedRow();
        if (tmpArray != null)
            return tmpArray.get(numrow);
        else
            return null;
    }

    public Object renvObjectSelectedInTable2(javax.swing.JTable table, ArrayList array2) {
//Hashtable tableauTableModel=new Hashtable(0);
//tableauTableModel.put(T_MODEL_INDEX_DOSSIER,new DossierIndexTableModel());
/*  int numrow=table.getSelectedRow();
Object cleunik=table.getValueAt(numrow,-3).toString();
Object TypeProd=table.getValueAt(numrow,-2).toString();
System.out.println("[****************COLLONNE VALUE]"+cleunik.toString()+"        "+TypeProd.toString());
InterfaceProduit tmpProd=null;
ArrayList array=this.dossier.returnCorrectArrayList(Integer.parseInt(TypeProd.toString()));
for(int i=0;i<array.size();i++)
{
tmpProd=(InterfaceProduit)array.get(i);
if(tmpProd.getAt_cleunik()==Long.parseLong(cleunik.toString()))
{   tmpProd.setNumber_int_array(i);
break;
}
}
return tmpProd;*/
        return null;
    }

    public void displayCreateSequence() {
        creatingSequence = true;
        loadScreen();
        this.getContentPane().removeAll();
        this.getContentPane().setLayout(new java.awt.BorderLayout());
        initComponents();
        postInit();
        grp_Pan_StatusPan.setVisible(false);
        this.updateUI();
        displayGeneralInfosPane();
    }

    public void closeModule() {
        this.doDefaultCloseAction();
    }

    public void cancelModule() {
        try {

            getServeur().renvDossierRmiObject(getCurrentUser().getUrcleunik()).remoteUnlock(getMainframe().getSelectedDossier());
            getServeur().remoterollback(getCurrentUser().getUrcleunik());
        } catch (srcastra.astra.sys.rmi.Exception.ServeurSqlFailure se) {
            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se);
        } catch (java.rmi.RemoteException re) {
            re.printStackTrace();
            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);
        }
        this.getContentPane().removeAll();
// this.getContentPane().setLayout(new java.awt.BorderLayout());
        initIndexComponents();
        this.updateUI();
    }

    /**
     * Permet de changer l'état de la TabbedPane dans le pricipal
     */
    public void enabledTabbedPane(boolean enabled) {

        grp_TPane_dispPane.setEnabled(enabled);
    }

    /**
     * Permet de charger le panel des statuts
     */
    public void chargeStatusPanel() {
        String[] statuts = setValueForStatusPanel();
        grp_Label_numdossier.setText(statuts[0]);
        grp_Label_nomclient.setText(statuts[1]);
        grp_Label_datecrea.setText(statuts[2]);
        grp_Label_datedepart.setText(statuts[3]);
        grp_Label_datefin.setText(statuts[4]);
        grp_Label_status.setText(statuts[5]);
        grp_Label_typeb.setText(statuts[6]);
        jLabel15.setText(statuts[7]);
        jLabel17.setText(statuts[8]);
        if (getDossier().getMemo() != null) {
            if (!getDossier().getMemo().isEmpty()) {
                grp_Button_memo.setForeground(new java.awt.Color(0, 51, 153));
                grp_Button_memo.setFont(new java.awt.Font("tahoma", java.awt.Font.BOLD, 10));
            } else {
                if (getDossier().getMemo().isEmpty()) {
                    grp_Button_memo.setForeground(new java.awt.Color(0, 0, 0));
                    grp_Button_memo.setFont(new java.awt.Font("tahoma", java.awt.Font.PLAIN, 10));
                }
            }
        } else {
            grp_Button_memo.setForeground(new java.awt.Color(0, 0, 0));
            grp_Button_memo.setFont(new java.awt.Font("tahoma", java.awt.Font.PLAIN, 10));
        }
        if (getDossier() != null) {
            if (getDossier().getAnnuler() == 1) {
                grp_Label_statut2.setText("A");
            } else if (getDossier().getServicefact() == 1) {
                grp_Label_statut2.setText("S");
            } else if (getDossier().getDr_facture() == 1) {
                String facture = "";
                if (getDossier().getNumfact() != null)
                    facture = getDossier().getNumfact();

                grp_Label_statut2.setText("F" + " " + facture);
            } else if (getDossier().getDr_bcd() == 1) {
                grp_Label_statut2.setText("B");
            }
            if (getDossier().getCreator() != null)
                grp_Label_owner.setText("" + getDossier().getCreator().getUrnom());
            if (getDossier().getPassager() != null)
                grp_Label_Passager_nbr.setText("" + getDossier().getPassagerNumber());
            grp_Label_nuite_nbr.setText("" + getDossier().getDr_nbrenuit());
        }

        grp_Pan_StatusPan.setVisible(true);
    }

    public void chargeStatusPanel(String[] statuts) {
    }

    /**
     * Permet de renvoyer un objet frame pour un eventuel modal
     */
    public java.awt.Frame getFrame() {
        return frameP;
    }

    DossierProduitPane dossprod;
    DossierGeneralInfoPane dossgen;
    DossierPaiementPane dosspay;

    public void loadScreen() {
        dossprod = new DossierProduitPane(this);
        dossgen = new DossierGeneralInfoPane(this);
        dosspay = new DossierPaiementPane(this);
//if(this.screenDisplaying==null)
        this.screenDisplaying = new InternScreenModule[]{
                dossgen,
                dossprod,
                dosspay
/*new ClientGeneralInfoPane(serveur, currentUser, this, actionToolBar),
new ClientAdressePane(serveur, currentUser, this, actionToolBar),
new ClientRemisesPane(serveur, currentUser, this, actionToolBar),
new ClientMemoPane(serveur, currentUser, this, actionToolBar, clCleunik)*/
        };
    }

    public void setMenuProduit(boolean sw) {
/*   javax.swing.JMenu paramMenu=this.mainframe.getGrp_Menu_parametre();
paramMenu.setEnabled(sw);
paramMenu=this.mainframe.getGrp_Menu_produit();
paramMenu.setEnabled(sw);
javax.swing.JMenuItem paramMenuItem=this.mainframe.getGrp_MenuItem_Groupe_Dec();
paramMenuItem.setEnabled(sw);   */
    }

    /**
     * Getter for property currentPanel.
     *
     * @return Value of property currentPanel.
     */
    public srcastra.astra.gui.components.actions.actionToolBar.ToolBarComposer getCurrentPanel() {
        return currentPanel;
    }

    /**
     * Setter for property currentPanel.
     */
    public void requestOwnFocus() {
        requestFocus();
    }

    public void setCurrentPanel(srcastra.astra.gui.components.actions.actionToolBar.ToolBarComposer currentPanel) {
        this.currentPanel = currentPanel;
        actionToolBar.setTbComposer(currentPanel);
// requestFocus();
// ((JPanel)currentPanel).requestFocus();
    }

    public void lockedToolBar(boolean locked) {
        actionToolBar.setM_locked(locked);
    }

    public void reloadToolBarInfo() {
        actionToolBar.setTbComposer(this.currentPanel);
        actionToolBar.reloadActionEnabled(this.currentActionEnabled);
        System.out.println("reload les infos de la toolBar");
    }

    public void saveToolBarInfo() {
        System.out.println("sauve les infos de la toolBar");
    }

    public void setCurrentActionEnabled(int[] actionEnabled) {
        produit_T tmp = null;
        actionToolBar.setActionEnabled(actionEnabled);
        this.currentActionEnabled = this.actionToolBar.getActionEnabled();
//   if(actionEnabled[0]==8 && actionEnabled.length==1)
//        System.out.println("faute"+tmp.getAt_val_vente());
    }

    public void setOldActionEnabled(int[] actionEnabled) {
        Object tmp = null;
//if(actionEnabled.equals(new int[]{ActionToolBar.DO_CANCEL}))
//  System.out.println("faute"+tmp.getClass());
        actionToolBar.reloadActionEnabled(actionEnabled);
        this.currentActionEnabled = this.actionToolBar.getActionEnabled();
    }


    /**
     * Getter for property superOwner.
     *
     * @return Value of property superOwner.
     */
    public java.awt.Frame getSuperOwner() {
        return superOwner;
    }

    /**
     * Setter for property superOwner.
     *
     * @param superOwner New value of property superOwner.
     */
    public void setSuperOwner(java.awt.Frame superOwner) {
        this.superOwner = superOwner;
    }

    /**
     * Indexed getter for property currentActionEnabled.
     *
     * @param index Index of the property.
     * @return Value of the property at <CODE>index</CODE>.
     */
    public int getCurrentActionEnabled(int index) {
        return currentActionEnabled[index];
    }

    /**
     * Getter for property currentActionEnabled.
     *
     * @return Value of property currentActionEnabled.
     */
    public int[] getCurrentActionEnabled() {
        return currentActionEnabled;
    }

    /**
     * Indexed setter for property currentActionEnabled.
     *
     * @param index                Index of the property.
     * @param currentActionEnabled New value of the property at <CODE>index</CODE>.
     */
    public void setCurrentActionEnabled(int index, int currentActionEnabled) {
        this.currentActionEnabled[index] = currentActionEnabled;
    }

    /**
     * Getter for property clCleunik.
     *
     * @return Value of property clCleunik.
     */
    public int getClCleunik() {
        return clCleunik;
    }

    /**
     * Setter for property clCleunik.
     *
     * @param clCleunik New value of property clCleunik.
     */
    public void setClCleunik(int clCleunik) {
        this.clCleunik = clCleunik;
    }

    public astrainterface getServeur() {
        return this.serveur;
    }

    public Loginusers_T getCurrentUser() {
        return this.currentUser;
    }

    public void changeCursor(int changeLocation, java.awt.Cursor cursor) {
        srcastra.astra.gui.sys.utils.CursorChange.changeCursor(changeLocation, cursor, superOwner, this);
    }

    public Dossier_T getDossier() {
        return this.dossier;
    }

    public DossierRmiInterface getServeurDossier() {
        return this.serveurDossier;
    }

    public void setDossier(Dossier_T dossier) {
        this.dossier = dossier;
    }

    /**
     * Setter for property currentUser.
     *
     * @param currentUser New value of property currentUser.
     */
    public void setCurrentUser(srcastra.astra.sys.classetransfert.Loginusers_T currentUser) {
        this.currentUser = currentUser;
    }

    /**
     * Getter for property mess.
     *
     * @return Value of property mess.
     */
    public srcastra.astra.gui.sys.MessageManager getMessageManager() {
        if (this.mess == null)
            this.mess = new MessageManager();
        return mess;
    }

    /**
     * Getter for property mainframe.
     *
     * @return Value of property mainframe.
     */
    public srcastra.astra.gui.MainFrame getMainframe() {
        return mainframe;
    }

    /**
     * Setter for property mainframe.
     *
     * @param mainframe New value of property mainframe.
     */
    public void setMainframe(srcastra.astra.gui.MainFrame mainframe) {
        this.mainframe = mainframe;
    }

    /**
     * Getter for property ticket.
     *
     * @return Value of property ticket.
     */
    public Avion_ticket_T getTicket() {
        return ticket;
    }

    /**
     * Setter for property ticket.
     *
     * @param ticket New value of property ticket.
     */
    public void setTicket(Avion_ticket_T ticket) {
        this.ticket = ticket;
    }

    public boolean isAfterCreation() {
        return afterCreation;
    }

    public void setAfterCreation(boolean afterCreation) {
        this.afterCreation = afterCreation;
    }

    /**
     * Getter for property ticketcompteur.
     *
     * @return Value of property ticketcompteur.
     */
    public long getTicketcompteur() {
        return ticketcompteur;
    }

    public long getCarcompteur() {
        return carCompteur;
    }

    /**
     * Setter for property ticketcompteur.
     *
     */
    public void decrementeTicketcompteur() {
        this.ticketcompteur = ticketcompteur - 1;
    }

    public void decrementeCarcompteur() {
        this.carCompteur = carCompteur - 1;
    }

    /**
     * Getter for property supReducCompteur.
     *
     * @return Value of property supReducCompteur.
     */
    public long getSupReducCompteur() {
        return supReducCompteur;
    }

    /**
     * Setter for property supReducCompteur.
     *
     */
    public void decrementSupReducCompteur() {
        this.supReducCompteur = supReducCompteur - 1;
    }

    /**
     * Setter for property mess.
     *
     */
    public void updateDossier() {
        if (getDossier().isModifreccord() == false && getDossier().isListPassagerModif() == false)
            getMessageManager().showMessageDialog(this, "dos_no_mod_text", "dos_no_mod", getCurrentUser());
        else {
            try {
                changeCursor(CursorChange.CHANGE_CURSOR_EVERYWHERE, new Cursor(Cursor.WAIT_CURSOR));
                if (getMainframe().isRattrap()) {
                    getDossier().setRattrap(true);
                    getMainframe().setRattrap(false);
                } else
                    getDossier().setRattrap(false);
                calculTotal();
                srcastra.astra.sys.compta.CheckSum_T check = (srcastra.astra.sys.compta.CheckSum_T) getServeurDossier().modifyDossier(getCurrentUser().getUrcleunik(), getDossier(), getCurrentUser());
                java.util.ArrayList returndossier = getServeurDossier().chargeDossier(getCurrentUser(), getDossier().getDrcleunik(), true);
                //  int nbj=getDossier().getDr_nbj_av_eche();
                //  srcastra.astra.sys.classetransfert.utils.Date d=getDossier().getDr_date_echeance();

                boolean groupe = getDossier().isGroupe();

                //System.out.println(getDossier().isGroupe());

                setDossier((Dossier_T) returndossier.get(0));

                getDossier().setGroupe(groupe);

                //   getDossier().setDr_nbj_av_eche(nbj);
                //   getDossier().setDr_date_echeance(d);
                System.out.println(getDossier().isGroupe());
                getMainframe().setSelectedDossier(getDossier().getDrcleunik());
                double solde = getServeurDossier().checkSoldeComptaBle(getCurrentUser().getUrcleunik());
                System.out.println(getDossier().isGroupe());
                cloneDossier();
                chargeStatusPanel();
                changeCursor(CursorChange.CHANGE_CURSOR_EVERYWHERE, new Cursor(Cursor.DEFAULT_CURSOR));

                System.out.println(getDossier().isGroupe());

//  srcastra.astra.sys.compta.JcheckSum frame=new srcastra.astra.sys.compta.JcheckSum(getSuperOwner(),false);
// frame.setCheck(check);
//frame.show();
                getMessageManager().showMessageDialog(this, "dos_mod_ok", "dos_mod", getCurrentUser());
                System.out.println(getDossier().isGroupe());
            } catch (srcastra.astra.sys.rmi.Exception.ServeurSqlFailure se) {
                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se, getCurrentUser());
            } catch (java.rmi.RemoteException re) {
                re.printStackTrace();
                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re, getCurrentUser());
            }
        }
    }

    public void refreshTable() {
        if (dossprod != null) {
            dossprod.refreshTable();
        }
        if (dossgen != null) {
            dossgen.refreshPassager();

        }
        if (dosspay != null) {
            dosspay.displayReadMode();
        }
        calculTotal();
    }

    public void insertDossier() {
        try {
            changeCursor(CursorChange.CHANGE_CURSOR_EVERYWHERE, new Cursor(Cursor.WAIT_CURSOR));
            if ((getMainframe().isRattrap() || getMainframe().isModeGroupe()) && !getMainframe().getNCFactService()) {
                getDossier().setRattrap(true);
                String numdos = new javax.swing.JOptionPane().showInputDialog(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleDossier/DossierIndex", getCurrentUser().getLangage()).getString("DIndex_numeroDossier"));
                numdos = numdos.toUpperCase();

                if (getMainframe().isModeGroupe()) {
                    if (numdos.length() < 8) {
                        for (int tt = numdos.length(); tt < 8; tt++)
                            numdos = numdos + " ";

                    }

                    numdos = numdos.substring(0, 8);
                    numdos = numdos + "G0";

                }


                getDossier().setDrnumdos(numdos);
            } else if (!getMainframe().isRattrap() && getMainframe().getNCFactService()) {
                getDossier().setNcFactService(true);
                getDossier().setRattrap(false);
            } else {
                getDossier().setRattrap(false);
                getDossier().setNcFactService(false);
            }
            //acompte();

            java.util.Hashtable returnvalue = getServeurDossier().insertDossier(getCurrentUser().getUrcleunik(), getDossier());
            java.util.ArrayList returndossier = getServeurDossier().chargeDossier(getCurrentUser(), Integer.parseInt(returnvalue.get("id").toString()), true);

            double solde = getServeurDossier().checkSoldeComptaBle(getCurrentUser().getUrcleunik());
            setDossier((Dossier_T) returndossier.get(0));
            getMainframe().setSelectedDossier(getDossier().getDrcleunik());
            getDossier().setNewreccord(false);
            cloneDossier();
// parent.getDossier().setDrcleunik(Integer.parseInt(returnvalue.get("id").toString()));
// parent.getDossier().setDrnumdos((String)returnvalue.get("numdos"));
            changeCursor(CursorChange.CHANGE_CURSOR_EVERYWHERE, new Cursor(Cursor.DEFAULT_CURSOR));
            chargeStatusPanel();
//srcastra.astra.sys.compta.CheckSum_T check=(srcastra.astra.sys.compta.CheckSum_T)returnvalue.get("c");
// srcastra.astra.sys.compta.JcheckSum frame=new srcastra.astra.sys.compta.JcheckSum(getSuperOwner(),false);
// frame.setCheck(check);
///frame.show();
            getMainframe().resetModeGroupe();

            getMessageManager().showMessageDialog(this, "dos_ins_ok", "dos_ins", getCurrentUser());
        } catch (srcastra.astra.sys.rmi.Exception.ServeurSqlFailure se) {
            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se);
        } catch (java.rmi.RemoteException re) {
            re.printStackTrace();
            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);
        }// Add your handling code here:
    }

    public srcastra.astra.sys.classetransfert.utils.Date calculNbjAvantEcheance() {
        return getDossier().calculEcheance();
/*   java.util.Hashtable ticketList=getDossier().getHasharray();
srcastra.astra.sys.classetransfert.utils.Date date=null;
java.util.TreeSet tree=null;
if(dossier.getDr_nbj_av_eche()==0){
if(ticketList!=null)
{

for(java.util.Enumeration enum2=ticketList.keys();enum2.hasMoreElements();){
Hashtable tmp=(Hashtable)ticketList.get(enum2.nextElement());
if(tmp!=null){
for(java.util.Enumeration enu=tmp.keys();enu.hasMoreElements();)
{
if(tree==null)
tree=new java.util.TreeSet();
produit_T prod=(produit_T)tmp.get(enu.nextElement());
tree.add(new Integer(prod.getGroupdec().getGnnbravanteche()));
}
}
}
if(tree!=null){
java.util.Iterator iter=tree.iterator();
if(iter.hasNext());
{
Integer integ=(Integer)iter.next();
getDossier().setDr_nbj_av_eche(integ.intValue());
if(!getDossier().getDr_date_depart().isOpen() && !getDossier().getDr_date_depart().isUnknow()){
date=CalculDate.renvDateEcheance(getDossier().getDr_date_depart(),integ.intValue());
getDossier().setDr_date_echeance(date);
}else
getDossier().setDr_date_echeance(getDossier().getDr_date_depart());
}
}
}

}else{
date=CalculDate.renvDateEcheance(getDossier().getDr_date_depart(),getDossier().getDr_nbj_av_eche());
getDossier().setDr_date_echeance(date);
}
return date;
*/
    }

    private String[] setValueForStatusPanel() {
        Dossier_T dossiertmp = getDossier();
        if (dossiertmp != null) {
            String[] tmpString = new String[9];
            tmpString[0] = "" + dossiertmp.getDrnumdos();
            tmpString[1] = dossiertmp.getClientContractuel().getCsnom();
            if (dossiertmp.getDr_datetimecrea() != null)
                tmpString[2] = dossiertmp.getDr_datetimecrea().toString2();
            else {
                srcastra.astra.sys.classetransfert.utils.Date tmpdate = new srcastra.astra.sys.classetransfert.utils.Date();
                tmpdate.setDay(Calendar.getInstance().get(Calendar.DATE));
                tmpdate.setMonth(Calendar.getInstance().get(Calendar.MONTH));
                tmpdate.setYear(Calendar.getInstance().get(Calendar.YEAR));
                tmpdate.setHours(0);
                tmpdate.setMinutes(0);
                tmpdate.setSeconds(0);
                tmpString[2] = tmpdate.toString2();
            }
            tmpString[3] = dossiertmp.getDr_date_depart().toString2();
            tmpString[4] = dossiertmp.getDr_date_retour().toString2();
            tmpString[5] = new srcastra.astra.gui.sys.listModel.dossierListModel.StatusListModel(getServeur(), getCurrentUser()).getValue(dossiertmp.getDrstatus());
            tmpString[6] = "" + dossiertmp.getDr_type_booking();//+"a arranger";
            srcastra.astra.sys.classetransfert.utils.Date date;

            System.out.println(getDossier().getDr_date_echeance());

            if (getDossier().getDr_date_echeance() != null) {
                if (getDossier().getDr_nbj_av_eche() == 0 && !getDossier().isNewreccord())
                    date = getDossier().getDr_date_echeance();
                else if (getDossier().getDr_nbj_av_eche() == 0 && getDossier().isNewreccord())
                    date = CalculDate.getTodayDate();
                else
                    date = calculNbjAvantEcheance();
            } else
                date = calculNbjAvantEcheance();


            if (date != null) {
                tmpString[7] = date.toString2();
                tmpString[8] = "" + getDossier().getDr_nbj_av_eche();
            } else {
                tmpString[7] = "";
                tmpString[8] = "";
            }
            return tmpString;
        }
        return null;
    }

    public String formatNumber(float data) {
// NumberFormat form=NumberFormat.getInstance();

        NumberFormat form = new DecimalFormat("##########.##");
        System.out.println("format" + ((DecimalFormat) form).toPattern());
// form.setMinimumFractionDigits(2);
//form.setMaximumFractionDigits(2);
//form.setMaximumIntegerDigits(10);
        return form.format(data);

    }

    public String formatNumber(double data) {
// NumberFormat form=NumberFormat.getInstance();

        NumberFormat form = new DecimalFormat("##########.##");
        System.out.println("format" + ((DecimalFormat) form).toPattern());
// form.setMinimumFractionDigits(2);
//form.setMaximumFractionDigits(2);
//form.setMaximumIntegerDigits(10);
        return form.format(data);

    }
    // rené 02/05/2017 rectif caractère 
    public void calculTotal() {
        getDossier().calculTotalProduit();
        setTotalLabelText(getDossier().getDrtotalprix() + " \u20ac");
        setMontantTvaLabelText(getDossier().getDrtva() + " \u20ac");
        getDossier().calculTotalPayement();
        jLabel8.setText(getDossier().getDr_Paye() + " \u20ac");
        double solde = getDossier().getDrtotalprix() - getDossier().getDr_Paye();
        solde = MathRound.roundThisToDouble(solde);
        jLabel12.setText(solde + " \u20ac");
    }

    public double getTot() {
        return getDossier().getLastPrix();
    }


    public void calculTotalUnProduit(produit_T produit) {
        double totalHtva = produit.getValeur_tot();
        double totaltva = produit.getMontant_tva();
        double totaltvainc = produit.getValeur_tot_tva_inc();
        if (!produit.isDeleted()) {
            if (produit.getSup_reduc() != null) {
                for (java.util.Enumeration enu = produit.getSup_reduc().keys(); enu.hasMoreElements();) {
                    srcastra.astra.sys.classetransfert.dossier.Sup_reduc_T supreduc = (Sup_reduc_T) produit.getSup_reduc().get(enu.nextElement());
                    if (!supreduc.isDeleted()) {
                        totalHtva = totalHtva + supreduc.getValeur_tot();
                        totaltva = totaltva + supreduc.getMontant_tva();
                        totaltvainc = totaltvainc + supreduc.getValeur_tot_tva_inc();
                    }
                }
            }
//setTotalLabelText(new Float(totalHtva).toString()+"");
//   setTotalLabelText(formatNumber(totaltvainc)+" ");
// setMontantTvaLabelText(formatNumber(totaltva)+ " ");
//  MathRound.roundThisToFloat(totaltva);
// MathRound.roundThisToFloat(totaltva);
            setTotalLabelText(MathRound.roundThisToDouble(totaltvainc) + " \u20ac");
            setMontantTvaLabelText(MathRound.roundThisToDouble(totaltva) + " \u20ac");
// setTotal_tvacLabelText(formatNumber(totaltvainc)+" ");

        }
    }

    public void setTotalLabelText(String txt) {
        if (txt != null) grp_Label_Total.setText(txt);
    }

    public String getTotalLabelText() {
        return grp_Label_Total.getText();
    }

    public void setTotal_tvacLabelText(String txt) {
//  if (txt != null) grp_Label_Total_tvac.setText(txt);
    }

    public String getTotal_tvacLabelText() {
        return "";//grp_Label_Total_tvac.getText();
    }

    public void setMontantTvaLabelText(String txt) {
        if (txt != null) grp_Label_montantTva.setText(txt);
    }

    public String getMontantTvaLabelText() {
        return grp_Label_montantTva.getText();
    }

    public boolean isCreatingSequence() {
        return creatingSequence;
    }

    /**
     * Getter for property tmpticket.
     *
     * @return Value of property tmpticket.
     */
    public srcastra.astra.sys.classetransfert.dossier.avion.Avion_ticket_T getTmpticket() {
        return tmpticket;
    }

    /**
     * Setter for property tmpticket.
     *
     * @param tmpticket New value of property tmpticket.
     */
    public void setTmpticket(srcastra.astra.sys.classetransfert.dossier.avion.Avion_ticket_T tmpticket) {
        this.tmpticket = tmpticket;
    }

    public long decrementePaymentCompteur() {
        long tmp = this.payementCompteur;
        this.payementCompteur = this.payementCompteur - 1;
        return tmp;
    }

    ///////// ASSURANCE ////////////////////////////////////////////////////////////////////////////////////////////////
    public long getAssuranceCompteur() {
        return assurancecompteur;
    }

    public void setAssurance(Assurance_T assu) {
        assurance = assu;
    }

    public void decrementeAssuranceCompteur() {
        assurancecompteur = assurancecompteur - 1;
    }

    public void setTmpAssurance(Assurance_T tmpAssu) {
        tmpAssurance = tmpAssu;
    }

    public Assurance_T getTmpAssurance() {
        return tmpAssurance;
    }

    public Assurance_T getAssurance() {
        return assurance;
    }


    ///////// BROCHURE ////////////////////////////////////////////////////////////////////////////////////////////////
    public void decrementeBrochureCompteur() {
        brochureCompteur = brochureCompteur - 1;
    }

    public Brochure_T getBrochure() {
        return brochure;
    }

    public long getBrochureCompteur() {
        return brochureCompteur;
    }

    public Brochure_T getTmpBrochure() {
        return tmpBrochure;
    }

    public void setBrochure(Brochure_T broch) {
        brochure = broch;
    }

    public void setTmpBrochure(Brochure_T tmpBroch) {
        tmpBrochure = tmpBroch;
    }


    ///////// HOTEL ////////////////////////////////////////////////////////////////////////////////////////////////
    public void decrementeHotelCompteur() {
        hotelCompteur = hotelCompteur - 1;
    }

    public Hotel_T getHotel() {
        return hotel;
    }

    public long getHotelCompteur() {
        return hotelCompteur;
    }

    public Hotel_T getTmpHotel() {
        return tmpHotel;
    }

    public void setHotel(Hotel_T hot) {
        hotel = hot;
    }

    public void setTmpHotel(Hotel_T tmpHot) {
        tmpHotel = tmpHot;
    }

    ///////// BATEAU ////////////////////////////////////////////////////////////////////////////////////////////////
    public Bateau_T getBateau() {
        return bateau;
    }

    public Bateau_T getTmpBateau() {
        return tmpBateau;
    }

    public void setBateau(Bateau_T bat) {
        this.bateau = bat;
    }

    public void setTmpBateau(Bateau_T tmpBat) {
        this.tmpBateau = tmpBat;
    }

    public void decrementeBateauCompteur() {
        bateauCompteur = bateauCompteur - 1;
    }

    public long getBateauCompteur() {
        return bateauCompteur;
    }

    ///////// TRAIN ////////////////////////////////////////////////////////////////////////////////////////////////
    public void decrementeTrainCompteur() {
        trainCompteur = trainCompteur - 1;
    }

    public Train_T getTmpTrain() {
        return tmpTrain;
    }

    public Train_T getTrain() {
        return train;
    }

    public long getTrainCompteur() {
        return trainCompteur;
    }

    public void setTmpTrain(Train_T tmpTrain) {
        this.tmpTrain = tmpTrain;
    }

    public void setTrain(Train_T train) {
        this.train = train;
    }


    ///////// VOITURE DE LOCATION ////////////////////////////////////////////////////////////////////////////////////////////////
    public void decrementeVoitureLocationCompteur() {
        voitureLocationCompteur = voitureLocationCompteur - 1;
    }


    public VoitureLocation_T getTmpVoitureLocation() {
        return tmpVoitureLocation;
    }

    public VoitureLocation_T getVoitureLocation() {
        return voitureLocation;
    }

    public long getVoitureLocationCompteur() {
        return voitureLocationCompteur;
    }

    public void setTmpVoitureLocation(VoitureLocation_T tmpVoit) {
        tmpVoitureLocation = tmpVoit;
    }

    public void setVoitureLocation(VoitureLocation_T voitureLocation) {
        this.voitureLocation = voitureLocation;
    }

    ///////// TAXI ////////////////////////////////////////////////////////////////////////////////////////////////
    public void decrementeTaxiCompteur() {
        taxiCompteur = taxiCompteur - 1;
    }

    public Taxi_T getTmpTaxi() {
        return tmpTaxi;
    }

    public void setTmpTaxi(Taxi_T tmpTaxi) {
        this.tmpTaxi = tmpTaxi;
    }

    public Taxi_T getTaxi() {
        return taxi;
    }

    public void setTaxi(Taxi_T taxi) {
        this.taxi = taxi;
    }

    public long getTaxiCompteur() {
        return taxiCompteur;
    }

    public void registerTable(javax.swing.JTable generique_table) {
        this.generique_table = generique_table;

    }
///////// AUTRES ////////////////////////////////////////////////////////////////////////////////////////////////


    public void getPopupVector(Vector popupVector, int screen) {
        if (this.popupHashtable == null)
            this.popupHashtable = new Hashtable();
        this.popupHashtable.put(new Integer(screen), popupVector);
    }

    /**
     * Getter for property grp_TPane_dispPane.
     *
     * @return Value of property grp_TPane_dispPane.
     */
    public javax.swing.JTabbedPane getGrp_TPane_dispPane() {
        return grp_TPane_dispPane;
    }

    /**
     * Setter for property grp_TPane_dispPane.
     *
     * @param grp_TPane_dispPane New value of property grp_TPane_dispPane.
     */
    public void setGrp_TPane_dispPane(javax.swing.JTabbedPane grp_TPane_dispPane) {
        this.grp_TPane_dispPane = grp_TPane_dispPane;
    }

    public java.awt.Frame getOwner() {
        return null;
    }

    public ActionToolBar getToolBar() {
        return this.actionToolBar;
    }

    public void showBonDeCommande(Dossier_T object) {

    }

    public void keyPressed(java.awt.event.KeyEvent keyEvent) {
        int direction = keyEvent.getKeyCode();
        if (generique_table != null) {
            if (this.generique_table.getRowCount() > 0) {
                System.out.println("ok j'encode");
// System.out.println("ATENTION MON NOMBRE DE LIGNES TOTALES EST ========> " + m_generiqueTable.getRowCount());
                int cur = generique_table.getSelectedRow();
                int tot = generique_table.getRowCount();
                if (direction == KeyEvent.VK_DOWN && (cur < tot - 1))
                    generique_table.changeSelection(cur + 1, 0, false, false);
                if (direction == KeyEvent.VK_UP && (cur > 0)) generique_table.changeSelection(cur - 1, 0, false, false);
            } else
                System.out.println("table vide");
        } else
            System.out.println("table null");
    }

    public void keyReleased(java.awt.event.KeyEvent keyEvent) {
    }

    public void keyTyped(java.awt.event.KeyEvent keyEvent) {
    }

    /**
     * Getter for property car.
     *
     * @return Value of property car.
     */
    public srcastra.astra.sys.classetransfert.dossier.car.Car_T getCar() {
        return car;
    }

    /**
     * Setter for property car.
     *
     * @param car New value of property car.
     */
    public void setCar(srcastra.astra.sys.classetransfert.dossier.car.Car_T car) {
        this.car = car;
    }

    /**
     * Getter for property carTmp.
     *
     * @return Value of property carTmp.
     */
    public srcastra.astra.sys.classetransfert.dossier.car.Car_T getCarTmp() {
        return carTmp;
    }

    /**
     * Setter for property carTmp.
     *
     * @param carTmp New value of property carTmp.
     */
    public void setCarTmp(srcastra.astra.sys.classetransfert.dossier.car.Car_T carTmp) {
        this.carTmp = carTmp;
    }

    /**
     * Getter for property dossierInit.
     *
     * @return Value of property dossierInit.
     */
    public srcastra.astra.sys.classetransfert.dossier.Dossier_T getDossierInit() {
        return dossierInit;
    }

    /**
     * Setter for property dossierInit.
     *
     * @param dossierInit New value of property dossierInit.
     */
    public void setDossierInit(srcastra.astra.sys.classetransfert.dossier.Dossier_T dossierInit) {
        this.dossierInit = dossierInit;
    }

    /**
     * Getter for property grp_Pan_DossierIndex.
     *
     * @return Value of property grp_Pan_DossierIndex.
     */
    public srcastra.astra.gui.modules.dossier.DossierIndex getGrp_Pan_DossierIndex() {
        return grp_Pan_DossierIndex;
    }

    /**
     * Setter for property grp_Pan_DossierIndex.
     *
     * @param grp_Pan_DossierIndex New value of property grp_Pan_DossierIndex.
     */
    public void setGrp_Pan_DossierIndex(srcastra.astra.gui.modules.dossier.DossierIndex grp_Pan_DossierIndex) {
        this.grp_Pan_DossierIndex = grp_Pan_DossierIndex;
    }

    /**
     * Getter for property selectedPanel.
     *
     * @return Value of property selectedPanel.
     */
    public int getSelectedPanel() {
        return selectedPanel;
    }

    /**
     * Setter for property selectedPanel.
     *
     * @param selectedPanel New value of property selectedPanel.
     */
    public void setSelectedPanel(int selectedPanel) {
        this.selectedPanel = selectedPanel;
    }

    /**
     * Getter for property diverst.
     *
     * @return Value of property diverst.
     */
    public Divers_T getDiverst() {
        return diverst;
    }

    /**
     * Setter for property diverst.
     *
     * @param diverst New value of property diverst.
     */
    public void setDiverst(Divers_T diverst) {
        this.diverst = diverst;
    }

    /**
     * Getter for property dossierIndex.
     * @return Value of property dossierIndex.
     */

    /**
     * Getter for property dossierIndexArray.
     *
     * @return Value of property dossierIndexArray.
     */
    public java.util.ArrayList getDossierIndexArray() {
        return dossierIndexArray;
    }

    /**
     * Setter for property dossierIndexArray.
     *
     * @param dossierIndexArray New value of property dossierIndexArray.
     */
    public void setDossierIndexArray(java.util.ArrayList dossierIndexArray) {
        this.dossierIndexArray = dossierIndexArray;
    }

    /**
     * Getter for property selectedRow.
     *
     * @return Value of property selectedRow.
     */
    public int getSelectedRow() {
        return selectedRow;
    }

    /**
     * Setter for property selectedRow.
     *
     * @param selectedRow New value of property selectedRow.
     */
    public void setSelectedRow(int selectedRow) {
        this.selectedRow = selectedRow;
    }

    /** Getter for property conjonctionCompteur.
     * @return Value of property conjonctionCompteur.
     */


    /**
     * Getter for property car.
     *
     * @return Value of property car.
     */

///////// AUTRES ////////////////////////////////////////////////////////////////////////////////////////////////
    private Hashtable popupHashtable;
    private astrainterface serveur;
    private Loginusers_T currentUser;
    private ActionToolBar actionToolBar;
    private InternScreenModule[] screenDisplaying;
    private java.awt.Frame frameP;
    private int clCleunik;
    private srcastra.astra.gui.components.actions.actionToolBar.ToolBarComposer currentPanel;
    private int[] currentActionEnabled;
    private java.awt.Frame superOwner;
    private DossierRmiInterface serveurDossier;
    private Dossier_T dossier;
    private Avion_ticket_T ticket;
    private Avion_ticket_T tmpticket;
    private Assurance_T assurance;
    private Assurance_T tmpAssurance;
    private Brochure_T brochure;
    private Brochure_T tmpBrochure;
    private Hotel_T hotel;
    private Hotel_T tmpHotel;
    private Bateau_T bateau;
    private Bateau_T tmpBateau;
    private Train_T train;
    private Train_T tmpTrain;
    private VoitureLocation_T voitureLocation;
    private VoitureLocation_T tmpVoitureLocation;
    private Car_T car;
    private Car_T carTmp;
    private Taxi_T taxi;
    private Taxi_T tmpTaxi;
    private javax.swing.event.InternalFrameListener iFrameListener;
    private boolean afterCreation = false;
    private boolean creatingSequence = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton grp_Button_memo;
    private javax.swing.JLabel grp_Label_Passager;
    private javax.swing.JLabel grp_Label_Passager_nbr;
    private javax.swing.JLabel grp_Label_Total;
    private javax.swing.JLabel grp_Label_datecrea;
    private javax.swing.JLabel grp_Label_datedepart;
    private javax.swing.JLabel grp_Label_datefin;
    private javax.swing.JLabel grp_Label_montantTva;
    private javax.swing.JLabel grp_Label_nomclient;
    private javax.swing.JLabel grp_Label_nuite;
    private javax.swing.JLabel grp_Label_nuite_nbr;
    private javax.swing.JLabel grp_Label_numdossier;
    private javax.swing.JLabel grp_Label_owner;
    private javax.swing.JLabel grp_Label_status;
    private javax.swing.JLabel grp_Label_statut2;
    private javax.swing.JLabel grp_Label_typeb;
    private javax.swing.JPanel grp_Pan_CenterPan;
    private javax.swing.JPanel grp_Pan_NorthPan;
    private javax.swing.JPanel grp_Pan_SouthPan;
    private javax.swing.JPanel grp_Pan_StatusPan;
    private javax.swing.JTabbedPane grp_TPane_dispPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel211;
    private javax.swing.JLabel jLabel212;
    private javax.swing.JLabel jLabel213;
    private javax.swing.JLabel jLabel214;
    private javax.swing.JLabel jLabel215;
    private javax.swing.JLabel jLabel216;
    private javax.swing.JLabel jLabel217;
    private javax.swing.JLabel jLabel218;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel tamere;
    // End of variables declaration//GEN-END:variables
    private DossierIndex grp_Pan_DossierIndex;
    private MessageManager mess;
    private srcastra.astra.gui.MainFrame mainframe;
    private long assurancecompteur = 0;

    private long ticketcompteur = 0;
    private long supReducCompteur = 0;
    private long payementCompteur = 0;
    private long brochureCompteur = 0;
    private long hotelCompteur = 0;
    private long bateauCompteur = 0;
    private Divers_T diverst;
    private long trainCompteur = 0;
    private long voitureLocationCompteur = 0;
    private long taxiCompteur = 0;
    private long carCompteur = 0;
    private javax.swing.JTable generique_table;


}
