/* * DescriptionLogementPanel.java * * Created on 21 novembre 2002, 9:46 */package srcastra.astra.gui.modules.dossier.productSpecification.gestionnairepaneaux;import srcastra.astra.gui.modules.mainScreenModule.DossierMainScreenModule;import srcastra.astra.gui.modules.InternScreenModule;import srcastra.astra.gui.components.actions.actionToolBar.*;import srcastra.astra.gui.components.fx.*;import srcastra.astra.gui.components.AstraComponent;import srcastra.astra.sys.classetransfert.dossier.InterfaceProduit;import srcastra.astra.gui.sys.tableModel.dossierTableModel.DossierDescriptionLogementTableModel;import srcastra.astra.sys.classetransfert.dossier.brochure.*;import srcastra.astra.gui.components.actions.*;import srcastra.astra.gui.sys.listModel.dossierListModel.descriptionLogement.*;import srcastra.astra.gui.sys.formVerification.*;import srcastra.astra.gui.components.combobox.aCombo.ACombo;import srcastra.astra.gui.components.checkbox.ACheckBox;import javax.swing.event.*;import srcastra.astra.gui.event.*;import java.awt.event.*;import srcastra.astra.sys.configuration.AbstractRequete;import srcastra.astra.gui.modules.aidedesicion.*;import srcastra.astra.gui.sys.*;import srcastra.astra.sys.*;import javax.swing.table.DefaultTableModel;import javax.swing.JOptionPane;/** * @author Sébastien */public class DescriptionLogementPanel extends javax.swing.JPanel implements InternScreenModule, ToolBarComposer, InterfacePanel {///////////////////////////// ///////////////////////////////////////////////////////////////////////////////////////////////////////////// CONSTRUCTOR////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Creates new form DescriptionLogementPanel     */    AbstractSousPanel m_parent;    public DescriptionLogementPanel(AbstractSousPanel parent2) {        m_parent = parent2;        parent = m_parent.getMainScreenModule();        //  m_descParent = descParent;        m_productID = m_parent.m_config.typeProduct;        init();        setBounds(0, 241, 708, 124);        try {            tb_model = new DossierDescriptionLogementTableModel(parent.getServeur(), parent.getCurrentUser(), parent, m_parent.m_config.typeProduct, (AbstractBuffer) parent.getServeur().workWithDecision(null, parent.getCurrentUser().getUrcleunik(), ActionToolBar.ACT_READ, null, 0, 0, 0, AbstractRequete.DECSRIPTIF_LOG));        } catch (srcastra.astra.sys.rmi.Exception.ServeurSqlFailure se) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se);        }        catch (java.rmi.RemoteException re) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);        }        grp_Table_logement.setModel(tb_model);        //grp_Table_logement.setSelectionBackground(new java.awt.Color(221,221,255));    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// INITIALISATION////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public void init() {        initComponents();        grp_Table_logement.setSelectionMode(javax.swing.DefaultListSelectionModel.SINGLE_SELECTION);        grp_Table_logement.getTableHeader().setReorderingAllowed(false);        grp_Table_logement.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);    }    public void setDocument() {        //grp_TField_quantite.setDocument(new IntegerMask(1, 4, parent.getCurrentUser().getLangage()));    }    /**     * This method is called from within the constructor to     * <p/>     * <p/>     * initialize the form.     * <p/>     * <p/>     * WARNING: Do NOT modify this code. The content of this method is     * <p/>     * <p/>     * always regenerated by the Form Editor.     */    private void initComponents() {//GEN-BEGIN:initComponents        grp_SPan_logement = new javax.swing.JScrollPane();        grp_Table_logement = new javax.swing.JTable();        setLayout(new java.awt.GridLayout(1, 0));        grp_SPan_logement.setPreferredSize(new java.awt.Dimension(453, 80));        grp_Table_logement.setFont(new java.awt.Font("Tahoma", 0, 10));        grp_Table_logement.setModel(new DefaultTableModel());        grp_Table_logement.setRequestFocusEnabled(false);        grp_Table_logement.setSelectionBackground(new java.awt.Color(204, 204, 255));        grp_Table_logement.setSelectionForeground(new java.awt.Color(0, 102, 0));        grp_SPan_logement.setViewportView(grp_Table_logement);        add(grp_SPan_logement);    }//GEN-END:initComponents////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => LISTENERS////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /* private ValidateField valideAndPrevious = new ValidateField() {        public void actionPerformed(java.awt.event.ActionEvent evt) {            doPrevious();        }    };*/    public void chargeData() {    }    public void keyPressed(java.awt.event.KeyEvent evt) {        int key = evt.getKeyCode();        if (grp_Table_logement.getRowCount() > 0) {            System.out.println("ATENTION MON NOMBRE DE LIGNES TOTALES EST ========> " + grp_Table_logement.getRowCount());            int cur = grp_Table_logement.getSelectedRow();            int tot = grp_Table_logement.getRowCount();            if (key == KeyEvent.VK_DOWN && (cur < tot - 1))                grp_Table_logement.changeSelection(cur + 1, 0, false, false);            if (key == KeyEvent.VK_UP && (cur > 0)) grp_Table_logement.changeSelection(cur - 1, 0, false, false);        }    }    public void keyReleased(java.awt.event.KeyEvent keyEvent) {    }    public void keyTyped(java.awt.event.KeyEvent keyEvent) {    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE AU BEANS////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /*  public void fxPanelDiselected() {        setFocusable(false);        grp_Table_logement.setEnabled(false);        adaptBackgroundColor(false);        m_descParent.removeDescriptionLogementPanel();    }           public void fxPanelSelected() {        setFocusable(true);        grp_Table_logement.setEnabled(true);        adaptBackgroundColor(true);        m_descParent.displayDescriptionLogementPanel();        requestFocus();             }        */    private void adaptBackgroundColor(boolean enabled) {        java.awt.Color background = enabled ? java.awt.Color.white : java.awt.Color.lightGray;        grp_Table_logement.setBackground(background);        grp_Table_logement.setRowSelectionAllowed(enabled);        if (enabled && grp_Table_logement.getRowCount() > 0) grp_Table_logement.changeSelection(0, 0, false, false);    }    public void reloadTableInfo() {    }    /*  public void displayEditionPane(boolean display) {        if (display) {            grp_LPane_logement.moveToFront(grp_Pane_LogementEdition);        }        else {            grp_LPane_logement.moveToFront(grp_SPan_logement);                    }    }*/    /*  public boolean isValidForInsertion() {        if (grp_TField_quantite.getText().equals("")) return false;        return true;    }*/    public void giveMeTheFocus() {        requestFocus();    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => FONCTIONS APPARENTES AU TRANSFERT DE DONNEE////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Permet au parent de lancer le chargement des données au     * <p/>     * <p/>     * sein de liste (Ici : ListSelector)     */    /*  public void chargeDataInsert(){ grp_ACB_XLit.setSelectedCleUnik(1); grp_ACB_commodite.setSelectedCleUnik(1); grp_ACB_situation.setSelectedCleUnik(1); grp_ACB_vue.setSelectedCleUnik(1); grp_ACB_regime.setSelectedCleUnik(1);}*public void chargeData() {descLogement = (DescriptionLogement_T) tb_model.renvObject(grp_Table_logement.getSelectedRow());if (descLogement != null) { grp_TField_quantite.setText("" +  descLogement.getDlt_quantité()); grp_ACB_XLit.setSelectedCleUnik(descLogement.getDlt_xlit()); grp_ACB_commodite.setSelectedCleUnik(descLogement.getDlt_commodite()); grp_ACB_situation.setSelectedCleUnik(descLogement.getDlt_situation()); grp_ACB_vue.setSelectedCleUnik(descLogement.getDlt_vue()); grp_ACB_regime.setSelectedCleUnik(descLogement.getDlt_regime());}else JOptionPane.showMessageDialog(this, "Unable to load data from descLogement !");}/** Demande d'une suppression ou d'une annulation physique au serveur  */    public void dbDelete() {        if (m_productID == InterfaceProduit.BRO) {            Brochure_T bro = parent.getBrochure();            for (int i = 0; i < parent.getBrochure().getDescriptionLogement().size(); i++) {                DescriptionLogement_T desclog = (DescriptionLogement_T) parent.getBrochure().getDescriptionLogement().get(i);                Logger.getDefaultLogger().log(Logger.LOG_INFOS, "[KKKKKKKKKKKKKKKKK]Desclog " + desclog.getDlt_cleUnik() + " situation " + desclog.getDlt_situation());            }        }        int cleparent = grp_Table_logement.getSelectedRow();        if (cleparent >= 0) {            DescriptionLogement_T desc = (DescriptionLogement_T) tb_model.renvObject(cleparent);            if (desc != null) {                if (desc.isNewreccord()) {                    switch (m_productID) {                        case InterfaceProduit.HO:                            parent.getHotel().removeDescriptionLogement(desc);                            break;                        case InterfaceProduit.BRO:                            parent.getBrochure().removeDescriptionLogement(desc);                            break;                    }                } else {                    desc.setDeleted(true);                }                if (!parent.getDossier().isNewreccord()) parent.getDossier().setModifreccord(true);                switch (m_productID) {                    case InterfaceProduit.BRO:                        if (!parent.getBrochure().isIsnewreccord()) parent.getBrochure().setModify(true);                        break;                    case InterfaceProduit.HO:                        if (!parent.getHotel().isIsnewreccord()) parent.getHotel().setModify(true);                        break;                }            }        }        reloadTableInfo();    }    /**     * Demande d'une insertion au serveur     */    public void dbInsert() {        /*   descLogement = new DescriptionLogement_T();        chargeDescriptionLogementClassInsert();                switch (m_productID) {            case InterfaceProduit.BRO :                if(!parent.getBrochure().isIsnewreccord())                    parent.getBrochure().setModify(true);                parent.getBrochure().setLocalyModify(true);                parent.getBrochure().addDescriptionLogement(descLogement);                break;            case InterfaceProduit.HO :                parent.getHotel().setLocalyModify(true);                parent.getHotel().addDescriptionLogement(descLogement);                break;        }*/    }    /*  private void chargeDescriptionLogementClassInsert() {        if(!parent.getDossier().isNewreccord())           parent.getDossier().setModifreccord(true);              descLogement.setNewreccord(true);       chargeDescriptionLogementClass();    }*/    /*   private void chargeDescriptionLogementClass() {     int q = 0;     try {         q = Integer.parseInt(grp_TField_quantite.getText());     }     finally {         descLogement.setDlt_quantité(q);     }     descLogement.setDlt_xlit(grp_ACB_XLit.getSelectedCleUnik());     descLogement.setDlt_commodite(grp_ACB_commodite.getSelectedCleUnik());     descLogement.setDlt_situation(grp_ACB_situation.getSelectedCleUnik());     descLogement.setDlt_vue(grp_ACB_vue.getSelectedCleUnik());     descLogement.setDlt_regime(grp_ACB_regime.getSelectedCleUnik()); }   */    /**     * Demande de sélection au serveur     */    public void dbSelect() {    }    /**     * Demande de sélection en vue d'une modification au serveur     */    public void dbSelectForUpdate() {    }    /**     * Demande d'une modification au serveur     */    public void dbUpdate() {        /* chargeDescriptionLogementClassUpdate();        switch (m_productID) {            case InterfaceProduit.BRO :                if(!parent.getBrochure().isIsnewreccord())                    parent.getBrochure().setModify(true);                parent.getBrochure().setLocalyModify(true);                break;            case InterfaceProduit.HO :                parent.getHotel().setLocalyModify(true);                break;        }*/        //displayReadMode();    }    /*  private void chargeDescriptionLogementClassUpdate() {        if(!parent.getDossier().isNewreccord())           parent.getDossier().setModifreccord(true);             descLogement.setModif(true);        switch (m_productID) {            case InterfaceProduit.BRO :                 if(!parent.getBrochure().isIsnewreccord()) parent.getBrochure().setModify(true);                break;            case InterfaceProduit.HO :                 if(!parent.getHotel().isIsnewreccord()) parent.getHotel().setModify(true);                break;        }              chargeDescriptionLogementClass();    }*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE A L' AFFICHAGE DES DONNEES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Affichage en Mode disable     */    public void displayDisableMode() {        /* if (fx_manager != null && fx_manager.isActivated()) fx_manager.setActivated(false);        action = ActionToolBar.ACT_DISABLE;        chargeData();        for (int i=0; i < componentToVerif.length; i++) {            componentToVerif[i].setEnabled(false);            componentToVerif[i].setLastFocusedComponent(false);            componentToVerif[i].clearIcon();        }        displayEditionPane(true);        parent.setCurrentActionEnabled(new int[] { ActionToolBar.DO_MODIFY,                                                   ActionToolBar.DO_CANCEL });                                                           requestFocus();*/    }    private void chargeDefaultValue() {        ///  grp_TField_quantite.setText("0");        //chargeDataInsert();    }    /**     * Affichage en mode Insertion     */    public void displayInsertMode() {        /*  if (fx_manager != null && fx_manager.isActivated()) fx_manager.setActivated(false);        action = ActionToolBar.ACT_INSERT;        chargeDefaultValue();        for (int i=0; i < componentToVerif.length; i++) {            componentToVerif[i].setEnabled(true);            componentToVerif[i].setLastFocusedComponent(true);            componentToVerif[i].clearIcon();        }        displayEditionPane(true);                parent.setCurrentActionEnabled(new int[] { ActionToolBar.DO_PREVIOUS,                                                   ActionToolBar.DO_CANCEL,                                                   ActionToolBar.DO_SWITCH });                grp_TField_quantite.requestFocus();*/    }    /**     * Affichage en mode Lecture     */    public void displayReadMode() {        /*  if (fx_manager != null && fx_manager.isActivated()) fx_manager.setActivated(true);        action = ActionToolBar.ACT_READ;        displayEditionPane(false);        reloadTableInfo();        if (grp_Table_logement.getRowCount() > 0) grp_Table_logement.changeSelection(0, 0, false, false);                parent.setCurrentActionEnabled(new int[] { ActionToolBar.DO_CREATE,                                                   ActionToolBar.DO_ACCEPT,                                                   ActionToolBar.DO_MODIFY,                                                   ActionToolBar.DO_PREVIOUS,                                                   ActionToolBar.DO_CANCEL,                                                   ActionToolBar.DO_DELETE,                                                   ActionToolBar.DO_SWITCH });        requestFocus();*/    }    /**     * Affichage en mode Modification     */    public void displayUpdateMode() {        /*  if (fx_manager != null && fx_manager.isActivated()) fx_manager.setActivated(false);        action = ActionToolBar.ACT_MODIFY;        chargeData();        for (int i=0; i < componentToVerif.length; i++) {            componentToVerif[i].setEnabled(true);            componentToVerif[i].setLastFocusedComponent(true);            componentToVerif[i].clearIcon();        }        displayEditionPane(true);                parent.setCurrentActionEnabled(new int[] { ActionToolBar.DO_PREVIOUS,                                                   ActionToolBar.DO_CANCEL,                                                   ActionToolBar.DO_SWITCH });                grp_TField_quantite.requestFocus();*/    }    /**     * Méthode pour l'update de tous les champs     */    public void updateAllFields() {    }    public void updateAllFields(Object donnee) {    }    private void disableFields() {        for (int i = 0; i < componentToVerif.length; i++) {            componentToVerif[i].setEnabled(false);            componentToVerif[i].setLastFocusedComponent(false);            componentToVerif[i].clearIcon();        }    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE AUX APPELS DE LA TOOLBAR////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public void doAccept() {        if (grp_Table_logement.getRowCount() > 0) displayDisableMode();    }    public void doCancel() {        /* switch(action) {             case ActionToolBar.ACT_INSERT :                 displayReadMode();                 break;             case ActionToolBar.ACT_MODIFY :                 displayReadMode();                 break;             case ActionToolBar.ACT_READ :                 m_descParent.doCancel();                 break;             case ActionToolBar.ACT_DISABLE :                 displayReadMode();                 break;        }*/    }    public void doClose() {    }    public void doCreate() {        //  requestFocus();        // displayInsertMode();    }    public void doDelete() {    }    public void doHelp() {    }    public void doModify() {        /*switch (action) {      case ActionToolBar.ACT_READ :*/        if (grp_Table_logement.getRowCount() > 0) displayUpdateMode();        /*break;        }*/    }    public void doNext() {    }    public void doPrevious() {/*        switch (action) {            case ActionToolBar.ACT_INSERT :                if (isValidForInsertion()) {                    requestFocus();                    disableFields();                    dbInsert();                    displayReadMode();                    requestFocus();                }                else {                    parent.getMessageManager().showMessageDialog(this, "descLog_quantite_libele", "descLog_quantite_titre", parent.getCurrentUser());                    grp_TField_quantite.requestFocus();                }                break;            case ActionToolBar.ACT_MODIFY :                if (isValidForInsertion()) {                    requestFocus();                    disableFields();                    dbUpdate();                    displayReadMode();                    requestFocus();                }                else {                    requestFocus();                    parent.getMessageManager().showMessageDialog(this, "descLog_quantite_libele", "descLog_quantite_titre", parent.getCurrentUser());                    requestFocus();                    grp_TField_quantite.requestFocus();                }                break;            case ActionToolBar.ACT_READ :               //                 if(m_descParent instanceof BrochurePanel || m_descParent instanceof HotelPane)                    fx_manager.swithPanel("supreduc");                else                                      m_descParent.validateProduct();                break;        }*/    }    public void doPrint() {    }    public void doSwitch() {        fx_manager.swithPanel();        parent.getTheLostFocus();    }    public int[] getDefaultActionToolBarMask() {        return new int[]{ActionToolBar.DO_CREATE,                ActionToolBar.DO_ACCEPT,                ActionToolBar.DO_MODIFY,                ActionToolBar.DO_PREVIOUS,                ActionToolBar.DO_CANCEL,                ActionToolBar.DO_DELETE,                ActionToolBar.DO_SWITCH};    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => Champs de la classe////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    private DossierMainScreenModule parent;    //  private DescriptionLogementParent m_descParent;    private int m_productID;    private int action;    private DossierDescriptionLogementTableModel tb_model;    private DescriptionLogement_T descLogement;    private AstraComponent[] componentToVerif;    private ToolBarInteraction tb_interaction;    private JPanelSelectionFxManager fx_manager;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// STATIC VARIABLES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => Graphic Component////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // Variables declaration - do not modify//GEN-BEGIN:variables    private javax.swing.JScrollPane grp_SPan_logement;    private javax.swing.JTable grp_Table_logement;    // End of variables declaration//GEN-END:variables////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// BEANS PROPERTIES GET/SET SUPPORT////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Permet à la classe qui implémente cette méthode de se     * <p/>     * <p/>     * référencer auprès d' ActionToolBar     *     * @return le n° de l'action     */    public int getAction() {        return action;    }    /**     * Sert à recevoir le titre de son parent     * <p/>     * <p/>     * pour un cadre éventuel     *     * @return le titre du panneau     */    public String getTitle() {        return "# Description Logement #";    }    /**     * Permet de préciser le type d'action qu'on est occupé de faire :     * <p/>     * <p/>     * 0 pour lecture     * <p/>     * <p/>     * 1 pour création     * <p/>     * <p/>     * 2 pour modification     *     * @param action type d'action     */    public void setAction(int action) {        this.action = action;    }    /**     * Permet de recevoir la clé unique d'un objet relatif     * <p/>     * <p/>     * au modules : création par partie ou modification     *     * @param frCleUnik la clé unique     */    public void setFrCleunik(int frCleUnik) {    }    /**     * Spécifie le composant qui implémente cette fonction comme     * <p/>     * <p/>     * le composant qui pilote l'actionToolBar     */    public void setThisAsToolBarComponent() {    }    /**     * Getter for property fx_manager.     *     * @return Value of property fx_manager.     */    public srcastra.astra.gui.components.fx.JPanelSelectionFxManager getFx_manager() {        return fx_manager;    }    /**     * Setter for property fx_manager.     *     * @param fx_manager New value of property fx_manager.     */    public void setFx_manager(srcastra.astra.gui.components.fx.JPanelSelectionFxManager fx_manager) {        this.fx_manager = fx_manager;    }    public void fxPanelSelected(int key) {    }    public void goUp() {    }    public java.awt.Component m_getGeneriqueTable() {        return grp_Table_logement;    }    /**     * Getter for property grp_Table_logement.     *     * @return Value of property grp_Table_logement.     */    public javax.swing.JTable getGrp_Table_logement() {        return grp_Table_logement;    }    public int doAccept(boolean sw) {        return 1;    }    public int doCancel(boolean sw) {        return 1;    }    public int doCreate(boolean sw) {        return 1;    }    public int doModify(boolean sw) {        return 1;    }    public int doPrevious(boolean sw) {        /*   switch (action) {            case ActionToolBar.ACT_INSERT :                if (isValidForInsertion()) {                    requestFocus();                    disableFields();                    dbInsert();                    displayReadMode();                    requestFocus();                }                else {                    parent.getMessageManager().showMessageDialog(this, "descLog_quantite_libele", "descLog_quantite_titre", parent.getCurrentUser());                    grp_TField_quantite.requestFocus();                }                break;            case ActionToolBar.ACT_MODIFY :                if (isValidForInsertion()) {                    requestFocus();                    disableFields();                    dbUpdate();                    displayReadMode();                    requestFocus();                }                else {                    requestFocus();                    parent.getMessageManager().showMessageDialog(this, "descLog_quantite_libele", "descLog_quantite_titre", parent.getCurrentUser());                    requestFocus();                    grp_TField_quantite.requestFocus();                }                break;            case ActionToolBar.ACT_READ :               //                 if(m_descParent instanceof BrochurePanel || m_descParent instanceof HotelPane)                    fx_manager.swithPanel("supreduc");                else                                      m_descParent.validateProduct();                break;        }*/        return 1;    }    public Object getSupReduc2(int i) {        if (grp_Table_logement.getRowCount() > 0) {            return tb_model.renvObject(grp_Table_logement.getSelectedRow());        }        return null;    }    public java.awt.Component getTable() {        return grp_Table_logement;    }    public void moveInTable(int direction) {        if (grp_Table_logement.getRowCount() > 0) {            int cur = grp_Table_logement.getSelectedRow();            int tot = grp_Table_logement.getRowCount();            if (direction == KeyEvent.VK_DOWN && (cur < tot - 1))                grp_Table_logement.changeSelection(cur + 1, 0, false, false);            if (direction == KeyEvent.VK_UP && (cur > 0)) grp_Table_logement.changeSelection(cur - 1, 0, false, false);        }    }    public void reloadTableModel() {        tb_model.retrieveData();        grp_Table_logement.tableChanged(new TableModelEvent(tb_model));        grp_Table_logement.repaint();        if (grp_Table_logement.getRowCount() > 0)            grp_Table_logement.changeSelection(0, 0, false, false);    }    public void setSup_reduc(Object sup_reduc) {    }    public int doDelete(boolean sw) {        if (grp_Table_logement.getRowCount() > 0) {            int rep = parent.getMessageManager().showConfirmDialog(parent.getSuperOwner(), "eff_produit_text", "eff_produit", parent.getCurrentUser());            if (rep == 0) {                dbDelete();            }        }        return 1;    }    public void doF10() {    }    public void addKeystroque() {    }    public void doF7() {    }/** Setter for property grp_Table_logement. * @param grp_Table_logement New value of property grp_Table_logement. */}