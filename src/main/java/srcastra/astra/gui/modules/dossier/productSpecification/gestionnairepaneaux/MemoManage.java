/*







 * MemoManage.java







 *







 * Created on 18 février 2003, 13:04







 */


package srcastra.astra.gui.modules.dossier.productSpecification.gestionnairepaneaux;


import srcastra.astra.gui.modules.mainScreenModule.DossierMainScreenModule;


import srcastra.astra.gui.modules.*;


import srcastra.astra.gui.components.*;


import srcastra.astra.gui.components.actions.*;


import srcastra.astra.gui.components.actions.actionToolBar.*;


import java.awt.*;


import java.awt.event.*;


import srcastra.astra.gui.event.*;


import javax.swing.*;


import javax.swing.border.*;


import srcastra.astra.gui.modules.dossier.*;


import srcastra.astra.sys.classetransfert.dossier.*;


import srcastra.astra.sys.classetransfert.dossier.bateau.*;


import srcastra.astra.gui.components.fx.*;


import srcastra.astra.gui.sys.utils.*;


import srcastra.astra.gui.sys.formVerification.*;


import srcastra.astra.gui.sys.listModel.dossierListModel.*;


/**
 * @author Thomas
 */


public class MemoManage extends javax.swing.JPanel implements InternScreenModule, ToolBarComposer, InterfacePanel {


    /**
     * Creates new form MemoManage
     */


    AbstractSousPanel m_parent;


    DossierMainScreenModule m_mainparent;


    public MemoManage(AbstractSousPanel parent, DossierMainScreenModule parent2) {


        m_parent = parent;


        m_mainparent = parent2;


        initComponents();

        //  setSize(408,233);


        this.setBounds(300, 0, 408, 233);


        model = new srcastra.astra.gui.components.combobox.liste.SupReducListeTableModel(m_parent.getMainScreenModule().getServeur(), m_parent.getMainScreenModule().getCurrentUser(), m_parent.m_config.typeProduct, parent.getMainScreenModule(), srcastra.astra.sys.configuration.AbstractRequete.MEMO, parent.getMainScreenModule().getMainframe().getMemoVector(), m_mainparent.getDossier().getClientContractuel().getLecleunik());

        // model=new  srcastra.astra.gui.components.combobox.liste.MemoListeTableModel(m_parent.getMainScreenModule().getServeur(),m_parent.getMainScreenModule().getCurrentUser(),m_parent.m_config.typeProduct,srcastra.astra.sys.configuration.AbstractRequete.MEMO);


        java.util.ArrayList data = model.getM_vector();


        DefaultListModel model = new DefaultListModel();


        jList1.setModel(model);


        jList1.setSelectionBackground(new java.awt.Color(221, 221, 255));


        jList1.setSelectionForeground(Color.black);


        JScrollPane listScrollPane = new JScrollPane(jList1);
        add(listScrollPane);

        //// add(scrollPane);


        if (data != null) {


            for (int i = 0; i < data.size(); i++) {


                Object[] tmptab = (Object[]) data.get(i);


                model.add(i, tmptab[3]);


            }


        }


    }


    /**
     * This method is called from within the constructor to
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * initialize the form.
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * WARNING: Do NOT modify this code. The content of this method is
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * always regenerated by the Form Editor.
     */


    private void initComponents() {//GEN-BEGIN:initComponents
        jList1 = new javax.swing.JList();

        setLayout(new java.awt.BorderLayout());

        setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        setPreferredSize(new java.awt.Dimension(400, 220));
        jList1.setAutoscrolls(false);
        jList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jList1KeyReleased(evt);
            }
        });

        add(jList1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    private void jList1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList1KeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {


            m_parent.m_config.avion.doPrevious();


        }// Add your handling code here:
    }//GEN-LAST:event_jList1KeyReleased


    public int doAccept(boolean sw) {


        return 0;


    }


    public int doCancel(boolean sw) {


        return 0;


    }


    public int doCreate(boolean sw) {


        return 0;


    }


    public int doDelete(boolean sw) {


        return 0;


    }


    public int doModify(boolean sw) {


        return 0;


    }


    public int doPrevious(boolean sw) {


        try {

            if (model.getRowCount() > 0)

                if (((JTextArea) m_parent.m_config.textarea).getText().equals(""))

                    ((JTextArea) m_parent.m_config.textarea).append(jList1.getSelectedValue().toString());

                else

                    ((JTextArea) m_parent.m_config.textarea).append("\n" + jList1.getSelectedValue().toString());

            return 1;

        } catch (ClassCastException cn) {


            if (model.getRowCount() > 0)

                if (((JTextPane) m_parent.m_config.textarea).getText().equals(""))

                    ((JTextPane) m_parent.m_config.textarea).setText(jList1.getSelectedValue().toString());

                else

                    ((JTextPane) m_parent.m_config.textarea).setText(((JTextPane) m_parent.m_config.textarea).getText() + "\n" + jList1.getSelectedValue().toString());

            return 1;

        }

    }


    public Object getSupReduc2(int i) {


        return null;


    }


    public java.awt.Component getTable() {


        return null;


    }


    public void moveInTable(int direction) {


    }


    public void reloadTableModel() {


    }


    public void setSup_reduc(Object sup_reduc) {


    }


    /**
     * Permet au parent de lancer le chargement des données au
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * sein de liste (Ici : ListSelector)
     */


    public void chargeData() {


    }


    /**
     * Demande d'une suppression ou d'une annulation physique au serveur
     */


    public void dbDelete() {


    }


    /**
     * Demande d'une insertion au serveur
     */


    public void dbInsert() {


    }


    /**
     * Demande de sélection au serveur
     */


    public void dbSelect() {


    }


    /**
     * Demande de sélection en vue d'une modification au serveur
     */


    public void dbSelectForUpdate() {


    }


    /**
     * Demande d'une modification au serveur
     */


    public void dbUpdate() {


    }


    /**
     * Affichage en Mode disable
     */


    public void displayDisableMode() {


    }


    /**
     * Affichage en mode Insertion
     */


    public void displayInsertMode() {


    }


    /**
     * Affichage en mode Lecture
     */


    public void displayReadMode() {


    }


    /**
     * Affichage en mode Modification
     */


    public void displayUpdateMode() {


    }


    public void doAccept() {


    }


    public void doCancel() {


    }


    public void doClose() {


    }


    public void doCreate() {


    }


    public void doDelete() {


    }


    public void doHelp() {


    }


    public void doModify() {


    }


    public void doNext() {


        if (jList1.getComponentCount() > 0)


            jList1.setSelectedIndex(0);


        jList1.requestFocus();

        // jList1.requestFocus();


    }


    public void doPrevious() {


    }


    public void doPrint() {


    }


    public void doSwitch() {


    }


    /**
     * Permet à la classe qui implémente cette méthode de se
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * référencer auprès d' ActionToolBar
     *
     * @return le n° de l'action
     */


    public int getAction() {


        return 0;


    }


    public int[] getDefaultActionToolBarMask() {


        return null;


    }


    /**
     * Sert à recevoir le titre de son parent
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * pour un cadre éventuel
     *
     * @return le titre du panneau
     */


    public String getTitle() {


        return "";


    }


    public java.awt.Component m_getGeneriqueTable() {


        return null;


    }


    /**
     * Permet de préciser le type d'action qu'on est occupé de faire :
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * 0 pour lecture
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * 1 pour création
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * 2 pour modification
     *
     * @param action type d'action
     */


    public void setAction(int action) {


    }


    /**
     * Permet de recevoir la clé unique d'un objet relatif
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * au modules : création par partie ou modification
     *
     * @param frCleUnik la clé unique
     */


    public void setFrCleunik(int frCleUnik) {


    }


    /**
     * Spécifie le composant qui implémente cette fonction comme
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * le composant qui pilote l'actionToolBar
     */


    public void setThisAsToolBarComponent() {


    }


    /**
     * Méthode pour l'update de tous les champs
     */


    public void updateAllFields() {


    }


    public void updateAllFields(Object donnee) {


    }


    public void doF10() {


    }


    public void addKeystroque() {


    }


    public void doF7() {


    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jList1;
    // End of variables declaration//GEN-END:variables

    //srcastra.astra.gui.components.combobox.liste.MemoListeTableModel model;


    srcastra.astra.gui.components.combobox.liste.SupReducListeTableModel model;


}







