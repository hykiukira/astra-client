/*

 * ExportComptable.java

 *

 * Created on 19 décembre 2003, 9:18

 */


package srcastra.astra.gui.modules.dossier;

import java.io.*;

import srcastra.astra.sys.classetransfert.clients.*;

import srcastra.astra.sys.classetransfert.configuration.*;

import javax.swing.*;

import srcastra.astra.gui.modules.mainScreenModule.DossierMainScreenModule.*;

import srcastra.astra.gui.modules.*;

import srcastra.astra.gui.components.*;

import java.awt.event.*;

import srcastra.astra.gui.components.actions.actionToolBar.*;

import srcastra.astra.sys.rmi.*;

import srcastra.astra.sys.classetransfert.*;

import srcastra.astra.gui.sys.*;

import javax.swing.event.*;

import java.rmi.*;

import java.util.*;

import srcastra.astra.sys.rmi.Exception.*;

import srcastra.astra.sys.export.*;
import srcastra.astra.gui.sys.*;
import srcastra.astra.sys.utils.*;

import srcastra.astra.sys.classetransfert.dossier.*;

import srcastra.astra.sys.classetransfert.utils.*;

import srcastra.astra.gui.components.date.thedate.*;

/**
 * @author Thomas
 */


public class BatchFacturation extends javax.swing.JInternalFrame implements MainScreenModule, AIframe, ActionListener, ToolBarComposer {


    /**
     * Creates new form ExportComptable
     */

    //ComptaPanel panel;

    ActionToolBar actionToolBar;

    javax.swing.event.InternalFrameListener iFrameListener;

    int[] actionTab;

    astrainterface serveur;

    Loginusers_T user;

    java.awt.Frame parent;

    String chemin;

    public BatchFacturation(java.awt.Frame superOwner, astrainterface serveur, Loginusers_T currentUser, ActionToolBar actionToolBar, javax.swing.event.InternalFrameListener iFrameListener) {

        initComponents();

        deb = new ADate();
        fin = new ADate();

        getContentPane().add(deb);
        deb.setBounds(120, 20, 100, 18);
        getContentPane().add(fin);
        fin.setBounds(230, 20, 100, 18);
        deb.setGrp_Comp_nextComponent(fin);


        this.parent = superOwner;

        this.actionToolBar = actionToolBar;

        this.actionToolBar.setActionEnabled(activeToolbar(false));

        //panel=new ComptaPanel(this);        

        ///getContentPane().add(panel);

        this.iFrameListener = iFrameListener;

        this.addInternalFrameListener(iFrameListener);

        this.actionToolBar.setTbComposer(this);

        this.serveur = serveur;

        this.user = currentUser;

    }

    private int[] activeToolbar(boolean enabled) {

        //if(enabled){

        actionTab = new int[]{ActionToolBar.DO_PREVIOUS, ActionToolBar.DO_CLOSE};

        //}else{

        //  actionTab=new int[]{ActionToolBar.DO_CLOSE};

        //}

        return actionTab;

    }

    public void doDefaultCloseAction() {

        try {

            serveur.remoterollback(getCurrentUser().getUrcleunik());

        } catch (java.rmi.RemoteException re) {

            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.MISSING_RESSOURCE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);

        }

        InternalFrameEvent closeWindow = new InternalFrameEvent(this, InternalFrameEvent.INTERNAL_FRAME_CLOSING);

        this.iFrameListener.internalFrameClosing(closeWindow);

        super.doDefaultCloseAction();

    }


    /**
     * This method is called from within the constructor to
     * <p/>
     * initialize the form.
     * <p/>
     * WARNING: Do NOT modify this code. The content of this method is
     * <p/>
     * always regenerated by the Form Editor.
     */

    private void initComponents() {//GEN-BEGIN:initComponents
        textArea1 = new java.awt.TextArea();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        button1 = new java.awt.Button();
        label4 = new java.awt.Label();

        getContentPane().setLayout(null);

        setClosable(true);
        setIconifiable(true);
        setName("exportcompta");
        textArea1.setEditable(false);
        getContentPane().add(textArea1);
        textArea1.setBounds(10, 50, 700, 250);

        label1.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/listing").getString("dos_dep"));
        getContentPane().add(label1);
        label1.setBounds(10, 20, 60, 20);

        label2.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/listing").getString("do_de"));
        getContentPane().add(label2);
        label2.setBounds(70, 20, 40, 20);

        label3.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/listing").getString("dos_a"));
        getContentPane().add(label3);
        label3.setBounds(210, 20, 20, 20);

        button1.setLabel("Open");
        button1.setVisible(false);
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        getContentPane().add(button1);
        button1.setBounds(630, 20, 57, 24);

        label4.setFont(new java.awt.Font("Arial", 1, 12));
        label4.setForeground(new java.awt.Color(255, 51, 51));
        getContentPane().add(label4);
        label4.setBounds(580, 20, 40, 20);

        setBounds(0, 0, 730, 340);
    }//GEN-END:initComponents

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed


        try {
            System.out.println(chemin);

            char un = (char) 47;
            char deux = (char) 92;

            chemin = chemin.replace(un, deux);

            System.out.println(chemin);


            Runtime.getRuntime().exec("explorer.exe " + this.chemin);
        } catch (Exception e) {
        }         // TODO add your handling code here:
    }//GEN-LAST:event_button1ActionPerformed


    public void cancelModule() {

    }


    public void changeCursor(int changeLocation, java.awt.Cursor cursor) {

    }


    public void chargeStatusPanel(String[] statuts) {

    }


    public void closeModule() {

    }


    public void displayCreateSequence() {

    }


    public void displayDeleteSequence() {

    }


    public void displayReadSequence(int cleUnik) {

    }


    public void enabledTabbedPane(boolean enabled) {

    }


    public srcastra.astra.sys.classetransfert.Loginusers_T getCurrentUser() {

        return user;

    }


    public boolean getNestedSignaletique() {

        return false;

    }


    public java.awt.Frame getOwner() {

        return null;

    }


    public srcastra.astra.sys.rmi.astrainterface getServeur() {

        return null;

    }


    public srcastra.astra.sys.rmi.DossierRmiInterface getServeurDossier() {

        return null;

    }


    public java.awt.Frame getSuperOwner() {

        return null;

    }


    public void nextScreen(int currentScreen) {


    }


    public void nextScreen(int currentScreen, boolean affich) {

    }


    public void nextScreen(int currentScreen, int insert) {

    }


    public void registerTable(javax.swing.JTable generique_table) {

    }


    public void reloadToolBarInfo() {

        this.actionToolBar.setActionEnabled(actionTab);

        actionToolBar.setTbComposer(this);

    }

    public void reloadToolBarInfo(boolean enabled) {

        activeToolbar(enabled);

        this.actionToolBar.setActionEnabled(actionTab);

        actionToolBar.setTbComposer(this);

    }


    public void setContextCleUnik(int ContextCleUnik) {

    }


    public void setCurrentActionEnabled(int[] actionEnabled) {

    }


    public void setCurrentPanel(srcastra.astra.gui.components.actions.actionToolBar.ToolBarComposer currentPanel) {

    }


    public void setNestedSignaletique(boolean netstedSignletique) {

    }


    public void saveToolBarInfo() {

    }


    public void actionPerformed(ActionEvent e) {

    }


    public void doAccept() {

    }


    public void doCancel() {

    }


    public void doClose() {

    }


    public void doCreate() {

    }


    public void doDelete() {

    }


    public void doF10() {

    }


    public void doF7() {

    }


    public void doHelp() {

    }


    public void doModify() {

    }


    public void doNext() {

    }


    public void doPrevious() {

        // panel.getJProgressBar1().setVisible(true);

        /// ExportThread thread=new ExportComptable.ExportThread(this);

        // thread.start();
        Entite e = null;
        ArrayList array = new ArrayList();

        try {
            this.textArea1.setText("");
            this.button1.setVisible(false);


            ArrayList data = serveur.renvEntiteRmiObject(user.getUrcleunik()).getList(user.getUrcleunik(), user.getUreecleunik());

            int cpt = 0;
            boolean found = false;

            while (!found && cpt < data.size()) {
                e = (Entite) data.get(cpt);

                if (e.getEecleunik() == user.getUreecleunik())
                    found = true;

                cpt++;
            }

            System.out.println(this.getDebDeb() + " " + this.getDateFin());


            array = serveur.renvListRmiObject(user.getUrcleunik()).getDossierList(user.getUrcleunik(),
                    this.getDebDeb(), this.getDateFin(), "0000-00-00 00:00:00", "9999-01-01 23:59:59",

                    "%", "%", "%", "%", "%", "",

                    "", "", "", Integer.toString(e.getEecleunik()),

                    "%", "", "%", 0);

        } catch (srcastra.astra.sys.rmi.Exception.ServeurSqlFailure se) {

            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se, user);

        } catch (RemoteException re) {
            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);
        }


        String path, path1;

        srcastra.astra.sys.classetransfert.utils.Date d = CalculDate.getTodayDate();

        SimpleTimeZone pdt = new SimpleTimeZone(3600000, "Europe/Paris");
        Calendar c1 = new GregorianCalendar(pdt);
        String time = (c1.get(c1.HOUR) + 1) + " " + c1.get(c1.MINUTE) + " " + c1.get(c1.SECOND);


        String date = Integer.toString(d.getDay()) + "-" + Integer.toString(d.getMonth()) + "-" + Integer.toString(d.getYear()) + " " + time;

        String date1 = Integer.toString(deb.getDate().getDay()) + "-" + Integer.toString(deb.getDate().getMonth()) + "-" + Integer.toString(deb.getDate().getYear()) + "_" + Integer.toString(fin.getDate().getDay()) + "-" + Integer.toString(fin.getDate().getMonth()) + "-" + Integer.toString(fin.getDate().getYear());

        path = srcastra.astra.sys.ManageDirectory.testDirectory("compta\\batchFact\\" + date1 + "\\");

        path1 = srcastra.astra.sys.ManageDirectory.testDirectory("compta\\Fa\\");

        this.chemin = path;

        int nbFact = array.size();


        this.textArea1.setText(this.textArea1.getText() + e.getEenom() + "   [" + e.getEeabrev() + "]   ----> " + nbFact + "  Dossier" + "\n----------------------------------------------------------------\n");


        for (int i = 0; i < array.size(); i++) {

            try {


                Object[] o = (Object[]) array.get(i);


                ArrayList tm = serveur.renvDossierRmiObject(user.getUrcleunik()).chargeDossier(user, Integer.valueOf(o[0].toString()).intValue(), true);

                //ArrayList tm=.getServeurDossier().chargeDossier(parent.getCurrentUser(),cle,lock);
                Dossier_T tmpDossier = (Dossier_T) tm.get(0);


                String numFact = tmpDossier.getNumfact();

                if (tmpDossier.getDr_facture() == 0) {
                    numFact = serveur.renvDossierRmiObject(user.getUrcleunik()).setDossierFacture(user.getUrcleunik(), tmpDossier.getDrcleunik(), Long.parseLong(tmpDossier.getNumfact()), tmpDossier.getDrtotalprix());


                    tmpDossier.setDr_date_facturation(CalculDate.getTodayDate());


                    tmpDossier.setNumfact(numFact);


                    new srcastra.astra.gui.modules.printing.PrintingPreview2(parent, serveur.renvDossierRmiObject(user.getUrcleunik()), tmpDossier, user, ((srcastra.astra.gui.MainFrame) parent).getMediator(), serveur, 1, false);

                    System.out.println("test");


                    String fileName;


                    try {

                        /*  java.io.File dest = new java.io.File(path+"F"+numFact+".pdf");

                        java.io.File src = new java.io.File(path1+"F"+numFact+".pdf");

                       java.io.FileReader in = new java.io.FileReader(src);

                       java.io.FileWriter out = new java.io.FileWriter(dest);

                       long l = src.length();


                       for(long ii=0;ii<l;ii++) {
                       out.write(in.read());
                       }

                       // Fermeture des flux de données
                       out.flush();
                       out.close();
                       in.close(); */

                        File file2 = new File(path1 + "F" + numFact + "_origin.pdf");
                        InputStream in;
                        String p = "";

                        if (file2.exists())
                            p = path1 + "F" + numFact + "_origin.pdf";
                        else
                            p = path1 + "F" + numFact + ".pdf";


                        in = new BufferedInputStream(new FileInputStream(p));

                        OutputStream out = new BufferedOutputStream(new FileOutputStream(path + "F" + numFact + ".pdf"));
                        byte[] buffer = new byte[(int) (new File(p)).length()];
                        in.read(buffer);
                        out.write(buffer);
                        in.close();
                        out.close();


                        this.textArea1.setText(this.textArea1.getText() + tmpDossier.getDrnumdos() + "--->" + numFact + "   [OK] " + ((Clients_T) tmpDossier.getClientFacturable()).getCsnom() + "\n");

                    } catch (Exception ee)

                    {
                    }


                } else {
                    this.textArea1.setText(this.textArea1.getText() + tmpDossier.getDrnumdos() + "--->" + numFact + "   [ALREADY] " + ((Clients_T) tmpDossier.getClientFacturable()).getCsnom() + "\n");

                }


            } catch (srcastra.astra.sys.rmi.Exception.ServeurSqlFailure se) {

                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se, user);

            } catch (RemoteException re) {
                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);
            }


            int ind = i;
            ind++;

            System.out.println(ind + "" + array.size());

            double value = array.size();

            value = value / 100;


            value = ind / value;

            //value=value*100;


            String out = Integer.toString((int) value) + " %";

            this.label4.setText(out);
            System.out.println(out);
            try {


                Thread.currentThread().sleep(5);


            }


            catch (InterruptedException evt) {
            }


            this.repaint();

        }


        this.textArea1.setText(this.textArea1.getText() + "----------------------------------------------\n" + "Finished --->" + path);
        this.button1.setVisible(true);

        /*  try{

        java.io.FileWriter out = new java.io.FileWriter(path+date+".txt");

        out.write(textArea1.getText());
        out.close();
        }catch(Exception ee1)
        {}*/

    }

    private void checkError() {

        /*  DbfManager2.EmptyFile(panel.getPath().vente);

        DbfManager2.EmptyFile(panel.getPath().achat);

        DbfManager2.EmptyFile(panel.getPath().financier);

        DbfManager2.EmptyFile(panel.getPath().od);

        DbfManager2.EmptyFile(panel.getPath().fournisseur);

        DbfManager2.EmptyFile(panel.getPath().client);*/

        //JOptionPane.showMessageDialog(this,java.util.ResourceBundle.getBundle("srcastra/astra/locale/alertmessage").getString("error_export"),java.util.ResourceBundle.getBundle("srcastra/astra/locale/alertmessage").getString("error_export_title"),JOptionPane.INFORMATION_MESSAGE);

    }

    public void doPrint() {

    }


    public void doSwitch() {

    }


    public int[] getDefaultActionToolBarMask() {

        return null;

    }


    public java.awt.Component m_getGeneriqueTable() {

        return null;

    }


    public void setThisAsToolBarComponent() {

    }

    private String getDebDeb() {

        srcastra.astra.sys.classetransfert.utils.Date date = deb.getDate();
        date.setHours(0);
        date.setMinutes(0);
        date.setSeconds(0);

        if (date == null || date.isOpen() || date.isUnknow()) {

            return "0000-00-00 00:00:00";

        }

        return date.toString();


    }

    private String getDateFin() {

        srcastra.astra.sys.classetransfert.utils.Date date = fin.getDate();
        date.setHours(0);
        date.setMinutes(0);
        date.setSeconds(0);

        if (date == null || date.isOpen() || date.isUnknow()) {

            return "9999-01-01 00:00:00";

        }

        return date.toString();


    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables

    ADate deb;
    ADate fin;


}
