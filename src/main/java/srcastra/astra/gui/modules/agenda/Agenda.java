/*

 * Agenda.java

 *

 * Created on 26 août 2003, 9:43

 *

 * Cette classe permet d'afficher l'agenda

 *

 * @author Driart

 *

 */


package srcastra.astra.gui.modules.agenda;

import srcastra.astra.sys.rmi.*;

import srcastra.astra.gui.modules.mainScreenModule.*;

import srcastra.astra.gui.components.celleditor.*;

import srcastra.astra.gui.modules.*;

import javax.swing.*;

import javax.swing.table.AbstractTableModel;

import java.util.Vector;

import srcastra.astra.gui.modules.mainScreenModule.DossierMainScreenModule;

import srcastra.astra.sys.classetransfert.Loginusers_T;

import java.util.*;

import javax.swing.table.*;

import srcastra.astra.gui.components.combobox.liste.*;

import srcastra.astra.gui.components.tva.*;

import srcastra.astra.sys.rmi.*;

import srcastra.astra.gui.test.*;

import srcastra.astra.gui.components.*;

import srcastra.astra.gui.components.actions.actionToolBar.*;

import srcastra.astra.gui.sys.formVerification.*;

import java.awt.event.*;

import srcastra.astra.gui.components.textFields.*;

import srcastra.astra.gui.test.ColumnData;

import srcastra.astra.gui.sys.*;

import java.awt.event.*;

import javax.swing.event.*;

import srcastra.astra.sys.classetransfert.utils.*;

import srcastra.astra.sys.compta.*;

import java.text.*;


public class Agenda extends javax.swing.JInternalFrame implements MainScreenModule, AIframe, ActionListener, ToolBarComposer {


    CalendarTableModel model;
    MainScreenModule parent;

    Loginusers_T currentUser;

    java.awt.Frame superOwner;

    astrainterface serveur;

    int[] actiontab;

    javax.swing.event.InternalFrameListener iFrameListener;

    AgendaClass agenda;

    //AgendaTask task;
    AgendaFrame task;

    Calendar c = Calendar.getInstance();
    srcastra.astra.sys.classetransfert.utils.Date m_date;
    int month = c.get(c.MONTH);

    int year = c.get(c.YEAR);


    /**
     * Creates new form Agenda
     */

    public Agenda(java.awt.Frame superOwner, astrainterface serveur, Loginusers_T currentUser, ActionToolBar actionToolBar, javax.swing.event.InternalFrameListener iFrameListener) {


        this.currentUser = currentUser;

        this.serveur = serveur;

        this.superOwner = superOwner;

        parent = this;

        this.iFrameListener = iFrameListener;

        this.addInternalFrameListener(iFrameListener);

        initComponents();

        // postInit(month, year);
        m_date = CalculDate.getTodayDate();
        m_date.setDay(1);
        initTable();

    }

    public void colorTable() {
        ((JLabel) jTable1.getCellEditor(0, 0)).setBackground(java.awt.Color.BLUE);
    }

    private void initTable() {
        // jTable1.setSelectionBackground(new java.awt.Color(221,221,255));
        model = new CalendarTableModel(serveur, currentUser);
        model.refresh(m_date);
        jTable1.setAutoCreateColumnsFromModel(false);
        jTable1.setModel(model);
        jTable1.getTableHeader().setReorderingAllowed(false);
        //grp_table_list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.setFocusable(false);
        for (int k = 0; k < 7; k++) {
            //JCheckBox jcheck=new JCheckBox();
            //TableCellEditor editor=new javax.swing.DefaultCellEditor(jcheck);
            //TableCellRenderer renderer2;
            //renderer2=new CheckCellRenderer();
            // DefaultTableCellRenderer renderer2=new DefaultTableCellRenderer(jcheck;
            // TableCellEditor editor=new javax.swing.DefaultCellEditor(jtextField);
            CalendarTableRenderer renderer = new CalendarTableRenderer();
            // DefaultTableCellRenderer renderer=new ColoredTableCellRenderer();
            //renderer.setHorizontalAlignment(model.m_columns[k].c_alignement);
            TableColumn column;
            // if(k==4)
            //   column=new TableColumn(k,model.m_columns[k].c_width,renderer2,editor);
            // else
            column = new TableColumn(k, 10, renderer, null);
            jTable1.addColumn(column);
        }
        jTable1.tableChanged(new TableModelEvent(model));
        jLabel1.setText(model.month);
        //  JTableHeader header=grp_table_list.getTableHeader();
        // header.setUpdateTableInRealTime(false);
        // changeSelection(0);
    }

    public void refresh() {
        model.refresh(m_date);
        jTable1.tableChanged(new TableModelEvent(model));
    }


    /**
     * This method is called from within the constructor to
     * <p/>
     * initialize the form.
     * <p/>
     * WARNING: Do NOT modify this code. The content of this method is
     * <p/>
     * always regenerated by the Form Editor.
     */

    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 0, 0));
        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        setClosable(true);
        setName("agenda");
        jTable1.setBackground(new java.awt.Color(255, 204, 102));
        jTable1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jTable1.setFont(new java.awt.Font("Verdana", 1, 12));
        jTable1.setModel(new javax.swing.table.DefaultTableModel());
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setColumnSelectionAllowed(true);
        jTable1.setEditingColumn(0);
        jTable1.setEditingRow(0);
        jTable1.setFocusCycleRoot(true);
        jTable1.setGridColor(new java.awt.Color(0, 0, 0));
        jTable1.setPreferredScrollableViewportSize(new java.awt.Dimension(650, 348));
        jTable1.setPreferredSize(new java.awt.Dimension(650, 348));
        jTable1.setRowHeight(50);
        jTable1.setSurrendersFocusOnKeystroke(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });

        getContentPane().add(jTable1, java.awt.BorderLayout.CENTER);

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 12));
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("A G E N D A");
        getContentPane().add(jLabel2, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(204, 0, 0));
        jPanel1.setPreferredSize(new java.awt.Dimension(15, 17));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBackground(new java.awt.Color(204, 0, 0));
        jLabel1.setFont(new java.awt.Font("Verdana", 1, 12));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Ao\u00fbt 2003");
        jLabel1.setMaximumSize(new java.awt.Dimension(9, 16));
        jLabel1.setMinimumSize(new java.awt.Dimension(9, 16));
        jLabel1.setPreferredSize(new java.awt.Dimension(150, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel2.add(jLabel1, gridBagConstraints);

        jButton1.setBackground(new java.awt.Color(255, 204, 102));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/button/previousToFirstArrow.gif")));
        jButton1.setPreferredSize(new java.awt.Dimension(25, 15));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel2.add(jButton1, gridBagConstraints);

        jButton2.setBackground(new java.awt.Color(255, 204, 102));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/button/nextToLastArrow.gif")));
        jButton2.setPreferredSize(new java.awt.Dimension(25, 15));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel2.add(jButton2, gridBagConstraints);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents


    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        // Add your handling code here:

        if (evt.getClickCount() == 2) {
            int day = Integer.parseInt(model.getValue2(jTable1.getSelectedRow(), jTable1.getSelectedColumn()).toString());
            srcastra.astra.sys.classetransfert.utils.Date date = new srcastra.astra.sys.classetransfert.utils.Date(m_date.getYear(), m_date.getMonth(), day);
            task = new AgendaFrame(parent.getSuperOwner(), true, parent.getServeur(), parent.getCurrentUser(), date, this);
            task.show();
            //task = new AgendaTask(superOwner, true, parent);
        }

    }//GEN-LAST:event_jTable1MouseClicked

    //pour décrementer le calendrier

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        // Add your handling code here:


        int b = m_date.getYear();
        int a = m_date.getMonth() - 1;
        if (a == 0)

        {
            b--;

            a = 12;

        }
        m_date.setYear(b);
        m_date.setMonth(a);
        model.refresh(m_date);
        jTable1.tableChanged(new TableModelEvent(model));
        jLabel1.setText(model.month);
        //postInit(a, b);

        this.month = a;

        this.year = b;

    }//GEN-LAST:event_jButton1ActionPerformed

    //pour incrementer le calendrier

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        // Add your handling code here:


        int b = m_date.getYear();
        int a = m_date.getMonth() + 1;
        if (a == 13) {
            b++;
            a = 1;
        }
        m_date.setYear(b);
        m_date.setMonth(a);
        model.refresh(m_date);
        jTable1.tableChanged(new TableModelEvent(model));
        jLabel1.setText(model.month);
        //postInit(a, b);
        //this.month = a;
        //this.year = b;

    }//GEN-LAST:event_jButton2ActionPerformed

    //Les methodes pour l'implementation


    public void postInit(int month, int year) {


        jTable1.setModel(new srcastra.astra.gui.modules.agenda.AgendaTableModel(

                new Object[][]{

                        {"Lundi", null, null, null, null, null, null},

                        {"Mardi", null, null, null, null, null, null},

                        {"Mercredi", null, null, null, null, null, null},

                        {"Jeudi", null, null, null, null, null, null},

                        {"Vendredi", null, null, null, null, null, null},

                        {"Samedi", null, null, null, null, null, null},

                        {"Dimanche", null, null, null, null, null, null}

                },

                new String[]{

                        "1", "2", "3", "4", "5", "6", "7"

                }

        ));


        java.util.Date date;

        c.set(year, month, 1);

        int commence = c.get(c.DAY_OF_WEEK); //gets the day of the week 1 sunday, 2 monday, etc...

        int day = 1;

        int j = commence - 2;

        if (commence == 1)

            commence = 8;

        //initialisation du calencdrier avec les données du mois en cours

        for (int i = 1; (day <= c.getActualMaximum(c.DAY_OF_MONTH) && i <= 6); i++) {

            j = commence - 2;

            while (j <= 6 && day <= c.getActualMaximum(c.DAY_OF_MONTH)) {

                jTable1.setValueAt(new Integer(day).toString(), j, i);
                jTable1.getCellEditor(j, i).getTableCellEditorComponent(jTable1, new Integer(day).toString(), true, j, i).setBackground(java.awt.Color.GREEN);
                jTable1.getCellEditor(j, i).getTableCellEditorComponent(jTable1, new Integer(day).toString(), true, j, i).setForeground(java.awt.Color.GREEN);

                day++;
                j++;


            }
            jTable1.repaint();

            commence = 2;

        }


        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        //initializing label1 text field for month and year

        if (c.get(c.MONTH) == 0)
            jLabel1.setText("Janvier " + c.get(c.YEAR));
        else if (c.get(c.MONTH) == 1)
            jLabel1.setText("Février " + c.get(c.YEAR));
        else if (c.get(c.MONTH) == 2)
            jLabel1.setText("Mars " + c.get(c.YEAR));
        else if (c.get(c.MONTH) == 3)
            jLabel1.setText("April " + c.get(c.YEAR));
        else if (c.get(c.MONTH) == 4)
            jLabel1.setText("Mai " + c.get(c.YEAR));
        else if (c.get(c.MONTH) == 5)
            jLabel1.setText("Juin " + c.get(c.YEAR));
        else if (c.get(c.MONTH) == 6)
            jLabel1.setText("Juillet " + c.get(c.YEAR));
        else if (c.get(c.MONTH) == 7)
            jLabel1.setText("Août " + c.get(c.YEAR));
        else if (c.get(c.MONTH) == 8)
            jLabel1.setText("Septembre " + c.get(c.YEAR));
        else if (c.get(c.MONTH) == 9)
            jLabel1.setText("Octobre " + c.get(c.YEAR));
        else if (c.get(c.MONTH) == 10)
            jLabel1.setText("Novembre " + c.get(c.YEAR));
        else if (c.get(c.MONTH) == 11)
            jLabel1.setText("Décembre " + c.get(c.YEAR));
        jTable1.changeSelection(1, 1, false, false);
    }


    public void actionPerformed(ActionEvent e) {

    }


    public void cancelModule() {

    }


    public void changeCursor(int changeLocation, java.awt.Cursor cursor) {

    }


    public void chargeStatusPanel(String[] statuts) {

    }


    public void closeModule() {

    }


    public void displayCreateSequence() {

    }


    public void displayDeleteSequence() {

    }


    public void displayReadSequence(int cleUnik) {

    }


    public void doAccept() {

    }


    public void doCancel() {

    }


    public void doClose() {

    }


    public void doCreate() {

    }


    public void doDelete() {

    }


    public void doF10() {

    }


    public void doF7() {

    }


    public void doHelp() {

    }


    public void doModify() {

    }


    public void doNext() {

    }


    public void doPrevious() {

    }


    public void doPrint() {

    }


    public void doSwitch() {

    }


    public void enabledTabbedPane(boolean enabled) {

    }


    public Loginusers_T getCurrentUser() {

        return this.currentUser;

    }


    public int[] getDefaultActionToolBarMask() {

        actiontab = new int[]{ActionToolBar.DO_CLOSE, ActionToolBar.DO_F10};

        return actiontab;

    }


    public java.awt.Frame getOwner() {

        return null;

    }


    public astrainterface getServeur() {

        return this.serveur;

    }


    public DossierRmiInterface getServeurDossier() {

        return null;

    }


    public java.awt.Frame getSuperOwner() {

        return superOwner;

    }


    public java.awt.Component m_getGeneriqueTable() {

        return null;

    }


    public void nextScreen(int currentScreen) {

    }


    public void nextScreen(int currentScreen, boolean affich) {

    }


    public void nextScreen(int currentScreen, int insert) {

    }


    public void registerTable(javax.swing.JTable generique_table) {

    }


    public void reloadToolBarInfo() {

    }


    public void saveToolBarInfo() {

    }


    public void setContextCleUnik(int ContextCleUnik) {

    }


    public void setCurrentActionEnabled(int[] actionEnabled) {

    }


    public void setCurrentPanel(srcastra.astra.gui.components.actions.actionToolBar.ToolBarComposer currentPanel) {

    }


    public void setThisAsToolBarComponent() {

    }

    public void doDefaultCloseAction() {

        try {

            serveur.remoterollback(getCurrentUser().getUrcleunik());

        } catch (java.rmi.RemoteException re) {

            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.MISSING_RESSOURCE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);

        }

        InternalFrameEvent closeWindow = new InternalFrameEvent(this, InternalFrameEvent.INTERNAL_FRAME_CLOSING);

        this.iFrameListener.internalFrameClosing(closeWindow);

        super.doDefaultCloseAction();

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables


    public void setNestedSignaletique(boolean booly) {
    }

    public boolean getNestedSignaletique() {

        return false;

    }

}

