/* * DecBuffer.java * * Created on 17 januari 2003, 13:49 */package srcastra.astra.gui.modules.aidedesicion;import java.util.*;import srcastra.astra.gui.sys.AString;/** * @author Thomas */public class DecBuffer extends AbstractBuffer {    /**     * Creates a new instance of DecBuffer     */    boolean graphicBuffer = false;    int NumbeOfElement;    int lmcleunik;    public DecBuffer() {    }    public DecBuffer(String s) {    }    public DecBuffer(java.util.ArrayList data, int type) {        this.data = data;        my_type = type;    }    public DecBuffer(java.util.Hashtable data, int type, int id) {        this.data2 = data;        my_type = type;    }    public DecBuffer(java.util.ArrayList data, int type, int id) {        this.data = data;        my_type = type;        this.id = id;    }    public DecBuffer(int type) {        this.data = data;        my_type = type;        this.id = id;    }    public void addChildren(Object children) {    }    public void modifyChildren(Object children) {    }    public void removeChildren(String id, int type) {        DecBuffer buff;        boolean sw = true;        if (children != null) {            buff = (DecBuffer) children.get(new Integer(type));            if (buff != null) {                buff.removeChildren(id, type);            } else {                sw = false;            }        } else {            if (leaf == null) {                System.out.println("leaf null");                sw = false;            } else {                leaf.remove(new Integer(id));                System.out.println("remov effectué");            }        }        if (sw)            timestamp = System.currentTimeMillis();    }    public void importDirectory(Object directory, Object key) {        if (children == null)            children = new Hashtable();        children.put(key, directory);    }    /**     * Getter for property data.     *     * @return Value of property data.     */    public java.util.ArrayList getData() {        return data;    }    public Object getData3(int type, int id, AbstractBuffer retval) {        Enumeration e = getChildrenKeys(children);        DecBuffer tmpbuf;        String s = null;        if (e != null) {            tmpbuf = (DecBuffer) children.get(new Integer(type));            return tmpbuf.getData3(type, id, retval);            //return retval;            // System.out.println("[[[[[[[[ type du produit]]]]]]]]]2"+typProduit);        } else {            if (leaf != null)                retval = (AbstractBuffer) leaf.get(new Integer(id));        }        return retval;    }    /**     * Setter for property data.     *     * @param data New value of property data.     */    public void setData(java.util.ArrayList data, int id, int my_type) {        DecBuffer buff;        if (children != null) {            buff = (DecBuffer) children.get(new Integer(my_type));            if (buff != null) {                buff.setData(data, id, my_type);            } else {                buff = new DecBuffer(my_type);                children.put(new Integer(my_type), buff);                buff.setData(data, id, my_type);            }        } else {            buff = new DecBuffer(data, my_type, id);            if (leaf == null) leaf = new Hashtable();            leaf.put(new Integer(id), buff);            System.out.println("[[[[[[[[ type du produit]]]]]]]]]" + id);            this.my_type = my_type;        }        timestamp = System.currentTimeMillis();    }    public void setData(java.util.Hashtable data, int id, int my_type) {        DecBuffer buff;        if (children != null) {            buff = (DecBuffer) children.get(new Integer(my_type));            if (buff != null) {                buff.setData(data, id, my_type);            } else {                buff = new DecBuffer(my_type);                children.put(new Integer(my_type), buff);                buff.setData(data, id, my_type);            }        } else {            buff = new DecBuffer(data, my_type, id);            if (leaf == null) leaf = new Hashtable();            leaf.put(new Integer(id), buff);            System.out.println("[[[[[[[[ type du produit]]]]]]]]]" + id);            this.my_type = my_type;        }        timestamp = System.currentTimeMillis();    }    public void setData(java.util.ArrayList data, int id, int my_type, long timestamp) {        DecBuffer buff;        if (children != null) {            buff = (DecBuffer) children.get(new Integer(my_type));            if (buff != null) {                buff.setData(data, id, my_type);            } else {                buff = new DecBuffer(my_type);                children.put(new Integer(my_type), buff);                buff.setData(data, id, my_type);            }        } else {            buff = new DecBuffer(data, my_type, id);            if (leaf == null) leaf = new Hashtable();            leaf.put(new Integer(id), buff);            System.out.println("[[[[[[[[ type du produit]]]]]]]]]" + id);        }        this.my_type = my_type;        this.timestamp = timestamp;    }    public int getMyType() {        return my_type;    }    public Enumeration getChildrenKeys(Hashtable hash) {        Enumeration tmp = null;        if (hash == null) ;        else            tmp = hash.keys();        return tmp;    }    public void afficheMe() {        Enumeration e = getChildrenKeys(children);        AbstractBuffer tmpbuf;        String s = null;        if (e != null) {            while (e.hasMoreElements()) {                Object id = e.nextElement();                tmpbuf = (AbstractBuffer) children.get(id);                // System.out.println("Type de produit= "+id.toString());                tmpbuf.afficheMe();            }        } else {            e = getChildrenKeys(leaf);            if (e != null) {                while (e.hasMoreElements()) {                    Object id = e.nextElement();                    tmpbuf = (AbstractBuffer) leaf.get(id);                    ArrayList tmpArray = tmpbuf.getData();                    if (tmpArray != null) {                        System.out.println("Ligne de décision " + id);                        for (int i = 0; i < tmpArray.size(); i++) {                            System.out.println("Traduction " + i + "\n\n");                            Object[] tmpTab = (Object[]) tmpArray.get(i);                            if (tmpTab != null) {                                for (int j = 0; j < tmpTab.length; j++) {                                    if (j == 0)                                        s = "ID " + tmpTab[j];                                    else if (j == 1)                                        s = " Type de produit " + tmpTab[j];                                    else if (j == 2)                                        s = " Langue " + tmpTab[j];                                    else if (j == 3)                                        s = " Traduction " + tmpTab[j].toString();                                    System.out.println(s);                                }                            }                            System.out.println("\n\n");                        }                    }                }            }        }    }    public void setFullData(ArrayList data) {        Enumeration e = getChildrenKeys(children);        AbstractBuffer tmpbuf;        String s = null;        if (e != null) {            while (e.hasMoreElements()) {                Object id = e.nextElement();                tmpbuf = (AbstractBuffer) children.get(id);                tmpbuf.setFullData(data);            }        } else {            for (int i = 0; i < data.size(); i++) {                Object[] tmp = (Object[]) data.get(i);            }            e = getChildrenKeys(leaf);            if (e != null) {                while (e.hasMoreElements()) {                    Object id = e.nextElement();                    tmpbuf = (AbstractBuffer) leaf.get(id);                    ArrayList tmpArray = tmpbuf.getData();                    if (tmpArray != null) {                        System.out.println("Ligne de décision " + id);                        for (int i = 0; i < tmpArray.size(); i++) {                            System.out.println("Traduction " + i + "\n\n");                            Object[] tmpTab = (Object[]) tmpArray.get(i);                            if (tmpTab != null) {                                for (int j = 0; j < tmpTab.length; j++) {                                    if (j == 0)                                        s = "ID " + tmpTab[j];                                    else if (j == 1)                                        s = "Type de produit " + tmpTab[j];                                    else if (j == 2)                                        s = "Langue " + tmpTab[j];                                    else if (j == 3)                                        s = "Traduction " + tmpTab[j].toString();                                    System.out.println(s);                                }                            }                            System.out.println("\n\n");                        }                    }                }            }        }        timestamp = System.currentTimeMillis();    }    public void fillVector(Vector vector, int typProduit) {        Enumeration e = getChildrenKeys(children);        DecBuffer tmpbuf;        String s = null;        if (e != null) {            tmpbuf = (DecBuffer) children.get(new Integer(typProduit));            System.out.println("[[[[[[[[ type du produit]]]]]]]]]2" + typProduit);            tmpbuf.fillVector(vector, typProduit);        } else {            e = getChildrenKeys(leaf);            if (e != null) {                while (e.hasMoreElements()) {                    Object[] filvector = new Object[7];                    Object id = e.nextElement();                    tmpbuf = (DecBuffer) leaf.get(id);                    ArrayList tmpArray = tmpbuf.getData();                    if (tmpArray != null) {                        System.out.println("Ligne de décision " + id);                        for (int i = 0; i < tmpArray.size(); i++) {                            System.out.println("Traduction " + i + "\n\n");                            Object[] tmpTab = (Object[]) tmpArray.get(i);                            if (tmpTab != null) {                                filvector[i] = tmpTab[3];                            }                        }                        filvector[5] = id;                        vector.addElement(filvector);                        System.out.println("\n\n");                    }                }            }        }    }    public void generateTable(int produit) {        if (arrays == null)            arrays = new Hashtable();        if (arrayNL == null)            arrayNL = new Hashtable();        ArrayList tmp = new ArrayList();        tmp = fillVectorListe(tmp, produit, 1);        if (tmp == null)            tmp = new ArrayList();        arrays.put(new Integer(produit), tmp);        tmp = new ArrayList();        tmp = fillVectorListe(tmp, produit, 2);        if (tmp == null)            tmp = new ArrayList();        arrayNL.put(new Integer(produit), tmp);    }    public void generateTable() {        arrays = new Hashtable();        arrayNL = new Hashtable();        for (int i = 1; i <= getNumbeOfElement(); i++) {            ArrayList tmp = new ArrayList();            tmp = fillVectorListe(tmp, i, 1);            if (tmp != null)                arrays.put(new Integer(i), tmp);            tmp = new ArrayList();            tmp = fillVectorListe(tmp, i, 2);            if (tmp != null)                arrayNL.put(new Integer(i), tmp);        }    }    public ArrayList fillVectorListe(ArrayList vector, int typProduit, int langue) {        Enumeration e = getChildrenKeys(children);        DecBuffer tmpbuf;        String s = null;        if (e != null) {            tmpbuf = (DecBuffer) children.get(new Integer(typProduit));            System.out.println("[[[[[[[[ type du produit]]]]]]]]]2" + typProduit);            if (tmpbuf != null)                return tmpbuf.fillVectorListe(vector, typProduit, langue);        } else {            e = getChildrenKeys(leaf);            if (e != null) {                int size = leaf.size();                //if(vector2==null)                vector2 = new ArrayList();                while (e.hasMoreElements()) {                    Object id = e.nextElement();                    tmpbuf = (DecBuffer) leaf.get(id);                    ArrayList tmpArray = tmpbuf.getData();                    if (tmpArray != null) {                        System.out.println("Ligne de décision " + id);                        Object[] tmpTab = (Object[]) tmpArray.get(langue - 1);                        if (tmpTab != null) {                            vector2.add(tmpTab);                        }                        System.out.println("\n\n");                    }                }            }        }        return vector2;    }    /**     * Getter for property data2.     *     * @return Value of property data2.     */    public java.util.Hashtable getData2() {        return data2;    }    /**     * Getter for property graphicBuffer.     *     * @return Value of property graphicBuffer.     */    public boolean isGraphicBuffer() {        return graphicBuffer;    }    /**     * Setter for property graphicBuffer.     *     * @param graphicBuffer New value of property graphicBuffer.     */    public void setGraphicBuffer(boolean graphicBuffer) {        this.graphicBuffer = graphicBuffer;    }    /**     * Getter for property NumbeOfElement.     *     * @return Value of property NumbeOfElement.     */    public int getNumbeOfElement() {        return NumbeOfElement;    }    /**     * Setter for property NumbeOfElement.     *     * @param NumbeOfElement New value of property NumbeOfElement.     */    public void setNumbeOfElement(int NumbeOfElement) {        this.NumbeOfElement = NumbeOfElement;    }    /**     * Getter for property lmcleunik.     *     * @return Value of property lmcleunik.     */    public int getLmcleunik() {        return lmcleunik;    }    /**     * Setter for property lmcleunik.     *     * @param lmcleunik New value of property lmcleunik.     */    public void setLmcleunik(int lmcleunik) {        this.lmcleunik = lmcleunik;    }    /**     * Getter for property arrays.     *     * @return Value of property arrays.     */    public java.util.Hashtable getArrays(int lmcleunik) {        if (lmcleunik == 2)            return arrayNL;        else            return arrays;    }    /**     * Setter for property arrays.     *     * @param arrays New value of property arrays.     */    public void setArrays(java.util.Hashtable arrays) {        this.arrays = arrays;    }    int y = 1;    ArrayList vector2;    ArrayList data;    Hashtable leaf;    Hashtable children;    Hashtable data2;    int my_type;    int id;    Hashtable arrays;    Hashtable arrayNL;}