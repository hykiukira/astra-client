/*





 * ConfigModule.java





 *





 * Created on 22 janvier 2003, 9:56





 */


package srcastra.astra.gui.modules.config;


import srcastra.astra.sys.classetransfert.Loginusers_T;


import srcastra.astra.sys.rmi.astrainterface;


import srcastra.astra.gui.modules.*;


import srcastra.astra.gui.modules.mainScreenModule.DossierMainScreenModule;


import srcastra.astra.gui.components.actions.actionToolBar.*;


import srcastra.astra.gui.components.AIframe;


import srcastra.astra.gui.sys.ErreurScreenLibrary;


import srcastra.astra.sys.rmi.DossierRmiInterface;


import srcastra.astra.sys.classetransfert.dossier.*;


import srcastra.astra.gui.sys.tableModel.dossierTableModel.DossierTableModelInterface;


import java.util.ArrayList;


import srcastra.astra.gui.sys.MessageManager;


import srcastra.astra.sys.classetransfert.dossier.avion.Avion_ticket_T;


import java.util.*;


import java.text.*;


import srcastra.astra.sys.classetransfert.utils.*;


import srcastra.astra.gui.sys.utils.*;


import java.awt.*;


import srcastra.astra.sys.classetransfert.dossier.assurance.*;


import srcastra.astra.sys.classetransfert.dossier.brochure.*;


import srcastra.astra.sys.classetransfert.dossier.hotel.*;


import srcastra.astra.sys.classetransfert.dossier.bateau.*;


import srcastra.astra.sys.classetransfert.dossier.train.*;


import srcastra.astra.sys.classetransfert.dossier.voitureLocation.*;


import srcastra.astra.sys.classetransfert.dossier.taxi.*;


import srcastra.astra.sys.compta.*;


import javax.swing.event.InternalFrameEvent;


import srcastra.astra.gui.modules.dossier.InterfaceModuleDossier;


import javax.swing.event.InternalFrameListener.*;


import srcastra.astra.gui.modules.aidedesicion.*;


import srcastra.astra.gui.modules.dossier.productSpecification.gestionnairepaneaux.*;


/**
 * @author Thomas
 */


public class ConfigModule extends javax.swing.JInternalFrame implements MainScreenModule, AIframe {


    /**
     * Creates new form ConfigModule
     */


    astrainterface serveur;


    Loginusers_T currentUser;


    javax.swing.event.InternalFrameListener iFrameListener;


    AbstractConfig panel;


    ActionToolBar m_actiontoolbar;


    public ConfigModule(java.awt.Frame superOwner, astrainterface serveur, Loginusers_T currentUser, ActionToolBar actionToolBar, javax.swing.event.InternalFrameListener iFrameListener, int panelType, srcastra.astra.gui.MainFrame mainframe, int typeDecision, boolean multiline) {


        initComponents();


        m_actiontoolbar = actionToolBar;


        this.serveur = serveur;


        this.currentUser = currentUser;


        this.iFrameListener = iFrameListener;


        this.addInternalFrameListener(iFrameListener);


        substitutDossierModule dossierModule = new substitutDossierModule(serveur, currentUser);


        dossierModule.setModule(this);


        dossierModule.setMainFrame(mainframe);


        if (panelType == 0)


            panel = new decision(dossierModule, actionToolBar, null, typeDecision, multiline, (Hashtable) mainframe.getGenerale().get(new Integer(typeDecision)));


        else if (panelType == 1)


            panel = new DecisionMemo(dossierModule, actionToolBar, null, typeDecision, multiline, (Hashtable) mainframe.getGenerale().get(new Integer(typeDecision)));


        else if (panelType == 2)


            panel = new LegalImpression(dossierModule, actionToolBar, null, typeDecision, multiline, (Hashtable) mainframe.getGenerale().get(new Integer(typeDecision)));


        else if (panelType == 3)


            panel = new DescriptifLogement(dossierModule, actionToolBar, null, typeDecision, multiline, (Hashtable) mainframe.getGenerale().get(new Integer(typeDecision)));


        else if (panelType == 4)


            panel = new Divers(dossierModule, actionToolBar, null, typeDecision, multiline, (Hashtable) mainframe.getGenerale().get(new Integer(typeDecision)));


        getContentPane().add(panel, java.awt.BorderLayout.CENTER);


    }


    /**
     * This method is called from within the constructor to
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * initialize the form.
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * WARNING: Do NOT modify this code. The content of this method is
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * always regenerated by the Form Editor.
     */


    private void initComponents() {//GEN-BEGIN:initComponents


        setClosable(true);


        setIconifiable(true);


        setTitle(java.util.ResourceBundle.getBundle("srcastra/astra/locale/IFrame").getString("IF_aide_dec"));


        setName(java.util.ResourceBundle.getBundle("srcastra/astra/locale/IFrame").getString("IF_aide_dec"));


        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {


            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {


                formInternalFrameOpened(evt);


            }


            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {


            }


            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {


            }


            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {


            }


            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {


            }


            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {


                formInternalFrameActivated(evt);


            }


            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {


            }


        });


        setBounds(0, 0, 730, 520);


    }//GEN-END:initComponents


    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated


        if (panel != null) {


            System.out.println("Active config module");


            m_actiontoolbar.setTbComposer((ToolBarComposer) panel);


            m_actiontoolbar.setActionEnabled(panel.getDefaultActionToolBarMask());


        }


    }//GEN-LAST:event_formInternalFrameActivated


    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened


        panel.setElementFocus();


    }//GEN-LAST:event_formInternalFrameOpened


    /**
     * Fermeture de l'écran courrant et passage
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * à l'écran d'index du module
     */


    public void cancelModule() {


        doDefaultCloseAction();


    }


    public void changeCursor(int changeLocation, java.awt.Cursor cursor) {


    }


    public void doDefaultCloseAction() {


        super.doDefaultCloseAction();


        try {


            serveur.remoterollback(this.currentUser.getUrcleunik());


        } catch (java.rmi.RemoteException re) {


            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.MISSING_RESSOURCE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);


        }


        InternalFrameEvent closeWindow = new InternalFrameEvent(this, InternalFrameEvent.INTERNAL_FRAME_CLOSING);


        this.iFrameListener.internalFrameClosing(closeWindow);


        dispose();


    }


    /**
     * Permet de charger le panel des statuts
     */


    public void chargeStatusPanel(String[] statuts) {


    }


    /**
     * Ferme le module
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * (dans Astra -> JInternalFrame)
     */


    public void closeModule() {


    }


    /**
     * Lance la séquence de création
     */


    public void displayCreateSequence() {


    }


    /**
     * Lance la séquence de suppression
     */


    public void displayDeleteSequence() {


    }


    /**
     * Lance la séquence de lecture
     */


    public void displayReadSequence(int cleUnik) {


    }


    /**
     * Permet de changer l'état de la TabbedPane dans le pricipal
     */


    public void enabledTabbedPane(boolean enabled) {


    }


    public Loginusers_T getCurrentUser() {


        return null;


    }


    public boolean getNestedSignaletique() {


        return true;


    }


    public java.awt.Frame getOwner() {


        return null;


    }


    public astrainterface getServeur() {


        return null;


    }


    public DossierRmiInterface getServeurDossier() {


        return null;


    }


    public java.awt.Frame getSuperOwner() {


        return null;


    }


    /**
     * Passage à l'écran suivant
     *
     * @param currentScreen numéro de l'écran courrant
     */


    public void nextScreen(int currentScreen) {


    }


    /**
     * Passage à l'écran suivant
     *
     * @param currentScreen numéro de l'écran courrant
     */


    public void nextScreen(int currentScreen, boolean affich) {


    }


    public void reloadToolBarInfo() {


    }


    /**
     * Fixe la clé unique dans le module parent
     *
     * @param ContextCleUnik clé unique
     */


    public void setContextCleUnik(int ContextCleUnik) {


    }


    /**
     * permet d'établir une liste d'action choisie comme étant les actions de la ToobBar
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * + permet à la classe principale du modules de pouvoir sauvegarder le tableau des actions
     */


    public void setCurrentActionEnabled(int[] actionEnabled) {


    }


    /**
     * permet d'établir un panneau comme panneau gestionnaire de la toolbar (voir tbComposer) +
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * permet à la classe principale du modules de pouvoir sauvegarder l'objet TbComposer
     */


    public void setCurrentPanel(srcastra.astra.gui.components.actions.actionToolBar.ToolBarComposer currentPanel) {


    }


    public void setNestedSignaletique(boolean netstedSignletique) {


    }


    public void saveToolBarInfo() {


    }


    public void registerTable(javax.swing.JTable generique_table) {


    }


    public void nextScreen(int currentScreen, int insert) {


    }


    int[] tabCurrentState;

    // Variables declaration - do not modify//GEN-BEGIN:variables

    // End of variables declaration//GEN-END:variables


}





