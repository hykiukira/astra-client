/* * JInternalFrame.java * * Created on 12 août 2003, 13:24 */package srcastra.astra.gui.modules.compta.achat;import srcastra.astra.gui.modules.mainScreenModule.*;import srcastra.astra.gui.components.celleditor.*;import srcastra.astra.gui.modules.*;import javax.swing.*;import javax.swing.table.AbstractTableModel;import java.util.Vector;import srcastra.astra.gui.modules.mainScreenModule.DossierMainScreenModule;import srcastra.astra.sys.classetransfert.Loginusers_T;import java.util.*;import javax.swing.table.*;import srcastra.astra.gui.components.combobox.liste.*;import srcastra.astra.gui.components.tva.*;import srcastra.astra.sys.rmi.*;import srcastra.astra.gui.test.*;import srcastra.astra.gui.components.*;import srcastra.astra.gui.components.actions.actionToolBar.*;import srcastra.astra.gui.sys.formVerification.*;import java.awt.event.*;import srcastra.astra.gui.components.textFields.*;import srcastra.astra.gui.test.ColumnData;import srcastra.astra.gui.sys.*;import java.awt.event.*;import javax.swing.event.*;import srcastra.astra.sys.classetransfert.utils.*;import srcastra.astra.gui.list.*;import srcastra.astra.sys.classetransfert.configuration.*;//ajout de Driart le 12 aout 2003import java.io.*;//end ajout/** * @author x */public class MenuDesFichiers extends javax.swing.JInternalFrame implements MainScreenModule, AIframe, ActionListener, ToolBarComposer {    /**     * Creates new form JInternalFrame     */    javax.swing.event.InternalFrameListener iFrameListener;    astrainterface serveur;    Loginusers_T currentUser;    public MenuDesFichiers(java.awt.Frame superOwner, astrainterface serveur, Loginusers_T currentUser, ActionToolBar actionToolBar, javax.swing.event.InternalFrameListener iFrameListener) {        initComponents();        this.iFrameListener = iFrameListener;        this.serveur = serveur;        this.currentUser = currentUser;    }    /**     * This method is called from within the constructor to     * <p/>     * <p/>     * initialize the form.     * <p/>     * <p/>     * WARNING: Do NOT modify this code. The content of this method iimplements MainScreenModule, AIframe,ActionListener,ToolBarComposer {s     * <p/>     * <p/>     * always regenerated by the Form Editor.     */    private void initComponents() {//GEN-BEGIN:initComponents        jFileChooser1 = new javax.swing.JFileChooser();        setName("integration");        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                jFileChooser1ActionPerformed(evt);            }        });        getContentPane().add(jFileChooser1, java.awt.BorderLayout.CENTER);        pack();    }//GEN-END:initComponents    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed        ArrayList integrated = null;        // Add your handling code here:        FactureDeFloppy f = new FactureDeFloppy();        FactureDeFloppy[] arr = new FactureDeFloppy[256];        if ((jFileChooser1.getSelectedFile()) != null) {            System.out.println("LE FICHIER SELECTE EST: " + jFileChooser1.getSelectedFile().getAbsolutePath());            try {                BufferedReader in = new BufferedReader(new FileReader(jFileChooser1.getSelectedFile().getAbsolutePath()));                String buffer = new String();                // buffer=in.readLine();                String ends = new String();                //ends=char(10);                // System.out.println(buffer.charAt(buffer.length()-1));                // if ( (buffer = in.readLine()) != null && buffer.endsWith("# ")) {// in.close();                //String c = (String)10;                String c = "\r";                System.out.println(buffer);                buffer = in.readLine();                if (buffer != null) {                    buffer = buffer.substring(0, buffer.length() - 1) + "#";                }                if (buffer.endsWith("#")) { // (buffer = in.readLine()) != null && buffer.endsWith(c)){                    arr = f.SetFactureDeFloppy(jFileChooser1.getSelectedFile().getAbsolutePath());                    int i = 0;                    Calendar c1 = Calendar.getInstance();                    long longtime = c1.getTimeInMillis();                    for (i = 0; i < arr.length; i++) {                        //do{                        if (arr[i] != null) {                            try {                                try {                                    serveur.renvDossierRmiObject(currentUser.getUrcleunik()).insertFactureIntoDatabase(arr[i], currentUser.getUrcleunik(), longtime);                                } catch (srcastra.astra.sys.rmi.Exception.ServeurSqlFailure se) {                                    ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se);                                }                            } catch (java.rmi.RemoteException re) {                                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);                            }                        }                    }                    // i++;                    //  }while ( in.readLine() != null );                    Entite e = null;                    try {                        integrated = serveur.renvDossierRmiObject(currentUser.getUrcleunik()).getListingIntegrationFacture(currentUser.getUrcleunik(), 0);                        String from;                        ArrayList data = serveur.renvEntiteRmiObject(currentUser.getUrcleunik()).getList(currentUser.getUrcleunik(), currentUser.getUreecleunik());                        int cpt = 0;                        boolean found = false;                        while (!found && cpt < data.size()) {                            e = (Entite) data.get(cpt);                            if (e.getEecleunik() == currentUser.getUreecleunik())                                found = true;                            cpt++;                        }                        from = e.getEemail();                        new DossierReport(null, from).prepareIntegratedAchat(currentUser, integrated);                    } catch (srcastra.astra.sys.rmi.Exception.ServeurSqlFailure se) {                        ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se);                    }                    System.out.println("sssssss");                    // new JOptionPane().showInternalMessageDialog(this, java.util.ResourceBundle.getBundle("srcastra/astra/locale/compta", currentUser.getLangage()).getString("integration"), java.util.ResourceBundle.getBundle("srcastra/astra/locale/compta", currentUser.getLangage()).getString("Avertissement"), 1);                } else {                    new JOptionPane().showInternalMessageDialog(this, java.util.ResourceBundle.getBundle("srcastra/astra/locale/compta", currentUser.getLangage()).getString("integration_failure"), java.util.ResourceBundle.getBundle("srcastra/astra/locale/compta", currentUser.getLangage()).getString("Avertissement"), 0);                    System.out.println("Ce n'est pas un bon fichier");                }            } catch (IOException sn) {                System.out.println("erreur lors de la lecture ou ouvereture du fichier");            }        }        //dissapear window code here ...        this.doDefaultCloseAction();    }//GEN-LAST:event_jFileChooser1ActionPerformed    public void actionPerformed(ActionEvent e) {    }    public void cancelModule() {    }    public void changeCursor(int changeLocation, java.awt.Cursor cursor) {    }    public void doDefaultCloseAction() {        try {            serveur.remoterollback(getCurrentUser().getUrcleunik());        } catch (java.rmi.RemoteException re) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.MISSING_RESSOURCE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);        }        InternalFrameEvent closeWindow = new InternalFrameEvent(this, InternalFrameEvent.INTERNAL_FRAME_CLOSING);        this.iFrameListener.internalFrameClosing(closeWindow);        super.doDefaultCloseAction();    }    public void chargeStatusPanel(String[] statuts) {    }    public void closeModule() {    }    public void displayCreateSequence() {    }    public void displayDeleteSequence() {    }    public void displayReadSequence(int cleUnik) {    }    public void doAccept() {    }    public void doCancel() {    }    public void doClose() {        doDefaultCloseAction();    }    public void doCreate() {    }    public void doDelete() {    }    public void doF10() {    }    public void doF7() {    }    public void doHelp() {    }    public void doModify() {    }    public void doNext() {    }    public void doPrevious() {    }    public void doPrint() {    }    public void doSwitch() {    }    public void enabledTabbedPane(boolean enabled) {    }    public Loginusers_T getCurrentUser() {        return currentUser;    }    public int[] getDefaultActionToolBarMask() {        return null;    }    public boolean getNestedSignaletique() {        return true;    }    public java.awt.Frame getOwner() {        return null;    }    public astrainterface getServeur() {        return serveur;    }    public DossierRmiInterface getServeurDossier() {        return null;    }    public java.awt.Frame getSuperOwner() {        return null;    }    public java.awt.Component m_getGeneriqueTable() {        return null;    }    public void nextScreen(int currentScreen) {    }    public void nextScreen(int currentScreen, boolean affich) {    }    public void nextScreen(int currentScreen, int insert) {    }    public void registerTable(javax.swing.JTable generique_table) {    }    public void reloadToolBarInfo() {    }    public void saveToolBarInfo() {    }    public void setContextCleUnik(int ContextCleUnik) {    }    public void setCurrentActionEnabled(int[] actionEnabled) {    }    public void setCurrentPanel(srcastra.astra.gui.components.actions.actionToolBar.ToolBarComposer currentPanel) {    }    public void setNestedSignaletique(boolean netstedSignletique) {    }    public void setThisAsToolBarComponent() {    }    // Variables declaration - do not modify//GEN-BEGIN:variables    private javax.swing.JFileChooser jFileChooser1;    // End of variables declaration//GEN-END:variables}