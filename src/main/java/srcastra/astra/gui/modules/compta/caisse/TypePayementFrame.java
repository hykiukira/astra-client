/*

 * TypePayementFrame.java

 *

 * Created on 28 août 2003, 16:43

 */


package srcastra.astra.gui.modules.compta.caisse;

import srcastra.astra.gui.modules.mainScreenModule.*;

import srcastra.astra.gui.components.celleditor.*;

import srcastra.astra.gui.modules.*;

import javax.swing.*;

import javax.swing.table.AbstractTableModel;

import java.util.Vector;

import srcastra.astra.gui.modules.mainScreenModule.DossierMainScreenModule;

import srcastra.astra.sys.classetransfert.Loginusers_T;

import java.util.*;

import javax.swing.table.*;

import srcastra.astra.gui.components.combobox.liste.*;

import srcastra.astra.gui.components.tva.*;

import srcastra.astra.sys.rmi.*;

import srcastra.astra.gui.test.*;

import srcastra.astra.gui.components.*;

import srcastra.astra.gui.components.actions.actionToolBar.*;

import srcastra.astra.gui.sys.formVerification.*;

import java.awt.event.*;

import srcastra.astra.gui.components.textFields.*;

import srcastra.astra.gui.test.ColumnData;

import srcastra.astra.gui.sys.*;

import java.awt.event.*;

import javax.swing.event.*;

import srcastra.astra.sys.classetransfert.utils.*;

import javax.swing.border.*;

import java.awt.event.*;

import srcastra.astra.gui.modules.config.*;

/**
 * @author Thomas
 */

public class TypePayementFrame extends javax.swing.JInternalFrame implements MainScreenModule, AIframe, ActionListener, ToolBarComposer, srcastra.astra.gui.modules.config.ModuleInterface {


    /**
     * Creates new form TypePayementFrame
     */

    javax.swing.event.InternalFrameListener iFrameListener;

    astrainterface serveur;

    Loginusers_T currentUser;

    TypePayement payement;

    CaisseLibelle caisselib;

    AIframe panel;

    ActionToolBar actionToolBar;

    public TypePayementFrame(java.awt.Frame superOwner, astrainterface serveur, Loginusers_T currentUser, ActionToolBar actionToolBar, javax.swing.event.InternalFrameListener iFrameListener, int type) {

        this.serveur = serveur;

        this.currentUser = currentUser;

        this.actionToolBar = actionToolBar;

        initComponents();

        this.iFrameListener = iFrameListener;

        this.addInternalFrameListener(iFrameListener);

        if (type == 0) {

            panel = new TypePayement(this, actionToolBar, null);

            // payement=new TypePayement(this,actionToolBar,null);

            getContentPane().add((TypePayement) panel);

            setName("typay");

        } else {

            panel = new CaisseLibelle(this, actionToolBar, null);

            getContentPane().add((CaisseLibelle) panel);

            setName("cailib");

        }


    }


    /**
     * This method is called from within the constructor to
     * <p/>
     * initialize the form.
     * <p/>
     * WARNING: Do NOT modify this code. The content of this method is
     * <p/>
     * always regenerated by the Form Editor.
     */

    private void initComponents() {//GEN-BEGIN:initComponents


        setClosable(true);

        setIconifiable(true);

        setPreferredSize(new java.awt.Dimension(730, 520));

        pack();

    }//GEN-END:initComponents


    public void actionPerformed(java.awt.event.ActionEvent actionEvent) {

    }


    /**
     * Fermeture de l'écran courrant et passage
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * à l'écran d'index du module
     */

    public void cancelModule() {

    }


    public void changeCursor(int changeLocation, java.awt.Cursor cursor) {

    }


    /**
     * Permet de charger le panel des statuts
     */

    public void chargeStatusPanel(String[] statuts) {

    }


    /**
     * Ferme le module
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * (dans Astra -> JInternalFrame)
     */

    public void closeModule() {

    }


    /**
     * Lance la séquence de création
     */

    public void displayCreateSequence() {

    }


    /**
     * Lance la séquence de suppression
     */

    public void displayDeleteSequence() {

    }


    /**
     * Lance la séquence de lecture
     */

    public void displayReadSequence(int cleUnik) {

    }


    public void doAccept() {

    }


    public void doCancel() {

    }


    public void doClose() {

    }


    public void doCreate() {

    }


    public void doDelete() {

    }


    public void doF10() {

    }


    public void doF7() {

    }


    public void doHelp() {

    }


    public void doModify() {

    }


    public void doNext() {

    }


    public void doPrevious() {

    }


    public void doPrint() {

    }


    public void doSwitch() {

    }


    /**
     * Permet de changer l'état de la TabbedPane dans le pricipal
     */

    public void enabledTabbedPane(boolean enabled) {

    }


    public Loginusers_T getCurrentUser() {

        return currentUser;

    }


    public int[] getDefaultActionToolBarMask() {

        return null;

    }


    public boolean getNestedSignaletique() {

        return false;

    }


    public java.awt.Frame getOwner() {

        return null;

    }


    public astrainterface getServeur() {

        return serveur;

    }


    public DossierRmiInterface getServeurDossier() {

        return null;

    }


    public java.awt.Frame getSuperOwner() {

        return null;

    }


    public java.awt.Component m_getGeneriqueTable() {

        return null;

    }


    /**
     * Passage à l'écran suivant
     *
     * @param currentScreen numéro de l'écran courrant
     */

    public void nextScreen(int currentScreen) {

    }


    /**
     * Passage à l'écran suivant
     *
     * @param currentScreen numéro de l'écran courrant
     */

    public void nextScreen(int currentScreen, boolean affich) {

    }


    public void nextScreen(int currentScreen, int insert) {

    }


    public void registerTable(javax.swing.JTable generique_table) {

    }


    public void reloadToolBarInfo() {

        panel.reloadToolBarInfo();

        actionToolBar.setTbComposer((ToolBarComposer) panel);

    }


    public void saveToolBarInfo() {

    }


    /**
     * Fixe la clé unique dans le module parent
     *
     * @param ContextCleUnik clé unique
     */

    public void setContextCleUnik(int ContextCleUnik) {

    }


    /**
     * permet d'établir une liste d'action choisie comme étant les actions de la ToobBar
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * + permet à la classe principale du modules de pouvoir sauvegarder le tableau des actions
     */

    public void setCurrentActionEnabled(int[] actionEnabled) {

    }


    /**
     * permet d'établir un panneau comme panneau gestionnaire de la toolbar (voir tbComposer) +
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * <p/>
     * permet à la classe principale du modules de pouvoir sauvegarder l'objet TbComposer
     */

    public void setCurrentPanel(srcastra.astra.gui.components.actions.actionToolBar.ToolBarComposer currentPanel) {

    }


    public void setNestedSignaletique(boolean netstedSignletique) {

    }


    public void setThisAsToolBarComponent() {

    }


    public void enableJtabPane(boolean enable) {

    }


    public srcastra.astra.gui.modules.config.GlobalInterface[] getPanel() {

        return null;

    }


    public ToolBarComposer getToolPanel() {

        return payement;

    }


    public int isBoderPaner() {

        return 1;


    }


    public void next() {

    }


    public void previous() {

    }


    public void setSelectedPanel(int selectedPanel) {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables

    // End of variables declaration//GEN-END:variables


}

