/* * ClientAdressePane.java * * Created on 19 juin 2002, 10:40 */package srcastra.astra.gui.modules.clients;import srcastra.astra.sys.classetransfert.Loginusers_T;import srcastra.astra.sys.rmi.astrainterface;import srcastra.astra.gui.modules.*;import srcastra.astra.gui.components.actions.actionToolBar.*;import srcastra.astra.gui.components.AstraComponent;import javax.swing.*;import srcastra.astra.gui.sys.ErreurScreenLibrary;import srcastra.astra.gui.sys.formVerification.*;import srcastra.astra.sys.classetransfert.clients.ClientsGroupe_T;import javax.swing.KeyStroke;import srcastra.astra.gui.components.textFields.ATextfieldWithButtonComponent;import srcastra.astra.gui.sys.AString;import srcastra.astra.sys.rmi.Exception.*;/** * Cette classe représente le JPanel du Groupement dans les clients * <p/> * <p/> * Elle est utilisée par le composant "ATextFieldWithButton" situé dans la classe * <p/> * <p/> * ClientGeneralInfoPane. (-> champs groupement); * * @author Sébastien Lim */public class ClientGroupementPane extends javax.swing.JPanel implements InternScreenModule, ToolBarComposer, ATextfieldWithButtonComponent {////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// CONSTRUCTOR////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Creates new form ClientAdressePane     *     * @param serveur       instance de la classe astraInterface     * @param currentUser   instance de LoginUser     * @param parent        objet MainScreenPanel     * @param actionToolBar toolBarre     */    public ClientGroupementPane(srcastra.astra.sys.rmi.astrainterface serveur, srcastra.astra.sys.classetransfert.Loginusers_T currentUser, MainScreenModule parent, ActionToolBar actionToolBar) {        this.serveur = serveur;        this.currentUser = currentUser;        this.parent = parent;        this.actionToolBar = actionToolBar;        this.action = actionToolBar.ACT_READ;    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// INITIALISATION////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Initialise les champs graphiques ainsi qu'un tableau pour permettre d'interargir     * <p/>     * <p/>     * sur tous les éléments à partir d'une boucle.     * <p/>     * <p/>     * Les éléments graphiques et le tableau ne sera initialisé qu' 1 fois     */    private void init() {        if (!initOnce) {            // chargement des composants et de leurs propriétes            initComponents();            initComponent2();            setDocumentMask();            // chargement d'un tableau reprenant tous les éléments pour une correction            this.composantToVerif = new AstraComponent[]{grp_TField_Nom};            // les éléments ne sont intialisé qu'1 seule fois            initOnce = true;        }    }    private void setDocumentMask() {        //   grp_TField_Nom.setDocument(new DefaultMask(1, 50, null, currentUser.getLangage(), DefaultMask.ALL_LETTRE_IN_UPPERCASE));    }    /**     * This method is called from within the constructor to     * <p/>     * <p/>     * initialize the form.     * <p/>     * <p/>     * WARNING: Do NOT modify this code. The content of this method is     * <p/>     * <p/>     * always regenerated by the Form Editor.     */    private void initComponents() {//GEN-BEGIN:initComponents        java.awt.GridBagConstraints gridBagConstraints;        jPanel1 = new javax.swing.JPanel();        grp_Pan_inserCombo = new javax.swing.JPanel();        jPanel3 = new javax.swing.JPanel();        grp_ScrollPan_scrollPan = new javax.swing.JScrollPane();        grp_List_grpList = new javax.swing.JList();        jPanel2 = new javax.swing.JPanel();        jPanel5 = new javax.swing.JPanel();        grp_But_add = new javax.swing.JButton();        grp_But_remove = new javax.swing.JButton();        grp_But_FirstElement = new javax.swing.JButton();        grp_But_previousElement = new javax.swing.JButton();        grp_But_nextElement = new javax.swing.JButton();        grp_But_LastElement = new javax.swing.JButton();        grp_But_Cancel = new javax.swing.JButton();        grp_But_modifyGroupement = new javax.swing.JButton();        jPanel4 = new javax.swing.JPanel();        jPanel7 = new javax.swing.JPanel();        jPanel9 = new javax.swing.JPanel();        jPanel10 = new javax.swing.JPanel();        grp_Label_Type = new javax.swing.JLabel();        grp_TField_Nom = new srcastra.astra.gui.components.textFields.ATextField();        jPanel6 = new javax.swing.JPanel();        grp_But_OkAction = new javax.swing.JButton();        grp_But_CancelAction = new javax.swing.JButton();        setLayout(new java.awt.BorderLayout());        setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("srcastra.astra.locale.ModuleClient", currentUser.getLangage()).getString("CGRP_TitrePane")));        jPanel1.setLayout(new java.awt.BorderLayout());        grp_Pan_inserCombo.setLayout(new java.awt.BorderLayout());        grp_Pan_inserCombo.setEnabled(false);        grp_Pan_inserCombo.add(jPanel3, java.awt.BorderLayout.NORTH);        grp_List_grpList.setFont(new java.awt.Font("Tahoma", 0, 10));        grp_ScrollPan_scrollPan.setViewportView(grp_List_grpList);        grp_Pan_inserCombo.add(grp_ScrollPan_scrollPan, java.awt.BorderLayout.CENTER);        jPanel2.setBorder(new javax.swing.border.EtchedBorder());        jPanel5.setLayout(new java.awt.GridBagLayout());        grp_But_add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/button/add.gif")));        grp_But_add.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_add.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_add.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_add.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_add.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                grp_But_addActionPerformed(evt);            }        });        jPanel5.add(grp_But_add, new java.awt.GridBagConstraints());        grp_But_remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/button/remove.gif")));        grp_But_remove.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_remove.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_remove.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_remove.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_remove.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                grp_But_removeActionPerformed(evt);            }        });        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridx = 0;        gridBagConstraints.gridy = 1;        jPanel5.add(grp_But_remove, gridBagConstraints);        grp_But_FirstElement.setIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/button/previousToFirstArrow_up.gif")));        grp_But_FirstElement.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_FirstElement.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_FirstElement.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_FirstElement.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_FirstElement.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                grp_But_FirstElementActionPerformed(evt);            }        });        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridx = 0;        gridBagConstraints.gridy = 4;        jPanel5.add(grp_But_FirstElement, gridBagConstraints);        grp_But_previousElement.setIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/button/previousArrow_up.gif")));        grp_But_previousElement.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_previousElement.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_previousElement.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_previousElement.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_previousElement.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                grp_But_previousElementActionPerformed(evt);            }        });        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridx = 0;        gridBagConstraints.gridy = 5;        jPanel5.add(grp_But_previousElement, gridBagConstraints);        grp_But_nextElement.setIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/button/nextArrow_down.gif")));        grp_But_nextElement.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_nextElement.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_nextElement.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_nextElement.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_nextElement.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                grp_But_nextElementActionPerformed(evt);            }        });        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridx = 0;        gridBagConstraints.gridy = 6;        jPanel5.add(grp_But_nextElement, gridBagConstraints);        grp_But_LastElement.setIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/button/nextToLastArrow_down.gif")));        grp_But_LastElement.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_LastElement.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_LastElement.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_LastElement.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_LastElement.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                grp_But_LastElementActionPerformed(evt);            }        });        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridx = 0;        gridBagConstraints.gridy = 7;        jPanel5.add(grp_But_LastElement, gridBagConstraints);        grp_But_Cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/button/cancelButton.gif")));        grp_But_Cancel.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_Cancel.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_Cancel.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_Cancel.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_Cancel.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                grp_But_CancelActionPerformed(evt);            }        });        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridx = 0;        gridBagConstraints.gridy = 3;        jPanel5.add(grp_But_Cancel, gridBagConstraints);        grp_But_modifyGroupement.setText("jButton1");        grp_But_modifyGroupement.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_modifyGroupement.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_modifyGroupement.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_modifyGroupement.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                grp_But_modifyGroupementActionPerformed(evt);            }        });        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridx = 0;        gridBagConstraints.gridy = 2;        jPanel5.add(grp_But_modifyGroupement, gridBagConstraints);        jPanel2.add(jPanel5);        grp_Pan_inserCombo.add(jPanel2, java.awt.BorderLayout.EAST);        jPanel1.add(grp_Pan_inserCombo, java.awt.BorderLayout.CENTER);        jPanel4.setLayout(new java.awt.GridLayout(1, 0));        jPanel4.setBorder(new javax.swing.border.EtchedBorder());        jPanel4.setMinimumSize(new java.awt.Dimension(184, 40));        jPanel4.setPreferredSize(new java.awt.Dimension(280, 40));        jPanel4.setEnabled(false);        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));        jPanel7.setPreferredSize(new java.awt.Dimension(263, 20));        jPanel10.setLayout(new java.awt.GridBagLayout());        grp_Label_Type.setFont(new java.awt.Font("Tahoma", 0, 10));        grp_Label_Type.setForeground(java.awt.Color.black);        grp_Label_Type.setText(java.util.ResourceBundle.getBundle("srcastra.astra.locale.ModuleClient", currentUser.getLangage()).getString("CGRP_Nom"));        grp_Label_Type.setMinimumSize(new java.awt.Dimension(90, 14));        grp_Label_Type.setPreferredSize(new java.awt.Dimension(90, 14));        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);        jPanel10.add(grp_Label_Type, gridBagConstraints);        grp_TField_Nom.setEnabled(false);        grp_TField_Nom.setGrp_Comp_nextComponent(grp_TField_Nom);        grp_TField_Nom.setGrp_Comp_previousComponent(null);        grp_TField_Nom.setMinimumSize(new java.awt.Dimension(100, 18));        grp_TField_Nom.setPreferredSize(new java.awt.Dimension(150, 18));        grp_TField_Nom.setRequestFocusEnabled(true);        grp_TField_Nom.setWarningIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/aTextfield/warning.gif")));        grp_TField_Nom.setWorkingIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/aTextfield/working.gif")));        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridx = 1;        gridBagConstraints.gridy = 0;        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);        jPanel10.add(grp_TField_Nom, gridBagConstraints);        jPanel9.add(jPanel10);        jPanel7.add(jPanel9);        jPanel4.add(jPanel7);        jPanel1.add(jPanel4, java.awt.BorderLayout.SOUTH);        add(jPanel1, java.awt.BorderLayout.CENTER);        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));        jPanel6.setEnabled(false);        grp_But_OkAction.setFont(new java.awt.Font("Tahoma", 0, 11));        grp_But_OkAction.setText(java.util.ResourceBundle.getBundle("srcastra.astra.locale.ModuleClient", currentUser.getLangage()).getString("CGRP_okAction"));        grp_But_OkAction.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                grp_But_OkActionActionPerformed(evt);            }        });        jPanel6.add(grp_But_OkAction);        grp_But_CancelAction.setFont(new java.awt.Font("Tahoma", 0, 11));        grp_But_CancelAction.setText(java.util.ResourceBundle.getBundle("srcastra.astra.locale.ModuleClient", currentUser.getLangage()).getString("CGRP_CancelAction"));        grp_But_CancelAction.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                grp_But_CancelActionActionPerformed(evt);            }        });        jPanel6.add(grp_But_CancelAction);        add(jPanel6, java.awt.BorderLayout.SOUTH);    }//GEN-END:initComponents    private void initComponent2() {        listModel = new javax.swing.DefaultListModel();        grp_List_grpList.setModel(listModel);        // add list Selection Listener        listListener = new javax.swing.event.ListSelectionListener() {            public void valueChanged(javax.swing.event.ListSelectionEvent e) {                grp_List_grpListValueChanged(e);            }        };    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => LISTENERS////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    private void grp_But_modifyGroupementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_But_modifyGroupementActionPerformed        switch (action) {            case ActionToolBar.ACT_READ:                displayUpdateMode();                action = ActionToolBar.DO_MODIFY;                break;            case ActionToolBar.ACT_MODIFY:                dbUpdate();                break;            case ActionToolBar.DO_MODIFY:                dbUpdate();                break;        }    }//GEN-LAST:event_grp_But_modifyGroupementActionPerformed    private void grp_But_LastElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_But_LastElementActionPerformed        int lastElement = listModel.getSize();        selectAListElement(lastElement - 1);    }//GEN-LAST:event_grp_But_LastElementActionPerformed    private void grp_But_nextElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_But_nextElementActionPerformed        int currentElement = grp_List_grpList.getSelectedIndex();        if ((currentElement + 1) < listModel.getSize())            selectAListElement(currentElement + 1);    }//GEN-LAST:event_grp_But_nextElementActionPerformed    private void grp_But_previousElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_But_previousElementActionPerformed        int currentElement = grp_List_grpList.getSelectedIndex();        selectAListElement(currentElement - 1);    }//GEN-LAST:event_grp_But_previousElementActionPerformed    private void grp_But_FirstElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_But_FirstElementActionPerformed        selectAListElement(0);    }//GEN-LAST:event_grp_But_FirstElementActionPerformed    private void grp_But_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_But_CancelActionPerformed        grp_TField_Nom.setEnabled(false);        enableToolbar(true, true, false, true, true, true, true, true);        action = actionToolBar.ACT_READ;    }//GEN-LAST:event_grp_But_CancelActionPerformed    private void grp_But_CancelActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_But_CancelActionActionPerformed        if (textFieldWithButtonDialogBox != null) {            textFieldWithButtonDialogBox.dispose();        }    }//GEN-LAST:event_grp_But_CancelActionActionPerformed    private void grp_But_OkActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_But_OkActionActionPerformed        if (atfbw != null) {            AString element = new AString(clientGroupe.getCsgecleunik(), clientGroupe.getCsgenom());            atfbw.setContent(element);        }        if (textFieldWithButtonDialogBox != null) {            textFieldWithButtonDialogBox.dispose();        }    }//GEN-LAST:event_grp_But_OkActionActionPerformed    private void grp_But_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_But_removeActionPerformed        dbDelete();    }//GEN-LAST:event_grp_But_removeActionPerformed    private void grp_But_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_But_addActionPerformed        switch (action) {            case ActionToolBar.ACT_READ:                displayInsertMode();                break;            case ActionToolBar.ACT_INSERT:                dbInsert();                break;        }    }//GEN-LAST:event_grp_But_addActionPerformed    private void grp_List_grpListValueChanged(javax.swing.event.ListSelectionEvent e) {        if (!e.getValueIsAdjusting()) {            System.out.println("[grp_List_grpListValueChanged] Clé unique : " + clGroupementCleUnik);            System.out.println("[grp_List_grpListValueChanged] Valeur sélectionnée : " + grp_List_grpList.getSelectedIndex());            AString str = (AString) grp_List_grpList.getSelectedValue();            if (str != null) {                updateAllFields(str);                grp_TField_Nom.setText("" + str.toString());            }        }    }    public void componentResized(java.awt.event.ComponentEvent componentEvent) {    }    public void componentMoved(java.awt.event.ComponentEvent componentEvent) {    }    public void componentHidden(java.awt.event.ComponentEvent componentEvent) {    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE AU BEANS////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    private void selectAListElement(int index) {        try {            grp_List_grpList.setSelectedIndex(index);        }        catch (Exception e) {            // ne rien faire        }    }    private void enableToolbar(boolean add, boolean remove, boolean cancel, boolean first, boolean previous, boolean next, boolean last, boolean modify) {        grp_But_add.setEnabled(add);        grp_But_remove.setEnabled(remove);        grp_But_Cancel.setEnabled(cancel);        grp_But_FirstElement.setEnabled(first);        grp_But_previousElement.setEnabled(previous);        grp_But_nextElement.setEnabled(next);        grp_But_LastElement.setEnabled(last);        grp_But_modifyGroupement.setEnabled(modify);    }    private void selectListComponent() {        // on regarde si la liste contient qqchose.        if (listModel.getSize() > 0) {            System.out.println("Clé Unique du groupe : " + clGroupementCleUnik);            // on regarde si il y a une clé            if (clGroupementCleUnik > 0) {                AString aString;                for (int i = 0; i < listModel.size(); i++) {                    aString = (AString) listModel.get(i);                    if (aString != null && aString.getCleunik() == clGroupementCleUnik) {                        grp_List_grpList.setSelectedValue(aString, true);                        System.out.println("[selectListComponent] sélection du label n° " + clGroupementCleUnik);                        break;                    } else {                        grp_List_grpList.setSelectedIndex(0);                        System.out.println("[selectListComponent] sélection du label n° " + 0);                    }                }            }            // sinon on sélectionne le premier élément par défaut            else {                grp_List_grpList.setSelectedIndex(0);                System.out.println("[selectListComponent] sélection du label n° " + 0);            }        }    }    /**     * Appelée par ATextFieldWithButton lors de la fermeture de sa JDialogBox     */    public void actionOnDispose() {        grp_List_grpList.removeListSelectionListener(listListener);        isListener = false;        System.out.println("Aurevoir !");    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => FONCTIONS APPARENTES AU TRANSFERT DE DONNEE////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Permet au parent de lancer le chargement des données au     * <p/>     * <p/>     * sein de liste (Ici : ListSelector)     */    public void chargeData() {    }    /**     * Demande d'une modification au serveur     */    public void dbUpdate() {        clientGroupe.setCsgenom(grp_TField_Nom.getText());        try {            clientGroupe.updateObject(serveur, this.currentUser);            displayReadMode();        }        catch (ServeurSqlFailure se) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se);        }        catch (java.rmi.RemoteException re) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);        }        catch (Exception e) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);        }        //this.clientGroupe.updateObject(this.serveur,this.currentUser);        /*    clientMultiAdress = new ClientsMultiAdresses_T();           clientMultiAdress.setCsmscleunik(clMultAdressCleUnik);           clientMultiAdress.setCscleunik(this.clCleunik);           clientMultiAdress.setCsmstype(grp_TField_Type.getText());           clientMultiAdress.setCsmsnom(grp_TField_Nom.getText());           clientMultiAdress.setCsmsadresse(grp_TField_Adresse.getText());           clientMultiAdress.setCxcleunik(grp_LSelect_CodePostal.getCleUnik());           clientMultiAdress.setCsmslocalite(grp_TField_localite.getText());           clientMultiAdress.setPyscleunik(grp_LSelect_Pays.getCleUnik());           clientMultiAdress.setCsmstelephone(grp_TField_Telephone.getText());           clientMultiAdress.setCsmsfax(grp_TField_Fax.getText());           clientMultiAdress.setCsmsgsm(grp_TField_Gsm.getText());           clientMultiAdress.setCsmsmail(grp_TField_Email.getText());           try {               clientMultiAdress.updateObject(serveur);               displayReadMode();           }           catch (java.rmi.RemoteException re) {               ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);           }           catch (Exception e) {               ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);           }        */    }    /**     * Demande de sélection en vue d'une modification au serveur     */    public void dbSelectForUpdate() {        try {            Object obj = clientGroupe.selectObjectForUpdate(serveur, this.currentUser, this.clGroupementCleUnik);            this.clGroupementCleUnik = clientGroupe.getCsgecleunik();            checkValidity = true;            updateAllFields();        }        catch (ServeurSqlFailure se) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se);        }        catch (java.rmi.RemoteException re) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);        }        catch (Exception e) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);        }    }    /**     * Demande d'une suppression ou d'une annulation physique au serveur     */    public void dbDelete() {        int response = javax.swing.JOptionPane.showOptionDialog(this, "Etes vous sur de vouloir supprimer ce groupement !", "Attention",                javax.swing.JOptionPane.OK_CANCEL_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE,                null, null, null);        if (response == javax.swing.JOptionPane.OK_OPTION) {            try {                clientGroupe.deleteObject(serveur, currentUser);            }            catch (java.rmi.RemoteException re) {                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);            }            catch (Exception e) {                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);            }        } else {            System.out.println("pas deleter !!!");        }        displayReadMode();    }    /**     * Demande d'une insertion au serveur     */    public void dbInsert() {        clientGroupe = new ClientsGroupe_T();        String text = grp_TField_Nom.getText();        if (!text.equals(""))            clientGroupe.setCsgenom(grp_TField_Nom.getText());        else {            javax.swing.JOptionPane.showMessageDialog(this, "Désolé vous ne pouvez pas insérer d'élément vide !", "Désolé !", javax.swing.JOptionPane.INFORMATION_MESSAGE);            return;        }        try {            clientGroupe.insertObject(serveur, currentUser);            displayReadMode();        }        catch (ServeurSqlFailure se) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se);        }        catch (java.rmi.RemoteException re) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);        }        catch (Exception e) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);        }    }    /**     * Demande de sélection au serveur     */    public void dbSelect() {        listModel.clear();        clientGroupe = new ClientsGroupe_T();        try {            java.util.ArrayList list = clientGroupe.selectAllObject(this.serveur, this.currentUser);            if (list != null) {                for (int i = 0; i < list.size(); i++) {                    Object[] obj = (Object[]) list.get(i);                    AString str = new AString(((Integer) obj[0]).intValue(), (String) obj[1]);                    listModel.addElement(str);                }            }        }        catch (java.rmi.RemoteException re) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);        }        catch (Exception e) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);        }    }    public String loadContentString(int cleUnik) {        String content = "";        try {            clientGroupe = new ClientsGroupe_T();            java.util.ArrayList list = clientGroupe.selectAllObject(this.serveur, this.currentUser);            for (int i = 0; i < list.size(); i++) {                Object[] obj = (Object[]) list.get(i);                if (((Integer) obj[0]).intValue() == cleUnik) {                    content = (String) obj[1];                    break;                }            }        }        catch (java.rmi.RemoteException re) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);        }        catch (Exception e) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);        }        finally {            return content;        }    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE A L' AFFICHAGE DES DONNEES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Affichage en mode Insertion     */    public void displayInsertMode() {        init();        // toolbar        enableToolbar(true, false, true, false, false, false, false, false);        action = ActionToolBar.ACT_INSERT;        grp_TField_Nom.setEnabled(true);        grp_TField_Nom.setLastFocusedComponent(true);        grp_TField_Nom.requestFocus();        grp_But_OkAction.setEnabled(false);        grp_But_CancelAction.setEnabled(false);    }    /**     * Mise à jour du contenu des champs graphiques par rapport à un objet     *     * @param donnee objet à partir duquel seront mis à jour les champs graphiques     */    public void updateAllFields(Object donnee) {        AString str = (AString) donnee;        clientGroupe = new srcastra.astra.sys.classetransfert.clients.ClientsGroupe_T(str.getCleunik(), str.toString(), "", "");        updateAllFields();    }    /**     * Affichage en Mode disable     */    public void displayDisableMode() {    }    /**     * Méthode pour l'update de tous les champs     */    public void updateAllFields() {        grp_TField_Nom.setText("" + clientGroupe.getCsgenom());    }    /**     * Affichage en mode Lecture     */    public void displayReadMode() {        // on retire le listener si il y en a un        if (isListener) {            grp_List_grpList.removeListSelectionListener(listListener);            isListener = false;        }        init();        // toolbar        enableToolbar(true, true, false, true, true, true, true, true);        action = actionToolBar.ACT_READ;        grp_TField_Nom.setEnabled(false);        grp_TField_Nom.setLastFocusedComponent(true);        this.requestFocus();        dbSelect();        // seulement si le composant ne contient pas déjà le listener        if (!isListener) {            grp_List_grpList.addListSelectionListener(listListener);            isListener = true;        }        selectListComponent();        grp_But_OkAction.setEnabled(true);        grp_But_CancelAction.setEnabled(true);    }    /**     * Affichage en mode Modification     */    public void displayUpdateMode() {        init();        // toolbar        enableToolbar(false, false, true, false, false, false, false, true);        action = ActionToolBar.ACT_MODIFY;        grp_TField_Nom.setEnabled(true);        grp_TField_Nom.setLastFocusedComponent(true);        grp_TField_Nom.requestFocus();        grp_But_OkAction.setEnabled(false);        grp_But_CancelAction.setEnabled(false);        dbSelectForUpdate();    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE AUX APPELS DE LA TOOLBAR////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * appelé automatique par la toolBar pour une action d'impression     */    public void doPrint() {    }    /**     * appelé automatique par la toolBar pour une action de suppression     */    public void doDelete() {        dbDelete();    }    /**     * appelé automatique par la toolBar pour une action de fermeture     */    public void doClose() {    }    /**     * Mise à jour du contenu des champs par rapport à un objet     */    public void doModify() {        displayUpdateMode();    }    /**     * appelé automatique par la toolBar pour une action du type "suivant"     */    public void doNext() {    }    /**     * appelé automatique par la toolBar pour une action d'annulation     */    public void doCancel() {        switch (action) {            case ActionToolBar.ACT_READ:                parent.cancelModule();                break;            case ActionToolBar.ACT_INSERT:                displayReadMode();                break;            case ActionToolBar.ACT_MODIFY:                try {                    serveur.remoterollback(currentUser.getUrcleunik());                }                catch (java.rmi.RemoteException e)                {                    System.out.println("Exception dans remoterollback dans docancel fournisseurgénéralinfopane" + e.getMessage());                }                displayReadMode();                break;        }    }    /**     * appelé automatique par la toolBar pour une action de création     */    public void doCreate() {        displayInsertMode();    }    /**     * appelé automatique par la toolBar pour une action d'aide     */    public void doHelp() {    }    /**     * appelé automatique par la toolBar pour une action du type "précédent"     */    public void doPrevious() {    }    /**     * appelé automatique par la toolBar pour une action d'acceptation     */    public void doAccept() {        switch (action) {            case ActionToolBar.ACT_INSERT:                dbInsert();                break;            case ActionToolBar.ACT_MODIFY:                dbUpdate();                break;        }    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => Champs de la classe////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /* Objets liés à la toolbarre */    private int action;    private ActionToolBar actionToolBar;    /* Objets pour le transit sur le réseau */    private srcastra.astra.sys.classetransfert.clients.ClientsGroupe_T clientGroupe;    private astrainterface serveur;    private Loginusers_T currentUser;    /* Object pour l'identification des données */    private int clGroupementCleUnik;    private int clCleunik;    private AstraComponent[] composantToVerif;    private boolean checkValidity = false;    /**     * objet spécifique à la JList     */    private javax.swing.DefaultListModel listModel;    /**     * pour 1 seul initiation du panneau     */    public boolean initOnce = false;    private MainScreenModule parent;    /* Listeners */    private boolean isListener = false;    private javax.swing.event.ListSelectionListener listListener;    /* La dialog Box du TextFieldWithButton */    private javax.swing.JDialog textFieldWithButtonDialogBox;    /* Instance du TextFieldWithButton */    private srcastra.astra.gui.components.textFields.ATextFieldWithButton atfbw;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// STATIC VARIABLES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * numéro du panneau (cfr séquence)     */    public static int PANE_NUMBER = 0;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => Graphic Component////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // Variables declaration - do not modify//GEN-BEGIN:variables    private javax.swing.JLabel grp_Label_Type;    private javax.swing.JPanel jPanel9;    private javax.swing.JPanel jPanel7;    private javax.swing.JPanel jPanel6;    private javax.swing.JButton grp_But_remove;    private javax.swing.JList grp_List_grpList;    private javax.swing.JPanel jPanel5;    private javax.swing.JPanel jPanel4;    private javax.swing.JPanel jPanel3;    private javax.swing.JPanel jPanel2;    private javax.swing.JPanel jPanel1;    private javax.swing.JButton grp_But_modifyGroupement;    private javax.swing.JButton grp_But_LastElement;    private javax.swing.JButton grp_But_add;    private javax.swing.JButton grp_But_CancelAction;    private javax.swing.JScrollPane grp_ScrollPan_scrollPan;    private javax.swing.JPanel jPanel10;    private javax.swing.JButton grp_But_Cancel;    private javax.swing.JButton grp_But_nextElement;    private javax.swing.JPanel grp_Pan_inserCombo;    private srcastra.astra.gui.components.textFields.ATextField grp_TField_Nom;    private javax.swing.JButton grp_But_previousElement;    private javax.swing.JButton grp_But_OkAction;    private javax.swing.JButton grp_But_FirstElement;    // End of variables declaration//GEN-END:variables////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// BEANS PROPERTIES GET/SET SUPPORT////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Permet à la classe qui implémente cette méthode de se     * <p/>     * <p/>     * référencer auprès d' ActionToolBar     *     * @return le n° de l'action     */    public int getAction() {        return this.action;    }    /**     * Donne à la toolbar le masque par défaut des touches d'action     *     * @return     * @deprecated cette fonction n'est plus appelé     */    public int[] getDefaultActionToolBarMask() {        return new int[0];    }    /**     * Permet de préciser le type d'action qu'on est occupé de faire :     * <p/>     * <p/>     * 0 pour lecture     * <p/>     * <p/>     * 1 pour création     * <p/>     * <p/>     * 2 pour modification     *     * @param action type d'action     */    public void setAction(int action) {        this.action = action;    }    /**     * Permet de recevoir la clé unique d'un objet relatif     * <p/>     * <p/>     * au modules : création par partie ou modification     *     * @param frCleUnik la clé unique     */    public void setFrCleunik(int frCleUnik) {        this.clCleunik = frCleUnik;    }    /**     * Sert à recevoir le titre de son parent     * <p/>     * <p/>     * pour un cadre éventuel     *     * @return le titre du panneau     */    public String getTitle() {        try {            return java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleClient", currentUser.getLangage()).getString("CGRP_TitrePane");        }        catch (java.util.MissingResourceException mre) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.MISSING_RESSOURCE_EXCEPTION, srcastra.astra.Astra.DEBUG, mre);            return "";        }    }    /**     * Spécifie le composant qui implémente cette fonction comme     * <p/>     * <p/>     * le composant qui pilote l'actionToolBar     */    public void setThisAsToolBarComponent() {    }    /**     * Getter for property clGroupementCleUnik.     *     * @return Value of property clGroupementCleUnik.     */    public int getClGroupementCleUnik() {        return clGroupementCleUnik;    }    /**     * Setter for property clGroupementCleUnik.     *     * @param clGroupementCleUnik New value of property clGroupementCleUnik.     */    public void setClGroupementCleUnik(int clGroupementCleUnik) {        this.clGroupementCleUnik = clGroupementCleUnik;    }    /**     * Aquière une instance de la dialogBox d'un composant "ATextFieldWithButton"     *     * @param dialogBox instance de la dialogBox     */    public void addDialogInstance(javax.swing.JDialog dialogBox) {        this.textFieldWithButtonDialogBox = dialogBox;    }    public void addATextFieldComponentWithButtonInstance(srcastra.astra.gui.components.textFields.ATextFieldWithButton atfwb) {        this.atfbw = atfwb;    }    public void doSwitch() {    }    public java.awt.Component m_getGeneriqueTable() {        return null;    }    public void doF10() {    }    public void addKeystroque() {    }    public void doF7() {    }        }