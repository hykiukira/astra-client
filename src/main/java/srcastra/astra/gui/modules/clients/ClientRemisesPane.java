/* * ClientAdressePane.java * * Created on 19 juin 2002, 10:40 */package srcastra.astra.gui.modules.clients;import srcastra.astra.sys.classetransfert.Loginusers_T;import srcastra.astra.sys.rmi.astrainterface;import srcastra.astra.gui.modules.*;import srcastra.astra.gui.components.actions.actionToolBar.*;import srcastra.astra.gui.components.AstraComponent;import javax.swing.*;import srcastra.astra.gui.sys.ErreurScreenLibrary;import srcastra.astra.gui.sys.formVerification.*;import srcastra.astra.gui.components.InsertCombo.InsertCombo;import srcastra.astra.sys.classetransfert.clients.ClientsRemises_T;import srcastra.astra.sys.rmi.Exception.*;import srcastra.astra.gui.components.actions.ToolBarInteraction;import srcastra.astra.gui.sys.tableModel.listSelectorTableModel.*;import java.awt.event.ActionListener;import java.awt.event.ActionEvent;import srcastra.astra.gui.event.ValidateField;import java.awt.event.*;/** * @author Sébastien */public class ClientRemisesPane extends javax.swing.JPanel implements InternScreenModule, ToolBarComposer, java.awt.event.ComponentListener {////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// CONSTRUCTOR////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Creates new form ClientAdressePane     */    public ClientRemisesPane(srcastra.astra.sys.rmi.astrainterface serveur, srcastra.astra.sys.classetransfert.Loginusers_T currentUser, MainScreenModule parent, ActionToolBar actionToolBar) {        this.serveur = serveur;        this.currentUser = currentUser;        this.parent = parent;        this.actionToolBar = actionToolBar;        this.action = actionToolBar.ACT_READ;        setLastModify(-1);        this.addComponentListener(this);    }    KeyAdapter my_action = new KeyAdapter() {        public void keyPressed(KeyEvent evt) {            if (evt.getKeyCode() == evt.VK_ENTER) {                requestFocus();                doPrevious();            }        }    };    KeyAdapter my_key = new KeyAdapter() {        public void keyPressed(KeyEvent evt) {            if (evt.getKeyCode() == evt.VK_SPACE) {                chieee(evt);            }        }    };    MouseAdapter my_mouse = new MouseAdapter() {        public void mouseClicked(MouseEvent evt) {            chieee(evt);        }    };    private void chieee(KeyEvent evt) {        if (evt.getSource() == grp_AC_fees.getCheckBox()) {            grp_AC_remise.setGrp_Comp_nextComponent(grp_TField_Fees);            grp_TField_pcDossier.setEnabled(false);        } else if (evt.getSource() == grp_AC_remise.getCheckBox()) {            grp_AC_remise.setGrp_Comp_nextComponent(grp_TField_pcDossier);            grp_TField_Fees.setEnabled(false);            //  grp_Liste_cate.init2();          }    }    private void chieee(MouseEvent evt) {        if (evt.getSource() == grp_AC_fees.getCheckBox()) {            grp_AC_remise.setGrp_Comp_nextComponent(grp_TField_Fees);            grp_TField_pcDossier.setEnabled(false);        } else if (evt.getSource() == grp_AC_remise.getCheckBox()) {            grp_AC_remise.setGrp_Comp_nextComponent(grp_TField_pcDossier);            grp_TField_Fees.setEnabled(false);            //  grp_Liste_cate.init2();          }    }//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// // INITIALISATION////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Initialise les champs graphiques ainsi qu'un tableau pour permettre d'interargir     * <p/>     * <p/>     * sur tous les éléments à partir d'une boucle.     * <p/>     * <p/>     * Les éléments graphiques et le tableau ne sera initialisé qu' 1 fois     */    private void init() {        if (!initOnce) {            // chargement des composants et de leurs propriétes            initComponents();            initComponent2();            setDocumentMask();            // chargement d'un tableau reprenant tous les éléments pour une correction            this.composantToVerif = new AstraComponent[]{grp_TField_libelle, grp_TField_Libellenl, grp_AC_fees, grp_AC_remise, grp_TField_pcDossier, grp_TField_Fees};            this.tb_interaction = new ToolBarInteraction(parent, this, composantToVerif);            tb_interaction.setValidateActionEnvironnement(ToolBarInteraction.ACT_ENV_STANDART);            tb_interaction.setEnvironnement(InsertCombo.ENVIRONNEMENT_PANEL_DATA);            //-> Régistration des listeners pour la validité des composants-----------------------------------------            for (int i = 0; i < composantToVerif.length; i++) {                composantToVerif[i].addActionListener(tb_interaction.getValidateActionListener());            }            grp_Combo_insertCombo.addInsertComboListener(tb_interaction.getChangeInsertComboDataActionListener());            //-------------------fin de la régistration des listeners dans les beans --------------------------------            // les éléments ne sont intialisé qu'1 seule fois            initOnce = true;            //grp_LSelect_Fournisseur.addValidateFieldListener(validateAndDoPrevious);        }        buttonGroup1.add(grp_AC_fees.getCheckBox());        buttonGroup1.add(grp_AC_remise.getCheckBox());    }    private void setDocumentMask() {        grp_TField_pcDossier.setDocument(new DecimalMask(2, 2, currentUser.getLangage()));        //grp_TField_pcAnnuel.setDocument(new DecimalMask(2, 2, currentUser.getLangage()));        grp_TField_Fees.setDocument(new DecimalMask(5, 2, currentUser.getLangage()));    }    /**     * This method is called from within the constructor to     * <p/>     * <p/>     * initialize the form.     * <p/>     * <p/>     * WARNING: Do NOT modify this code. The content of this method is     * <p/>     * <p/>     * always regenerated by the Form Editor.     */    private void initComponents() {//GEN-BEGIN:initComponents        java.awt.GridBagConstraints gridBagConstraints;        buttonGroup1 = new javax.swing.ButtonGroup();        jPanel1 = new javax.swing.JPanel();        grp_Pan_inserCombo = new javax.swing.JPanel();        jPanel3 = new javax.swing.JPanel();        jPanel4 = new javax.swing.JPanel();        jPanel7 = new javax.swing.JPanel();        jPanel9 = new javax.swing.JPanel();        jPanel10 = new javax.swing.JPanel();        grp_Label_pcDossier = new javax.swing.JLabel();        grp_Label_Fees = new javax.swing.JLabel();        grp_TField_pcDossier = new srcastra.astra.gui.components.textFields.ATextField();        grp_TField_Fees = new srcastra.astra.gui.components.textFields.ATextField();        jLabel1 = new javax.swing.JLabel();        grp_TField_libelle = new srcastra.astra.gui.components.textFields.ATextField();        jLabel2 = new javax.swing.JLabel();        jLabel3 = new javax.swing.JLabel();        grp_AC_fees = new srcastra.astra.gui.components.checkbox.ACheckBox();        grp_AC_remise = new srcastra.astra.gui.components.checkbox.ACheckBox();        jLabel4 = new javax.swing.JLabel();        grp_TField_Libellenl = new srcastra.astra.gui.components.textFields.ATextField();        jPanel6 = new javax.swing.JPanel();        setLayout(new java.awt.BorderLayout());        setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("srcastra.astra.locale.ModuleClient", currentUser.getLangage()).getString("CREM_TitrePane")));        jPanel1.setLayout(new java.awt.BorderLayout());        grp_Pan_inserCombo.setLayout(new java.awt.BorderLayout());        grp_Pan_inserCombo.setEnabled(false);        grp_Pan_inserCombo.add(jPanel3, java.awt.BorderLayout.NORTH);        jPanel1.add(grp_Pan_inserCombo, java.awt.BorderLayout.CENTER);        jPanel4.setLayout(new java.awt.GridLayout(1, 0));        jPanel4.setBorder(new javax.swing.border.EtchedBorder());        jPanel4.setMinimumSize(new java.awt.Dimension(184, 150));        jPanel4.setPreferredSize(new java.awt.Dimension(280, 147));        jPanel4.setEnabled(false);        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));        jPanel10.setLayout(new java.awt.GridBagLayout());        grp_Label_pcDossier.setFont(new java.awt.Font("Tahoma", 0, 10));        grp_Label_pcDossier.setForeground(java.awt.Color.black);        grp_Label_pcDossier.setText(java.util.ResourceBundle.getBundle("srcastra.astra.locale.ModuleClient", currentUser.getLangage()).getString("CREM_pcDossier"));        grp_Label_pcDossier.setMinimumSize(new java.awt.Dimension(90, 14));        grp_Label_pcDossier.setPreferredSize(new java.awt.Dimension(90, 14));        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridx = 0;        gridBagConstraints.gridy = 4;        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;        jPanel10.add(grp_Label_pcDossier, gridBagConstraints);        grp_Label_Fees.setFont(new java.awt.Font("Tahoma", 0, 10));        grp_Label_Fees.setForeground(java.awt.Color.black);        grp_Label_Fees.setText(java.util.ResourceBundle.getBundle("srcastra.astra.locale.ModuleClient", currentUser.getLangage()).getString("CREM_Fees"));        grp_Label_Fees.setMinimumSize(new java.awt.Dimension(90, 14));        grp_Label_Fees.setPreferredSize(new java.awt.Dimension(90, 14));        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridx = 0;        gridBagConstraints.gridy = 5;        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);        jPanel10.add(grp_Label_Fees, gridBagConstraints);        grp_TField_pcDossier.setEnabled(false);        grp_TField_pcDossier.setGrp_Comp_previousComponent(null);        grp_TField_pcDossier.setHorizontalAlignment(javax.swing.JLabel.RIGHT);        grp_TField_pcDossier.setMinimumSize(new java.awt.Dimension(50, 18));        grp_TField_pcDossier.setPreferredSize(new java.awt.Dimension(50, 18));        grp_TField_pcDossier.setWarningIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/aTextfield/warning.gif")));        grp_TField_pcDossier.setWorkingIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/aTextfield/working.gif")));        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridx = 1;        gridBagConstraints.gridy = 4;        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;        jPanel10.add(grp_TField_pcDossier, gridBagConstraints);        grp_TField_Fees.setEnabled(false);        grp_TField_Fees.setHorizontalAlignment(javax.swing.JLabel.RIGHT);        grp_TField_Fees.setMinimumSize(new java.awt.Dimension(50, 18));        grp_TField_Fees.setWarningIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/aTextfield/warning.gif")));        grp_TField_Fees.setWorkingIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/aTextfield/working.gif")));        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridx = 1;        gridBagConstraints.gridy = 5;        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);        jPanel10.add(grp_TField_Fees, gridBagConstraints);        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 10));        jLabel1.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleClient", currentUser.getLangage()).getString("CR_libellefr"));        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);        jPanel10.add(jLabel1, gridBagConstraints);        grp_TField_libelle.setEnabled(false);        grp_TField_libelle.setGrp_Comp_nextComponent(grp_TField_Libellenl);        grp_TField_libelle.setPreferredSize(new java.awt.Dimension(200, 18));        grp_TField_libelle.setWarningIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/aTextfield/warning.gif")));        grp_TField_libelle.setWorkingIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/aTextfield/working.gif")));        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);        jPanel10.add(grp_TField_libelle, gridBagConstraints);        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 10));        jLabel2.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleClient", currentUser.getLangage()).getString("Cl_fees"));        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridx = 0;        gridBagConstraints.gridy = 2;        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;        jPanel10.add(jLabel2, gridBagConstraints);        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 10));        jLabel3.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleClient", currentUser.getLangage()).getString("Cl_Dossier"));        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridx = 0;        gridBagConstraints.gridy = 3;        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;        jPanel10.add(jLabel3, gridBagConstraints);        grp_AC_fees.setGrp_Comp_nextComponent(grp_AC_remise);        grp_AC_fees.setWorkingIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/aTextfield/working.gif")));        grp_AC_fees.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                grp_AC_feesActionPerformed(evt);            }        });        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridx = 1;        gridBagConstraints.gridy = 2;        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;        jPanel10.add(grp_AC_fees, gridBagConstraints);        grp_AC_remise.setGrp_Comp_nextComponent(grp_TField_Fees);        grp_AC_remise.setWorkingIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/aTextfield/working.gif")));        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridx = 1;        gridBagConstraints.gridy = 3;        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;        jPanel10.add(grp_AC_remise, gridBagConstraints);        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 10));        jLabel4.setText(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleClient", currentUser.getLangage()).getString("CR_libellenl"));        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridx = 0;        gridBagConstraints.gridy = 1;        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 3);        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;        jPanel10.add(jLabel4, gridBagConstraints);        grp_TField_Libellenl.setEnabled(false);        grp_TField_Libellenl.setGrp_Comp_nextComponent(grp_AC_fees);        grp_TField_Libellenl.setWarningIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/aTextfield/warning.gif")));        grp_TField_Libellenl.setWorkingIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/aTextfield/working.gif")));        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridx = 1;        gridBagConstraints.gridy = 1;        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;        jPanel10.add(grp_TField_Libellenl, gridBagConstraints);        jPanel9.add(jPanel10);        jPanel7.add(jPanel9);        jPanel4.add(jPanel7);        jPanel1.add(jPanel4, java.awt.BorderLayout.SOUTH);        add(jPanel1, java.awt.BorderLayout.CENTER);        jPanel6.setEnabled(false);        add(jPanel6, java.awt.BorderLayout.SOUTH);    }//GEN-END:initComponents    private void grp_AC_feesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_AC_feesActionPerformed    }//GEN-LAST:event_grp_AC_feesActionPerformed    private void initComponent2() {        try {            String[] titre = new String[]{"id",                    java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleClient", currentUser.getLangage()).getString("CREM_Remises"),                    java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleClient", currentUser.getLangage()).getString("CREM_Fees")};            grp_Combo_insertCombo = new InsertCombo(titre, 0, currentUser);            grp_Combo_insertCombo.setServeur(this.serveur);            grp_Combo_insertCombo.setTypeDeCombo(srcastra.astra.sys.rmi.astrainterface.COMBO_CLIENT_REMISES);            grp_Combo_insertCombo.setIParent(this);            grp_Combo_insertCombo.setEnvironnement(InsertCombo.ENVIRONNEMENT_PANEL_DATA);            grp_Pan_inserCombo.add(grp_Combo_insertCombo);        }        catch (java.util.MissingResourceException mre) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.MISSING_RESSOURCE_EXCEPTION, srcastra.astra.Astra.DEBUG, mre);        }    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => LISTENERS////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public void componentResized(java.awt.event.ComponentEvent componentEvent) {    }    public void componentShown(java.awt.event.ComponentEvent componentEvent) {        actionToolBar.setTbComposer(this);        parent.setCurrentPanel(this);        switch (action) {            case ActionToolBar.ACT_READ:                displayReadMode();                break;        }    }    public void componentMoved(java.awt.event.ComponentEvent componentEvent) {    }    public void componentHidden(java.awt.event.ComponentEvent componentEvent) {    }    private ValidateField validateAndDoPrevious = new ValidateField() {        public void actionPerformed(ActionEvent evt) {            if (action == ActionToolBar.ACT_INSERT || action == ActionToolBar.ACT_MODIFY) {                requestFocus();                doPrevious();            }        }    };////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE AU BEANS////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    private void setToolBar(int sizeOfArray) {        /* if(sizeOfArray==0) {            parent.setCurrentActionEnabled(new int[] { actionToolBar.DO_CREATE,                                                   actionToolBar.DO_CANCEL,                                                   actionToolBar.DO_DELETE });        }        else if(sizeOfArray>0) {            parent.setCurrentActionEnabled(new int[] { actionToolBar.DO_CREATE,                                                   actionToolBar.DO_MODIFY,                                                   actionToolBar.DO_CANCEL,                                                   actionToolBar.DO_DELETE });        }        */    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => FONCTIONS APPARENTES AU TRANSFERT DE DONNEE////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Demande d'une modification au serveur     */    public void dbUpdate() {        //clientRemises = new ClientsRemises_T();        try {            //  clientRemises.setCrscleunik(clientRemiseCleUnik);            try {                clientRemises.setCsrspcdossier(Float.parseFloat(grp_TField_pcDossier.getText()));            } catch (NumberFormatException nn) {                clientRemises.setCsrspcdossier(0);            }            clientRemises.setCategorie(grp_AC_fees.isSelected() ? clientRemises.FEES : clientRemises.PRCTDOSSIER);            clientRemises.setLibelleFr(grp_TField_libelle.getText());            clientRemises.setLibelleNL(grp_TField_Libellenl.getText());            // clientRemises.setCsrspcannuel(Float.parseFloat(grp_TField_pcAnnuel.getText()));            try {                clientRemises.setCsrsfees(Double.parseDouble(grp_TField_Fees.getText()));            } catch (NumberFormatException nn) {                clientRemises.setCsrsfees(0);            }            clientRemises.setCscleunik(clCleUnik);            // if(grp_LSelect_Logement.getCleUnik()!=0)            //  clientRemises.setLtcleunik(grp_LSelect_Logement.getCleUnik());            // if(grp_LSelect_Transport.getCleUnik()!=0)            //clientRemises.setTtcleunik(grp_LSelect_Transport.getCleUnik());            // if(grp_LSelect_Fournisseur.getCleUnik()!=0)            // clientRemises.setFrcleunik(grp_LSelect_Fournisseur.getCleUnik());            clientRemises.updateObject(serveur, currentUser);            setLastModify(clientRemises.getCrscleunik());            displayReadMode();        }        catch (ServeurSqlFailure se) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se);        }        catch (java.rmi.RemoteException re) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);        }        catch (java.text.ParseException pe) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, pe);        }        catch (Exception e) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);        }    }    /**     * Demande de sélection en vue d'une modification au serveur     */    public void dbSelectForUpdate() {        try {            Object obj = clientRemises.selectObjectForUpdate(serveur, currentUser, clientRemiseCleUnik);            clientRemises = (srcastra.astra.sys.classetransfert.clients.ClientsRemises_T) obj;            clientRemiseCleUnik = clientRemises.getCrscleunik();            updateAllFields();            checkValidity = true;        }        catch (ServeurSqlFailure se) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se, this.currentUser);            checkValidity = false;        }        catch (java.rmi.RemoteException re) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);            checkValidity = false;        }        catch (Exception e) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);            checkValidity = false;        }    }    /**     * Demande d'une suppression ou d'une annulation physique au serveur     */    public void dbDelete() {        int response = javax.swing.JOptionPane.showConfirmDialog(this, java.util.ResourceBundle.getBundle("srcastra/astra/locale/alertmessage", currentUser.getLangage()).getString("eff_cli_fees"));        if (response == javax.swing.JOptionPane.YES_OPTION) {            try {                clientRemises.deleteObject(serveur, currentUser);                for (int i = 0; i < composantToVerif.length; i++) {                    composantToVerif[i].setText("");                }            }            catch (ServeurSqlFailure se) {                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se, this.currentUser);            }            catch (java.rmi.RemoteException re) {                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);            }            catch (Exception e) {                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);            }            setLastModify(-1);            displayReadMode();        }    }    /**     * Demande d'une insertion au serveur     */    public void dbInsert() {        clientRemises = new ClientsRemises_T();        try {            try {                clientRemises.setCsrspcdossier(Float.parseFloat(grp_TField_pcDossier.getText()));            } catch (NumberFormatException nn) {                clientRemises.setCsrspcdossier(0);            }            clientRemises.setCategorie(grp_AC_fees.isSelected() ? clientRemises.FEES : clientRemises.PRCTDOSSIER);            clientRemises.setLibelleFr(grp_TField_libelle.getText());            clientRemises.setLibelleNL(grp_TField_Libellenl.getText());            //  clientRemises.setCsrspcannuel(Float.parseFloat(grp_TField_pcAnnuel.getText()));            try {                clientRemises.setCsrsfees(Double.parseDouble(grp_TField_Fees.getText()));            } catch (NumberFormatException nn) {                clientRemises.setCsrsfees(0);            }            clientRemises.setCscleunik(clCleUnik);            //  clientRemises.setLtcleunik(grp_LSelect_Logement.getCleUnik());            // clientRemises.setTtcleunik(grp_LSelect_Transport.getCleUnik());            // clientRemises.setFrcleunik(grp_LSelect_Fournisseur.getCleUnik());            int key = clientRemises.insertObject(serveur, currentUser, 0);            setLastModify(key);            displayReadMode();        }        catch (srcastra.astra.sys.rmi.Exception.ServeurSqlFailure se)        {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se);        }        catch (java.rmi.RemoteException re) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);        }        catch (java.text.ParseException pe) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, pe);        }        catch (Exception e) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);        }    }    /**     * Permet au parent de lancer le chargement des données au     * <p/>     * <p/>     * sein de liste (Ici : ListSelector)     */    public void chargeData() {        setToolBar(grp_Combo_insertCombo.getDataLenght());    }    /**     * Demande de sélection au serveur     */    public void dbSelect() {        grp_Combo_insertCombo.setExtCleUnik(this.clCleUnik);        grp_Combo_insertCombo.setValuefromParent(1, srcastra.astra.sys.rmi.astrainterface.COMBO_CLIENT_REMISES);        grp_Combo_insertCombo.setModifyItem(getLastModify());        grp_Combo_insertCombo.chargeData(1);        if (clientRemises != null) setLastModify(clientRemises.getCrscleunik());        else setLastModify(-1);    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE A L' AFFICHAGE DES DONNEES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Affichage en mode Insertion     */    public void displayInsertMode() {        grp_TField_Fees.addKeyListener(my_action);        grp_TField_pcDossier.addKeyListener(my_action);        grp_AC_fees.setSelected(true);        grp_AC_fees.addKeyListener(my_key);        grp_AC_remise.addKeyListener(my_key);        grp_AC_fees.addMouseListener(my_mouse);        grp_AC_remise.addMouseListener(my_mouse);        // toolbar        parent.setCurrentActionEnabled(new int[]{actionToolBar.DO_CANCEL});        // fin de toolbar        action = ActionToolBar.ACT_INSERT;        parent.enabledTabbedPane(false);        init();        for (int i = 0; i < composantToVerif.length; i++) {            composantToVerif[i].setEnabled(false);            composantToVerif[i].setText("");        }        grp_Combo_insertCombo.setEnabled(false);        // grp_LSelect_Fournisseur.setLastFocusedComponent(true);        grp_TField_libelle.setEnabled(true);        grp_TField_libelle.requestFocus();    }    public void updateAllFields(Object donnee) {        clientRemises = (srcastra.astra.sys.classetransfert.clients.ClientsRemises_T) donnee;        clientRemiseCleUnik = clientRemises.getCrscleunik();        updateAllFields();    }    /**     * Affichage en Mode disable     */    public void displayDisableMode() {    }    /**     * Méthode pour l'update de tous les champs     */    public void updateAllFields() {        grp_TField_pcDossier.setText("" + clientRemises.getCsrspcdossier());        grp_TField_libelle.setText(clientRemises.getLibelleFr());        grp_TField_Libellenl.setText(clientRemises.getLibelleNL());        if (clientRemises.getCategorie() == 1) grp_AC_fees.setSelected(true);        else grp_AC_remise.setSelected(true);        //  grp_TField_pcAnnuel.setText("" + clientRemises.getCsrspcannuel());        grp_TField_Fees.setText("" + clientRemises.getCsrsfees());        //   grp_LSelect_Transport.setCleUnik(clientRemises.getTtcleunik());        //   grp_LSelect_Transport.setText(clientRemises.getTransportnom());        //  grp_LSelect_Logement.setCleUnik(clientRemises.getLtcleunik());        //  grp_LSelect_Logement.setText(clientRemises.getLogementnom());        // grp_LSelect_Fournisseur.setCleUnik(clientRemises.getFrcleunik());        // grp_LSelect_Fournisseur.setText(clientRemises.getFournnom());    }    /**     * Affichage en mode Lecture     */    public void displayReadMode() {        // toolbar        parent.setCurrentActionEnabled(new int[0]);        action = actionToolBar.ACT_READ;        parent.enabledTabbedPane(true);        // fin de toolbar        init();        for (int i = 0; i < composantToVerif.length; i++) {            composantToVerif[i].setEnabled(false);            composantToVerif[i].setLastFocusedComponent(false);        }        grp_Combo_insertCombo.setEnabled(true);        //   grp_LSelect_Fournisseur.setLastFocusedComponent(true);        this.requestFocus();        dbSelect();    }    /**     * Affichage en mode Modification     */    public void displayUpdateMode() {        // toolbar        grp_TField_Fees.addKeyListener(my_action);        dbSelectForUpdate();        if (!checkValidity)        {            displayReadMode();        } else {            parent.setCurrentActionEnabled(new int[]{actionToolBar.DO_PREVIOUS,                    actionToolBar.DO_CANCEL});            // fin de toolbar            this.action = actionToolBar.ACT_MODIFY;            parent.enabledTabbedPane(false);            for (int i = 0; i < composantToVerif.length; i++) {                composantToVerif[i].setEnabled(true);                composantToVerif[i].setLastFocusedComponent(true);            }            grp_Combo_insertCombo.setEnabled(false);            grp_TField_pcDossier.requestFocus();        }    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE AUX APPELS DE LA TOOLBAR////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public void doPrint() {    }    public void doDelete() {        dbDelete();    }    public void doClose() {    }    public void doModify() {        displayUpdateMode();    }    public void doNext() {    }    public void doCancel() {        switch (action) {            case ActionToolBar.ACT_READ:                parent.cancelModule();                break;            case ActionToolBar.ACT_INSERT:                displayReadMode();                break;            case ActionToolBar.ACT_MODIFY:                try {                    serveur.remoterollback(currentUser.getUrcleunik());                }                catch (java.rmi.RemoteException e)                {                    System.out.println("Exception dans remoterollback dans docancel fournisseurgénéralinfopane" + e.getMessage());                }                setLastModify(clientRemises.getCrscleunik());                displayReadMode();                break;        }    }    public void doCreate() {        displayInsertMode();    }    public void doHelp() {    }    public void doPrevious() {        switch (action) {            case ActionToolBar.ACT_INSERT:                dbInsert();                grp_TField_Fees.removeKeyListener(my_action);                grp_TField_pcDossier.removeKeyListener(my_action);                grp_AC_fees.removeKeyListener(my_key);                grp_AC_remise.removeKeyListener(my_key);                grp_AC_fees.removeMouseListener(my_mouse);                grp_AC_remise.removeMouseListener(my_mouse);                break;            case ActionToolBar.ACT_MODIFY:                dbUpdate();                grp_TField_Fees.removeKeyListener(my_action);                break;        }    }    public void doAccept() {    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => Champs de la classe////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    private int action;    private ActionToolBar actionToolBar;    private boolean checkValidity = false;    private int clCleUnik;    private int clientRemiseCleUnik;    private ClientsRemises_T clientRemises;    private AstraComponent[] composantToVerif;    private Loginusers_T currentUser;    /**     * pour 1 seul initiation du panneau     */    public boolean initOnce = false;    private MainScreenModule parent;    private astrainterface serveur;    private InsertCombo grp_Combo_insertCombo;    private ToolBarInteraction tb_interaction;    private int lastModify;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// STATIC VARIABLES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * numéro du panneau (cfr séquence)     */    public static int PANE_NUMBER = 0;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        // => Graphic Component////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // Variables declaration - do not modify//GEN-BEGIN:variables    private javax.swing.JLabel jLabel4;    private srcastra.astra.gui.components.textFields.ATextField grp_TField_Fees;    private srcastra.astra.gui.components.textFields.ATextField grp_TField_Libellenl;    private javax.swing.JPanel jPanel4;    private javax.swing.JLabel jLabel1;    private javax.swing.JLabel jLabel3;    private javax.swing.JLabel grp_Label_Fees;    private javax.swing.JPanel jPanel3;    private javax.swing.JPanel jPanel10;    private javax.swing.JLabel jLabel2;    private javax.swing.JLabel grp_Label_pcDossier;    private srcastra.astra.gui.components.textFields.ATextField grp_TField_libelle;    private javax.swing.JPanel grp_Pan_inserCombo;    private srcastra.astra.gui.components.checkbox.ACheckBox grp_AC_fees;    private javax.swing.ButtonGroup buttonGroup1;    private srcastra.astra.gui.components.checkbox.ACheckBox grp_AC_remise;    private javax.swing.JPanel jPanel7;    private javax.swing.JPanel jPanel1;    private javax.swing.JPanel jPanel6;    private javax.swing.JPanel jPanel9;    private srcastra.astra.gui.components.textFields.ATextField grp_TField_pcDossier;    // End of variables declaration//GEN-END:variables////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// BEANS PROPERTIES GET/SET SUPPORT////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Permet à la classe qui implémente cette méthode de se     * <p/>     * <p/>     * référencer auprès d' ActionToolBar     *     * @return le n° de l'action     */    public int getAction() {        return this.action;    }    public int[] getDefaultActionToolBarMask() {        return new int[0];    }    /**     * Permet de préciser le type d'action qu'on est occupé de faire :     * <p/>     * <p/>     * 0 pour lecture     * <p/>     * <p/>     * 1 pour création     * <p/>     * <p/>     * 2 pour modification     *     * @param action type d'action     */    public void setAction(int action) {    }    /**     * Permet de recevoir la clé unique d'un objet relatif     * <p/>     * <p/>     * au modules : création par partie ou modification     *     * @param frCleUnik la clé unique     */    public void setFrCleunik(int frCleUnik) {        this.clCleUnik = frCleUnik;    }    /**     * Sert à recevoir le titre de son parent     * <p/>     * <p/>     * pour un cadre éventuel     *     * @return le titre du panneau     */    public String getTitle() {        try {            return java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleClient", currentUser.getLangage()).getString("CREM_TitrePane");        }        catch (java.util.MissingResourceException mre) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.MISSING_RESSOURCE_EXCEPTION, srcastra.astra.Astra.DEBUG, mre);            return "";        }    }    /**     * Spécifie le composant qui implémente cette fonction comme     * <p/>     * <p/>     * le composant qui pilote l'actionToolBar     */    public void setThisAsToolBarComponent() {    }    /**     * Setter for property lastModify.     *     * @param lastModify New value of property lastModify.     */    public void setLastModify(int lastModify) {        this.lastModify = lastModify;    }    /**     * Getter for property lastModify.     *     * @return Value of property lastModify.     */    public int getLastModify() {        return lastModify;    }    public void doSwitch() {    }    public void goUp() {    }    public java.awt.Component m_getGeneriqueTable() {        return grp_Combo_insertCombo.getGrp_Table_Affiche();    }    public void doF10() {    }    public void addKeystroque() {    }    public void doF7() {   }      }