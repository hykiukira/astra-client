/* * FournisseurMemoPane.java * * Created on 24 mai 2002, 11:14 */package srcastra.astra.gui.modules.clients;import srcastra.astra.gui.modules.InternScreenModule;import srcastra.astra.gui.modules.MainScreenModule;import srcastra.astra.gui.components.actions.actionToolBar.*;import srcastra.astra.gui.components.AstraComponent;import srcastra.astra.gui.sys.ErreurScreenLibrary;import javax.swing.JOptionPane;import srcastra.astra.gui.sys.formVerification.*;import srcastra.astra.sys.classetransfert.clients.ClientsMemo_T;import srcastra.astra.sys.rmi.Exception.*;/** * @author Sébastien */public class ClientMemoPane extends javax.swing.JPanel implements InternScreenModule, ToolBarComposer, java.awt.event.ComponentListener {////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// CONSTRUCTOR////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Creates new form FournisseurMemoPane     */    public ClientMemoPane(srcastra.astra.sys.rmi.astrainterface serveur, srcastra.astra.sys.classetransfert.Loginusers_T currentUser, MainScreenModule parent, ActionToolBar actionToolBar, int clCleUnik) {        // initialisation des champs        this.serveur = serveur;        this.currentUser = currentUser;        this.parent = parent;        this.actionToolBar = actionToolBar;        this.clCleUnik = clCleUnik;        this.action = ActionToolBar.ACT_READ;        this.addComponentListener(this);    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// INITIALISATION////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public void init() {        if (!initOnce) {            // chargement des composants et de leurs propriétes            initComponents();            //setDocumentMask();            // chargement d'un tableau reprenant tous les éléments pour une correction            this.composantToVerif = new AstraComponent[]{};            // les éléments ne sont intialisé qu'1 seule fois            initOnce = true;        }    }    private void setDocumentMask() {    }    /**     * This method is called from within the constructor to     * <p/>     * <p/>     * initialize the form.     * <p/>     * <p/>     * WARNING: Do NOT modify this code. The content of this method is     * <p/>     * <p/>     * always regenerated by the Form Editor.     */    private void initComponents() {        jPanel1 = new javax.swing.JPanel();        jScrollPane1 = new javax.swing.JScrollPane();        grp_AField_textarea = new javax.swing.JTextArea();        setLayout(new java.awt.BorderLayout());        setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleFournisseur", currentUser.getLangage()).getString("MEMO_titrePane")));        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));        jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 250));        grp_AField_textarea.setWrapStyleWord(true);        grp_AField_textarea.setFont(new java.awt.Font("Tahoma", 0, 10));        grp_AField_textarea.setEnabled(false);        jScrollPane1.setViewportView(grp_AField_textarea);        jPanel1.add(jScrollPane1);        add(jPanel1, java.awt.BorderLayout.CENTER);    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => LISTENERS////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public void componentShown(java.awt.event.ComponentEvent componentEvent) {        actionToolBar.setTbComposer(this);        parent.setCurrentPanel(this);        switch (action) {            case ActionToolBar.ACT_READ:                displayReadMode();                break;        }    }    public void componentMoved(java.awt.event.ComponentEvent componentEvent) {    }    public void componentResized(java.awt.event.ComponentEvent componentEvent) {    }    public void componentHidden(java.awt.event.ComponentEvent componentEvent) {    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE AU BEANS////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => FONCTIONS APPARENTES AU TRANSFERT DE DONNEE////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Demande d'une modification au serveur     */    public void dbUpdate() {        //clientMemo = new ClientsMemo_T();        try {            //  clientMemo.setCscleunik(this.clCleUnik);            clientMemo.setMemo(grp_AField_textarea.getText());            clientMemo.updateObject(serveur, currentUser);            displayReadMode();        }        catch (ServeurSqlFailure se) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se);        }        catch (java.rmi.RemoteException re) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);        }        catch (java.text.ParseException pe) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, pe);        }        catch (Exception e) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);        }    }    /**     * Demande de sélection en vue d'une modification au serveur     */    public void dbSelectForUpdate() {        checkValidity = true;        try {            clientMemo = (ClientsMemo_T) new ClientsMemo_T().selectObjectForUpdate(serveur, currentUser, clCleUnik);            if (clientMemo != null)                updateAllFields();        }        catch (ServeurSqlFailure se) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se, this.currentUser);        }        catch (java.rmi.RemoteException re) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);        }        catch (Exception e) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);        }    }    /**     * Demande d'une suppression ou d'une annulation physique au serveur     */    public void dbDelete() {    }    /**     * Demande d'une insertion au serveur     */    public void dbInsert() {    }    /**     * Permet au parent de lancer le chargement des données au     * <p/>     * <p/>     * sein de liste (Ici : ListSelector)     */    public void chargeData() {    }    /**     * Demande de sélection au serveur     */    public void dbSelect() {        try {            clientMemo = (ClientsMemo_T) new ClientsMemo_T().selectObject(serveur, currentUser, clCleUnik);            if (clientMemo != null)                updateAllFields();        }        catch (ServeurSqlFailure se) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se);        }        catch (java.rmi.RemoteException re) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);        }        catch (Exception e) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);        }    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE A L' AFFICHAGE DES DONNEES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Affichage en mode Insertion     */    public void displayInsertMode() {    }    public void updateAllFields(Object donnee) {    }    /**     * Affichage en Mode disable     */    public void displayDisableMode() {        actionToolBar.setActionEnabled(new int[0]);        action = -1;        init();        grp_AField_textarea.setEnabled(false);    }    /**     * Méthode pour l'update de tous les champs     */    public void updateAllFields() {        grp_AField_textarea.setText(this.clientMemo.getMemo());    }    /**     * Affichage en mode Lecture     */    public void displayReadMode() {        actionToolBar.setActionEnabled(new int[]{actionToolBar.DO_MODIFY,                actionToolBar.DO_CANCEL});        action = actionToolBar.ACT_READ;        parent.enabledTabbedPane(true);        init();        grp_AField_textarea.setEnabled(false);        this.requestFocus();        dbSelect();    }    /**     * Affichage en mode Modification     */    public void displayUpdateMode() {        dbSelectForUpdate();        if (!checkValidity)        {            displayReadMode();        } else {            actionToolBar.setActionEnabled(new int[]{actionToolBar.DO_PREVIOUS,                    actionToolBar.DO_CANCEL});            action = ActionToolBar.ACT_MODIFY;            parent.enabledTabbedPane(false);            init();            grp_AField_textarea.setEnabled(true);            grp_AField_textarea.requestFocus();        }    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE AUX APPELS DE LA TOOLBAR////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public void doPrint() {    }    public void doDelete() {    }    public void doClose() {    }    public void doModify() {        displayUpdateMode();    }    public void doNext() {    }    public void doCancel() {        switch (action) {            case ActionToolBar.ACT_READ:                parent.cancelModule();                break;            case ActionToolBar.ACT_MODIFY:                try {                    serveur.remoterollback(currentUser.getUrcleunik());                }                catch (java.rmi.RemoteException e)                {                    System.out.println("Exception dans remoterollback dans docancel fournisseurgénéralinfopane" + e.getMessage());                }                displayReadMode();                break;        }    }    public void doCreate() {    }    public void doHelp() {    }    public void doPrevious() {        switch (action) {            case ActionToolBar.ACT_MODIFY:                dbUpdate();                break;        }    }    public void doAccept() {    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => Champs de la classe////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    private AstraComponent[] composantToVerif;    private ActionToolBar actionToolBar;    private srcastra.astra.sys.classetransfert.Loginusers_T currentUser;    private int docCleUnik;    private int clCleUnik;    private boolean checkValidity = false;    private int action;    private ClientsMemo_T clientMemo;    /**     * pour 1 seul initiation du panneau     */    public boolean initOnce = false;    private MainScreenModule parent;    private srcastra.astra.sys.rmi.astrainterface serveur;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// STATIC VARIABLES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public static int PANE_NUMBER = 4;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => Graphic Component////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // Variables declaration - do not modify    private javax.swing.JPanel jPanel1;    private javax.swing.JScrollPane jScrollPane1;    private javax.swing.JTextArea grp_AField_textarea;    // End of variables declaration////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// BEANS PROPERTIES GET/SET SUPPORT////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Permet à la classe qui implémente cette méthode de se     * <p/>     * <p/>     * référencer auprès d' ActionToolBar     *     * @return le n° de l'action     */    public int getAction() {        return action;    }    public int[] getDefaultActionToolBarMask() {        return new int[0];    }    /**     * Permet de préciser le type d'action qu'on est occupé de faire :     * <p/>     * <p/>     * 0 pour lecture     * <p/>     * <p/>     * 1 pour création     * <p/>     * <p/>     * 2 pour modification     *     * @param action type d'action     */    public void setAction(int action) {        this.action = action;    }    /**     * Permet de recevoir la clé unique d'un objet relatif     * <p/>     * <p/>     * au modules : création par partie ou modification     *     * @param frCleUnik la clé unique     */    public void setFrCleunik(int frCleUnik) {        this.clCleUnik = frCleUnik;    }    /**     * Sert à recevoir le titre de son parent     * <p/>     * <p/>     * pour un cadre éventuel     *     * @return le titre du panneau     */    public String getTitle() {        try {            return java.util.ResourceBundle.getBundle("srcastra/astra/locale/ModuleFournisseur", currentUser.getLangage()).getString("MEMO_titrePane");        }        catch (java.util.MissingResourceException mre) {            ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.MISSING_RESSOURCE_EXCEPTION, srcastra.astra.Astra.DEBUG, mre);            return "";        }    }    /**     * Spécifie le composant qui implémente cette fonction comme     * <p/>     * <p/>     * le composant qui pilote l'actionToolBar     */    public void setThisAsToolBarComponent() {    }    public void doSwitch() {    }    public java.awt.Component m_getGeneriqueTable() {        return null;    }    public void doF10() {    }    public void addKeystroque() {    }    public void doF7() {    }}