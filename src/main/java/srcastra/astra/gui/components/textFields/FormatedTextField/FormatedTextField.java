/* * FormatedTextField.java * * Created on 28 november 2002, 12:52 */package srcastra.astra.gui.components.textFields.FormatedTextField;import javax.swing.JPanel;import javax.swing.*;import javax.swing.text.*;import javax.swing.JLabel;import javax.swing.Icon;import javax.swing.border.LineBorder;// Awt Componentimport java.awt.Font;import java.awt.Component;import java.awt.Dimension;import java.awt.Color;// Astra Componentimport srcastra.astra.gui.components.AstraComponent;import srcastra.astra.gui.components.ParentComponent;// Listenersimport java.awt.event.ActionListener;import java.awt.event.ActionEvent;import java.awt.event.FocusEvent;import java.awt.event.FocusListener;import java.beans.PropertyChangeListener;import java.beans.PropertyChangeEvent;import javax.swing.event.SwingPropertyChangeSupport;import javax.swing.event.EventListenerList;import srcastra.astra.gui.event.ValidateField;/** * @author Thomas */public class FormatedTextField extends javax.swing.JPanel implements java.io.Serializable, srcastra.astra.gui.components.AstraComponent {    /**     * Creates new form FormatedTextField     */    public FormatedTextField() {        initComponents();        preInit();    }    public FormatedTextField(java.text.Format fmt) {        initComponents();        preInit(fmt);    }    public int getCaretPosition() {        return grp_JText_encode.getCaretPosition();    }    private void preInit(java.text.Format fmt) {        grp_JText_encode = new JFormattedTextField(fmt);        grp_Label_warning = new javax.swing.JLabel();        grp_JText_encode.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyPressed(java.awt.event.KeyEvent evt) {                grp_TField_encodeKeyPressed(evt);            }        });        grp_JText_encode.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusGained(java.awt.event.FocusEvent evt) {                grp_JText_encodeFocusGained(evt);            }            public void focusLost(java.awt.event.FocusEvent evt) {                grp_JText_encodeFocusLost(evt);            }        });        // particularité du JText        grp_JText_encode.setFont(new Font("Tahoma", Font.PLAIN, 10));        grp_JText_encode.setDisabledTextColor(java.awt.Color.black);        grp_JText_encode.setVerifyInputWhenFocusTarget(false);        grp_JText_encode.setBorder(new LineBorder(Color.black));        // particularité du JLabel        grp_Label_warning.setPreferredSize(new java.awt.Dimension(18, 18));        grp_Label_warning.setFocusable(false);        this.setFocusable(false);        // particularité du panneau (this)        this.setPreferredSize(new java.awt.Dimension(100, 18));        this.setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));        this.add(grp_JText_encode);        this.add(grp_Label_warning);    }    private void preInit() {        grp_JText_encode = new JFormattedTextField();        grp_Label_warning = new javax.swing.JLabel();        grp_JText_encode.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyPressed(java.awt.event.KeyEvent evt) {                grp_TField_encodeKeyPressed(evt);            }        });        grp_JText_encode.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusGained(java.awt.event.FocusEvent evt) {                grp_JText_encodeFocusGained(evt);            }            public void focusLost(java.awt.event.FocusEvent evt) {                grp_JText_encodeFocusLost(evt);            }        });        // particularité du JText        grp_JText_encode.setFont(new Font("Tahoma", Font.PLAIN, 10));        grp_JText_encode.setDisabledTextColor(java.awt.Color.black);        grp_JText_encode.setVerifyInputWhenFocusTarget(false);        grp_JText_encode.setBorder(new LineBorder(Color.black));        // particularité du JLabel        grp_Label_warning.setPreferredSize(new java.awt.Dimension(18, 18));        grp_Label_warning.setFocusable(false);        this.setFocusable(false);        // particularité du panneau (this)        this.setPreferredSize(new java.awt.Dimension(100, 18));        this.setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));        this.add(grp_JText_encode);        this.add(grp_Label_warning);    }    private void grp_JText_encodeFocusGained(java.awt.event.FocusEvent evt) {        grp_Label_warning.setIcon(this.workingIcon);        grp_JText_encode.select(0, 3);        System.out.println("focusgained");        //}        //else        //  setFocusFromTable(false);// Add your handling code here:    }    public void setEnabled(boolean enabled) {        super.setEnabled(enabled);        grp_JText_encode.setEnabled(enabled);        grp_Label_warning.setEnabled(enabled);        adaptBackgroundColor(enabled);    }    private void adaptBackgroundColor(boolean enabled) {        Color background = enabled ? Color.white : Color.lightGray;        grp_JText_encode.setBackground(background);    }    private void grp_JText_encodeFocusLost(java.awt.event.FocusEvent evt) {        //}        //else        //  setFocusFromTable(false);// Add your handling code here:    }    public void requestFocus() {        grp_JText_encode.requestFocus();    }    public void setFormat(DefaultFormatter format) {        DefaultFormatter fmt = format;        fmt.setValueClass(grp_JText_encode.getValue().getClass());        DefaultFormatterFactory fmtFactory = new DefaultFormatterFactory(fmt, fmt, fmt);        grp_JText_encode.setFormatterFactory(fmtFactory);    }    public void setValue(Object value) {        grp_JText_encode.setValue(value);    }    public Object getValue() {        return grp_JText_encode.getValue();    }    private void grp_TField_encodeKeyPressed(java.awt.event.KeyEvent evt) {        if (evt.getKeyCode() == evt.VK_ENTER) {            if (!getGrp_Comp_nextComponent().isEnabled()) getGrp_Comp_nextComponent().setEnabled(true);            getGrp_Comp_nextComponent().requestFocus();        }    }    /**     * This method is called from within the constructor to     * <p/>     * <p/>     * <p/>     * initialize the form.     * <p/>     * <p/>     * <p/>     * WARNING: Do NOT modify this code. The content of this method is     * <p/>     * <p/>     * <p/>     * always regenerated by the Form Editor.     */    private void initComponents() {//GEN-BEGIN:initComponents    }//GEN-END:initComponents    /**     * Getter for property grp_Comp_nextComponent.     *     * @return Value of property grp_Comp_nextComponent.     */    public JComponent getGrp_Comp_nextComponent() {        return grp_Comp_nextComponent;    }    /**     * Setter for property grp_Comp_nextComponent.     *     * @param grp_Comp_nextComponent New value of property grp_Comp_nextComponent.     */    public void setGrp_Comp_nextComponent(JComponent grp_Comp_nextComponent) {        this.grp_Comp_nextComponent = grp_Comp_nextComponent;    }    /**     * Getter for property warningIcon.     *     * @return Value of property warningIcon.     */    public javax.swing.Icon getWarningIcon() {        return warningIcon;    }    /**     * Setter for property warningIcon.     *     * @param warningIcon New value of property warningIcon.     */    public void setWarningIcon(javax.swing.Icon warningIcon) {        this.warningIcon = warningIcon;    }    /**     * Getter for property workingIcon.     *     * @return Value of property workingIcon.     */    public javax.swing.Icon getWorkingIcon() {        return workingIcon;    }    /**     * Setter for property workingIcon.     *     * @param workingIcon New value of property workingIcon.     */    public void setWorkingIcon(javax.swing.Icon workingIcon) {        this.workingIcon = workingIcon;    }    /**     * Getter for property lastFocusedComponent.     *     * @return Value of property lastFocusedComponent.     */    public boolean isLastFocusedComponent() {        return lastFocusedComponent;    }    /**     * Setter for property lastFocusedComponent.     *     * @param lastFocusedComponent New value of property lastFocusedComponent.     */    public void setLastFocusedComponent(boolean lastFocusedComponent) {        this.lastFocusedComponent = lastFocusedComponent;    }    /**     * Getter for property parentComp.     *     * @return Value of property parentComp.     */    public srcastra.astra.gui.components.ParentComponent getParentComp() {        return parentComp;    }    /**     * Setter for property parentComp.     *     * @param parentComp New value of property parentComp.     */    public void setParentComp(srcastra.astra.gui.components.ParentComponent parentComp) {        this.parentComp = parentComp;    }    public void addActionListener(ActionListener listener) {    }    public void clearIcon() {    }    public boolean getverif() {        return true;    }    public void setMaximumSize(Dimension dim) {        super.setMaximumSize(dim);        int width = dim.width;        int height = dim.height;        grp_JText_encode.setMaximumSize(new Dimension(width - (height), height));        //    grp_But_Button.setMaximumSize(new Dimension(height, height));        grp_Label_warning.setMaximumSize(new Dimension(height, height));    }    public void setMinimumSize(Dimension dim) {        super.setMinimumSize(dim);        int width = dim.width;        int height = dim.height;        grp_JText_encode.setMinimumSize(new Dimension(width - (height), height));        //   grp_But_Button.setMinimumSize(new Dimension(height, height));        grp_Label_warning.setMinimumSize(new Dimension(height, height));    }    public void setPreferredSize(Dimension dim) {        super.setPreferredSize(dim);        int width = dim.width;        int height = dim.height;        grp_JText_encode.setPreferredSize(new Dimension(width - (height), height));        // grp_But_Button.setPreferredSize(new Dimension(height, height));        grp_Label_warning.setPreferredSize(new Dimension(height, height));    }    public void removeActionListener(ActionListener listener) {    }    public void setText(String text) {    }    public void setFormatterFactory(DefaultFormatterFactory fmtFactory) {        grp_JText_encode.setFormatterFactory(fmtFactory);    }    public String getText2() {        return "";    }    /**     * Getter for property grp_JText_encode.     *     * @return Value of property grp_JText_encode.     */    public javax.swing.JFormattedTextField getGrp_JText_encode() {        return grp_JText_encode;    }    /**     * Setter for property grp_JText_encode.     *     * @param grp_JText_encode New value of property grp_JText_encode.     */    public void setGrp_JText_encode(javax.swing.JFormattedTextField grp_JText_encode) {        this.grp_JText_encode = grp_JText_encode;    }    // Variables declaration - do not modify//GEN-BEGIN:variables    // End of variables declaration//GEN-END:variables    protected JComponent grp_Comp_nextComponent;    /* propriété : le prochain composant à prendre le focus */    protected JComponent grp_Comp_previousComponent;    /* propriétés : icône de warning */    protected Icon warningIcon;    /* propriétés : icône d'état */    protected Icon workingIcon;    /* propriété : mis à true => le composant doit lancer la fct verifAllFields() de son parent (parentComp) */    protected boolean lastFocusedComponent;    /* propriété : définit le parent, un objet parent component dans lequel se trouve le beans */    protected ParentComponent parentComp;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => Champs de la classe////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /* défini si la valeur dans le champs de texte est correcte (en rapport avec l'objet Document associé au champs de texte) */    protected boolean correctInput = true;    /* pour la gestion du changement de propiétés */    protected SwingPropertyChangeSupport m_supporter;    protected EventListenerList m_listenerList;    protected ActionEvent m_actionEvent;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// STATIC VARIABLES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public static final String BEANS_PROPERTY_CORRECT_INPUT = "CorrectInput";    public static final String BEANS_PROPERTY_VALIDATE = "Validate";////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => Graphic Component////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    protected JFormattedTextField grp_JText_encode;    protected JLabel grp_Label_warning;}