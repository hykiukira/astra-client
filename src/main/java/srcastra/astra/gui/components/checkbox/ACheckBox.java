/* * ACheckbox.java * * Created on 5 août 2002, 9:05 */package srcastra.astra.gui.components.checkbox;// Swing Importationsimport javax.swing.*;// Awt Importationsimport java.awt.Component;import java.awt.Dimension;import java.awt.Color;// Listenersimport java.awt.event.ActionListener;import java.awt.event.ActionEvent;import java.awt.event.FocusListener;import java.awt.event.FocusEvent;import java.beans.PropertyChangeListener;import java.awt.event.KeyListener;import java.awt.event.*;import javax.swing.event.EventListenerList;// Serializationimport java.io.Serializable;// AstraComponentimport srcastra.astra.gui.components.AstraComponent;/** * @author Sébastien */public class ACheckBox extends JPanel implements Serializable, AstraComponent, srcastra.astra.gui.components.textFields.ComponentInterface {////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// CONSTRUCTOR////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Creates a new instance of ACheckbox     */    boolean tonext = true;    public ACheckBox() {        preInit();        initComponents("");        postInit();        super.setFocusable(false);        grp_Label_warning.setFocusable(false);        super.setFocusCycleRoot(false);        //setFocusTraversable(false);        // setFocusCycleRoot(false);        grp_Cbox_box.setFocusCycleRoot(false);    }    public ACheckBox(String title) {        preInit();        initComponents(title);        postInit();        super.setFocusable(false);        grp_Label_warning.setFocusable(false);        super.setFocusCycleRoot(false);        grp_Cbox_box.setFocusCycleRoot(false);    }    public javax.swing.JCheckBox getCheckBox() {        return this.grp_Cbox_box;    }    public void addKeyListener(KeyListener listener) {        grp_Cbox_box.addKeyListener(listener);    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// INITIALISATION////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    protected void preInit() {        m_listenerList = new EventListenerList();    }    public void addMouseListener(MouseListener m) {        grp_Cbox_box.addMouseListener(m);    }    public boolean isFocusTraversable() {        return false;    }    public boolean isFocusCycleRoot() {        return false;    }    protected void initComponents(String title) {        grp_Cbox_box = new Mcheck(this, title);        grp_Label_warning = new JLabel();        grp_Cbox_box.setOpaque(false);        // grp_Label_warning        grp_Label_warning.setPreferredSize(new java.awt.Dimension(18, 18));        grp_Label_warning.setOpaque(false);        this.setPreferredSize(new java.awt.Dimension(30, 18));        this.setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));        this.add(grp_Cbox_box);        this.add(grp_Label_warning);        this.setOpaque(false);    }    protected void postInit() {        new srcastra.astra.gui.components.fx.JComponentBorderFx(grp_Cbox_box);        grp_Cbox_box.addFocusListener(focusListener);        grp_Label_warning.addFocusListener(focusListener);        grp_Cbox_box.addActionListener(actionListener);        grp_Cbox_box.addKeyListener(keyListener);        grp_Label_warning.addKeyListener(keyListener);    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => LISTENERS/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////* Action Listener pour le TextField */    protected ActionListener actionListener = new ActionListener() {        public void actionPerformed(ActionEvent evt) {            try {                if (tonext)                    if (grp_Comp_nextComponent != null && !grp_Comp_nextComponent.isEnabled())                        grp_Comp_nextComponent.setEnabled(true);                // grp_Comp_nextComponent.requestFocus();            }            catch (NullPointerException e) {            }        }    };    protected KeyListener keyListener = new KeyListener() {        public void keyPressed(KeyEvent evt) {            System.out.println("[CBOX] ok keypressed");            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {                System.out.println("[CBOX] ok j'excecute");                fireStateChanged();                if (tonext)                    if (grp_Comp_nextComponent != null) {                        if (!grp_Comp_nextComponent.isEnabled()) grp_Comp_nextComponent.setEnabled(true);                        grp_Comp_nextComponent.requestFocus();                    }            }        }        public void keyReleased(KeyEvent e) {        }        public void keyTyped(KeyEvent e) {        }    };    /* Focus Listener pour le Textfield */    protected FocusListener focusListener = new FocusListener() {        public void focusGained(FocusEvent evt) {            if (grp_Comp_previousComponent == null || grp_Comp_previousComponent.isEnabled()) {                setStateIcon(workingIcon);            }        }        public void focusLost(FocusEvent evt) {            setStateIcon(null);        }    };////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE AU BEANS////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    private void setStateIcon(Icon icone) {        grp_Label_warning.setIcon(icone);    }    private void adaptBackgroundColor(boolean enabled) {        Color background = enabled ? Color.white : Color.lightGray;    }    protected void fireStateChanged() {        Object[] listeners = m_listenerList.getListenerList();        for (int i = 0; i < listeners.length; i++) {            // System.out.println("[FIRESTATECHANGED] listeners : " + listeners[i].getClass());            if (ActionListener.class.isAssignableFrom(listeners[i].getClass())) {                // System.out.println("[FIRESTATECHANGED] passé");                if (m_actionEvent == null) {                    m_actionEvent = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "validate");                }                ((ActionListener) listeners[i]).actionPerformed(m_actionEvent);            }        }    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => FONCTIONS APPARENTES AU TRANSFERT DE DONNEE////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE A L' AFFICHAGE DES DONNEES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE AUX APPELS DE LA TOOLBAR////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => Champs de la classe////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    protected EventListenerList m_listenerList;    protected ActionEvent m_actionEvent;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => Beans Properties////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /* propriété : le composant précédent à prendre le focus */    protected JComponent grp_Comp_nextComponent;    /* propriété : le prochain composant à prendre le focus */    protected JComponent grp_Comp_previousComponent;    /* propriétés : icône d'état */    protected Icon workingIcon;    /* propriété : mis à true => le composant doit lancer la fct verifAllFields() de son parent (parentComp) */    protected boolean lastFocusedComponent;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// STATIC VARIABLES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => Graphic Component////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    protected Mcheck grp_Cbox_box;    protected JLabel grp_Label_warning;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// BEANS PROPERTIES GET/SET SUPPORT////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public boolean getverif() {        return true;    }    public boolean isLastFocusedComponent() {        return lastFocusedComponent;    }    public void setLastFocusedComponent(boolean lastFocusedComponent) {        this.lastFocusedComponent = lastFocusedComponent;    }    public void setText(String text) {    }    /**     * Getter for property grp_Comp_previousComponent.     *     * @return Value of property grp_Comp_previousComponent.     */    public java.awt.Component getGrp_Comp_previousComponent() {        return grp_Comp_previousComponent;    }    /**     * Setter for property grp_Comp_previousComponent.     *     * @param grp_Comp_previousComponent New value of property grp_Comp_previousComponent.     */    public void setGrp_Comp_previousComponent(JComponent grp_Comp_previousComponent) {        this.grp_Comp_previousComponent = grp_Comp_previousComponent;    }    /**     * Getter for property grp_Comp_nextComponent.     *     * @return Value of property grp_Comp_nextComponent.     */    public JComponent getGrp_Comp_nextComponent() {        return grp_Comp_nextComponent;    }    /**     * Setter for property grp_Comp_nextComponent.     *     * @param grp_Comp_nextComponent New value of property grp_Comp_nextComponent.     */    public void setGrp_Comp_nextComponent(JComponent grp_Comp_nextComponent) {        this.grp_Comp_nextComponent = grp_Comp_nextComponent;        grp_Cbox_box.setNext(grp_Comp_nextComponent);    }    /**     * Getter for property workingIcon.     *     * @return Value of property workingIcon.     */    public javax.swing.Icon getWorkingIcon() {        return workingIcon;    }    /**     * Setter for property workingIcon.     *     * @param workingIcon New value of property workingIcon.     */    public void setWorkingIcon(javax.swing.Icon workingIcon) {        this.workingIcon = workingIcon;    }    public void setEnabled(boolean enabled) {        super.setEnabled(enabled);        grp_Cbox_box.setEnabled(enabled);        grp_Label_warning.setEnabled(enabled);    }    public void addPropertyChangeListener(PropertyChangeListener listener) {    }    public void removePropertyChangeListener(PropertyChangeListener listener) {    }    public void requestFocus() {        if (grp_Comp_previousComponent == null || grp_Comp_previousComponent.isEnabled()) {            grp_Cbox_box.requestFocus();        }    }    public boolean isSelected() {        return grp_Cbox_box.isSelected();    }    public void setSelected(boolean selected) {        grp_Cbox_box.setSelected(selected);    }    public void setVerifyInputWhenFocusTarget(boolean flag) {        grp_Cbox_box.setVerifyInputWhenFocusTarget(flag);    }    public boolean getVerifyInputWhenFocusTarget() {        return grp_Cbox_box.getVerifyInputWhenFocusTarget();    }    public void addActionListener(ActionListener listener) {        m_listenerList.add(ActionListener.class, listener);    }    public void removeActionListener(ActionListener listener) {        m_listenerList.remove(ActionListener.class, listener);    }    public void clearIcon() {        grp_Label_warning.setIcon(null);    }    public boolean getCorreInput() {        return true;    }    public boolean isOpen() {        return true;    }    public void setGoodIcon(boolean sw) {    }    public String getText2() {        return "";    }    /**     * Getter for property tonext.     *     * @return Value of property tonext.     */    public boolean isTonext() {        return tonext;    }    /**     * Setter for property tonext.     *     * @param tonext New value of property tonext.     */    public void setTonext(boolean tonext) {        this.tonext = tonext;    }    /**     * Getter for property grp_Cbox_box.     *     * @return Value of property grp_Cbox_box.     */    public srcastra.astra.gui.components.checkbox.Mcheck getGrp_Cbox_box() {        return grp_Cbox_box;    }    /**     * Setter for property grp_Cbox_box.     *     * @param grp_Cbox_box New value of property grp_Cbox_box.     */    public void setGrp_Cbox_box(srcastra.astra.gui.components.checkbox.Mcheck grp_Cbox_box) {        this.grp_Cbox_box = grp_Cbox_box;    }    public void setWarningIcon(javax.swing.Icon workingIcon) {    }}