/* * IntegerMask.java * * Created on 10 mai 2002, 16:38 */package srcastra.astra.gui.components.combobox.liste;import javax.swing.text.*;import srcastra.astra.gui.components.textFields.ATextFieldComponent;import java.util.Locale;import srcastra.astra.gui.test.*;import srcastra.astra.gui.components.combobox.liste.*;import srcastra.astra.gui.sys.utils.*;import srcastra.astra.sys.rmi.*;import srcastra.astra.sys.rmi.Exception.*;import java.rmi.*;import java.util.*;import javax.swing.*;import srcastra.astra.sys.classetransfert.*;import srcastra.astra.sys.classetransfert.clients.*;/** * @author Sébastien */public class ListeMask2 extends srcastra.astra.gui.sys.formVerification.DefaultMask {////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// CONSTRUCTORS////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Creates new IntegerMask     */    public ListeMask2(astrainterface serveur, int minLenght, int maxLenght, Locale locale, int caseType, ListeModelInterface model, Liste parent, int longueurtexte) {        super(minLenght, maxLenght, locale, caseType);        m_parent = parent;        m_model = model;        m_serveur = serveur;        m_longeur_saisie = longueurtexte;        m_column2 = 1;    }    public void setColumn(int column)    {        m_column = column;    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// METHODES APPARENTE AU BEANS    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {        String currentText = getText(0, getLength());        String beforeOffset = currentText.substring(0, offs);        String afterOffset = currentText.substring(offs, currentText.length());        System.out.println("[*********]INSERTSTRING");        boolean check = false;        String proposedResult = beforeOffset + str + afterOffset;        if (m_parent.isFreeModeAllow()) {            if (m_parent.isFreemode()) {                super.insertString(offs, str, a);                m_parent.setFreetexte(m_parent.getGrp_TField_encode().getText());                m_parent.setCleUnik2(0);                return;            } else {                m_parent.setFreetexte("NO");            }            if (str.equals(" ") && offs == 0) {                super.insertString(offs, str, a);                m_parent.setFreemode(true);                return;            } else                m_parent.setFreetexte("NO");        }        if (str.equals("")) {            super.insertString(offs, str, a);        } else {            if (!search) {                if (!m_parent.getGrp_PopMenu_popup().isVisible())                    affichePopup(true);                check = search(proposedResult);                if (check) {                    super.insertString(offs, str, a);                    m_parent.setGoodIcon(true);                    m_parent.getGrp_TField_encode().requestFocus();                } else {                    java.awt.Toolkit.getDefaultToolkit().beep();                    JToolTip toolTip = new JToolTip();                    toolTip.setToolTipText("test");                    toolTip.setComponent(m_parent.getGrp_Table_table());                    toolTip.setVisible(true);                    System.out.println("showtooltip");                    m_parent.getGrp_TField_encode().requestFocus();                }            } else {                super.insertString(offs, str, a);                search = false;            }        }    }    private boolean search(String proposedResult) {        boolean check = false;        position = m_model.searchAWord(proposedResult, m_column2);        System.out.println("search position :" + position);        if (position > -1 && position < m_parent.getGrp_Table_table().getRowCount()) {            String word = m_parent.getGrp_Table_table().getValueAt(position, 0).toString();            // m_parent.setCleUnik2(cleUnik            char[] proposetab = proposedResult.toUpperCase().toCharArray();            int longueur = proposetab.length;            if (longueur <= word.length()) {                String tmp = word.substring(0, longueur);                if (tmp.toUpperCase().equals(proposedResult.toUpperCase()))                    check = true;                if (position > -1 && position < m_parent.getGrp_Table_table().getRowCount() && check == true)                    m_parent.getGrp_Table_table().setRowSelectionInterval(position, position);                m_parent.getGrp_Table_table().scrollRectToVisible(new java.awt.Rectangle(0, m_parent.getGrp_Table_table().getRowHeight() * position, 20, m_parent.getGrp_Table_table().getRowHeight()));                Object[] tmptab = (Object[]) getObject(m_parent.getGrp_Table_table().getSelectedRow());                if (tmptab != null) {                    try {                        if (tmptab[0] instanceof Integer)                            m_parent.setCleUnik2(((Integer) tmptab[0]).intValue());                        if (tmptab[0] instanceof Long)                            m_parent.setCleUnik2(((Long) tmptab[0]).intValue());                    }                    catch (NumberFormatException nn) {                        nn.printStackTrace();                    }                }            }        }        return check;    }    public Object getObject(int position) {        if (m_model.getM_vector() != null && m_model.getM_vector().size() > 0)            return m_model.getM_vector().get(position);        else            return null;    }    public void remove(int offs, int len) throws BadLocationException {        super.remove(offs, len);        if (m_parent.isFreeModeAllow()) {            if (m_parent.isFreemode()) {                m_parent.setFreetexte(m_parent.getGrp_TField_encode().getText());            }        }        if (offs == 0)            m_parent.setFreemode(false);        System.out.println("[*********]REMOVE " + offs + "  longueur" + len);        if (validate == false) {            String result = m_parent.getGrp_TField_encode().getText(0, getLength());            System.out.println("je remove " + result.length());            if (result.length() == 0)                affichePopup(false);            else {                if (m_parent.getGrp_PopMenu_popup().isVisible())                    search(result);            }        }    }    public void removeFree(int offs, int len) throws BadLocationException {        super.remove(offs, len);    }    public void affichePopup(boolean sw) {        if (sw == true) {            m_model.loadata();            m_parent.getGrp_Table_table().repaint();            m_parent.getGrp_PopMenu_popup().setVisible(true);            int x = m_parent.getGrp_PopMenu_popup().getBorder().getBorderInsets(m_parent.getGrp_PopMenu_popup()).right - m_parent.getGrp_TField_encode().getX();            //  m_parent.getGrp_PopMenu_popup().setSize( m_parent.getGrp_PopMenu_popup().getWidth(),m_parent.getGrp_Table_table().getHeight());            if (m_parent.isLeft() && !m_parent.isUp())                m_parent.getGrp_PopMenu_popup().show(m_parent, (m_parent.getGrp_TField_encode().getX() + m_parent.getGrp_TField_encode().getWidth()) - m_parent.getGrp_PopMenu_popup().getWidth(),                        m_parent.getGrp_TField_encode().getY() + 18);            else if (!m_parent.isLeft() && !m_parent.isUp())                m_parent.getGrp_PopMenu_popup().show(m_parent, m_parent.getGrp_TField_encode().getX(),                        m_parent.getGrp_TField_encode().getY() + 18);            else if (m_parent.isLeft() && m_parent.isUp())                m_parent.getGrp_PopMenu_popup().show(m_parent, (m_parent.getGrp_TField_encode().getX() + m_parent.getGrp_TField_encode().getWidth()) - m_parent.getGrp_PopMenu_popup().getWidth(),                        m_parent.getGrp_TField_encode().getY() - m_parent.getGrp_PopMenu_popup().getHeight());            else if (!m_parent.isLeft() && m_parent.isUp())                m_parent.getGrp_PopMenu_popup().show(m_parent, m_parent.getGrp_TField_encode().getX(),                        m_parent.getGrp_TField_encode().getY() - m_parent.getGrp_PopMenu_popup().getHeight());            m_parent.getGrp_Table_table().repaint();            m_parent.getGrp_PopMenu_popup().repaint();            if (m_parent.getGrp_Table_table().getRowCount() > 0)                m_parent.getGrp_Table_table().changeSelection(0, 0, false, false);            m_parent.setFocusFromTable(true);            m_parent.getGrp_TField_encode().requestFocus();        } else {            m_parent.getGrp_PopMenu_popup().setVisible(false);            m_parent.getGrp_TField_encode().requestFocus();        }    }    public int searchByKey(int i) {        search = true;        int j = m_model.searchAWord(new Integer(i), 0);        System.out.println("position" + j);        if (j >= 0 && j < m_model.getM_vector_by_key().size()) {            Object[] tmpobj = (Object[]) m_model.getM_vector_by_key().get(j);            m_parent.setData(tmpobj);            int cletab = ((Integer) tmpobj[0]).intValue();            if (cletab == i) {                if (m_column2 == 3)                    m_parent.getGrp_TField_encode().setText(tmpobj[3].toString());                else {                    if (tmpobj[1] != null)                        m_parent.getGrp_TField_encode().setText(tmpobj[1].toString());                }                m_parent.getGrp_TField_encode().setCaretPosition(0);                m_parent.fillnextComponentString(tmpobj[m_column2 + 1].toString());                int size = tmpobj.length;                System.out.println("VALEUR trouvée" + tmpobj[1].toString());                return ((Integer) tmpobj[size - 1]).intValue();            }        }        return 0;    }    public boolean isValidate() {        return validate;    }    /**     * Setter for property validate.     *     * @param validate New value of property validate.     */    public void setValidate(boolean validate) {        this.validate = validate;    }    /** Getter for property position.     * @return Value of property position.     */    /**     * Setter for property position.     *     * @param position New value of property position.     */    public void setPosition(int position) {        this.position = position;    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// STATIC VARIABLES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * value for erreur code     */    public static int ERREUR_CODE = srcastra.astra.gui.sys.formVerification.FormVerification.ERREUR_STRING;    private int currentposition;    ListeModelInterface m_model;    Liste m_parent;    int m_column;    astrainterface m_serveur;    boolean charger = false;    int m_longeur_saisie;    ArrayList array;    int position;    boolean validate;    boolean search;    public int m_column2;}