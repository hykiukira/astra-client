/* * ListSelector.java * Created on 13 mars 2002, 13:07 */package srcastra.astra.gui.components.combobox.listSelector;// Swing importimport javax.swing.JPanel;import javax.swing.JTextField;import javax.swing.JLabel;import javax.swing.plaf.basic.BasicArrowButton;import javax.swing.Icon;import javax.swing.text.*;import javax.swing.JPopupMenu;import javax.swing.JScrollPane;import javax.swing.JTable;import javax.swing.table.TableColumn;import javax.swing.ListSelectionModel;import javax.swing.JComponent;import javax.swing.border.EmptyBorder;// awt importimport java.awt.Dimension;import java.awt.Font;import java.awt.Color;import javax.swing.border.LineBorder;import java.awt.FlowLayout;import java.awt.GridBagLayout;import java.awt.GridBagConstraints;// Listenersimport java.awt.event.ActionListener;import java.awt.event.ActionEvent;import javax.swing.event.EventListenerList;import java.awt.event.FocusEvent;import java.awt.event.FocusListener;import javax.swing.event.PopupMenuEvent;import javax.swing.event.PopupMenuListener;import java.awt.event.KeyListener;import java.awt.event.KeyEvent;import javax.swing.event.DocumentListener;import javax.swing.event.DocumentEvent;import javax.swing.event.SwingPropertyChangeSupport;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import srcastra.astra.gui.event.*;// Diversimport java.io.Serializable;import srcastra.astra.gui.components.AstraComponent;import srcastra.astra.gui.components.ParentComponent;import srcastra.astra.gui.sys.formVerification.ListSelectorMask;import srcastra.astra.sys.Logger;import java.util.Locale;import javax.swing.event.EventListenerList;import java.awt.event.ActionEvent;/** * @author Sébastien */public class ListSelector extends JPanel implements Serializable, AstraComponent {////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// CONSTRUCTOR////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public ListSelector() {        this(null);    }    public ListSelector(JComponent additional) {        grp_additional = additional;        preInit();        initComponent();        postInit();    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// INITIALISATION////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    protected void preInit() {        this.lastFocusedComponent = false;        m_supporter = new SwingPropertyChangeSupport(this);        m_listenerList = new EventListenerList();        m_validateList = new EventListenerList();    }    protected void initComponent() {        grp_TField_encode = new JTextField();        grp_But_Button = new BasicArrowButton(BasicArrowButton.SOUTH);        grp_Label_warning = new JLabel();        grp_PopMenu_popup = new JPopupMenu();        grp_ScrollPan_popupScrollPane = new JScrollPane();        grp_Table_table = new JTable();        grp_Pan_research = new JPanel();        grp_TField_research = new JTextField();        grp_But_ButtonResearch = new BasicArrowButton(BasicArrowButton.NORTH);        grp_Label_warningResearch = new JLabel();        grp_Pan_researchBean = new JPanel();        /* textfield */        grp_TField_encode.setPreferredSize(new Dimension(114, 18));        grp_TField_encode.setFont(new Font("Tahoma", Font.PLAIN, 10));        grp_TField_encode.setDisabledTextColor(java.awt.Color.black);        grp_TField_encode.setVerifyInputWhenFocusTarget(false);        grp_TField_encode.setBorder(new LineBorder(Color.black));        grp_TField_encode.setRequestFocusEnabled(true);        /* Button */        grp_But_Button.setPreferredSize(new Dimension(18, 18));        grp_But_Button.setRequestFocusEnabled(false);        /* label warning */        grp_Label_warning.setPreferredSize(new Dimension(18, 18));        grp_Label_warning.setRequestFocusEnabled(false);        /*---Beans de recherche ------------------------------------------------------------------*/        /* textfield de recherche */        grp_TField_research.setPreferredSize(new Dimension(114, 18));        grp_TField_research.setFont(new Font("Tahoma", Font.PLAIN, 10));        grp_TField_research.setDisabledTextColor(java.awt.Color.black);        grp_TField_research.setVerifyInputWhenFocusTarget(false);        grp_TField_research.setBorder(new LineBorder(Color.black));        /* Button de recherche */        grp_But_ButtonResearch.setPreferredSize(new Dimension(18, 18));        grp_But_ButtonResearch.setRequestFocusEnabled(false);        /* Label warning de recherche */        grp_Label_warningResearch.setPreferredSize(new Dimension(18, 18));        grp_Label_warningResearch.setRequestFocusEnabled(false);        /* Panneau contenant le beans de recherche */        grp_Pan_researchBean.setLayout(new javax.swing.BoxLayout(grp_Pan_researchBean, javax.swing.BoxLayout.X_AXIS));        grp_Pan_researchBean.add(grp_TField_research);        grp_Pan_researchBean.add(grp_But_ButtonResearch);        grp_Pan_researchBean.add(grp_Label_warningResearch);        /*---Beans de recherche ------------------------------------------------------------------*/        /* Panel de recherche */        //grp_Pan_research.setLayout(new FlowLayout(FlowLayout.LEFT));        //grp_Pan_research.add(grp_Pan_researchBean);        /* Table */        grp_Table_table.setPreferredScrollableViewportSize(new Dimension(500, 200));        grp_Table_table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);        grp_Table_table.setRequestFocusEnabled(false);        grp_Table_table.setBorder(new EmptyBorder(1, 0, 0, 0));        javax.swing.table.DefaultTableCellRenderer cell = new javax.swing.table.DefaultTableCellRenderer();        cell.setBorder(new javax.swing.border.EmptyBorder(1, 1, 1, 1));        cell.setOpaque(false);        grp_Table_table.getTableHeader().setDefaultRenderer(cell);        /* Scroll Pane */        grp_ScrollPan_popupScrollPane.setPreferredSize(new Dimension(200, 200));        grp_ScrollPan_popupScrollPane.setViewportView(grp_Table_table);        grp_ScrollPan_popupScrollPane.setAutoscrolls(true);        grp_ScrollPan_popupScrollPane.setBorder(new EmptyBorder(2, 0, 0, 0));        grp_ScrollPan_popupScrollPane.setRequestFocusEnabled(false);        /* Popup Menu */        GridBagLayout gridbag = new GridBagLayout();        grp_PopMenu_popup.setLayout(gridbag);        GridBagConstraints c = new GridBagConstraints();        c.gridx = 0;        c.anchor = GridBagConstraints.WEST;        grp_PopMenu_popup.add(grp_Pan_researchBean, c);        c = new GridBagConstraints();        c.gridx = 0;        c.insets = new java.awt.Insets(5, 0, 0, 0);        grp_PopMenu_popup.add(grp_ScrollPan_popupScrollPane, c);        if (grp_additional != null) grp_PopMenu_popup.add(grp_additional, c);        grp_PopMenu_popup.setRequestFocusEnabled(false);        grp_PopMenu_popup.setOpaque(false);        /* this */        this.setPreferredSize(new java.awt.Dimension(150, 18));        this.setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));        this.setRequestFocusEnabled(false);        this.add(grp_TField_encode);        this.add(grp_But_Button);        this.add(grp_Label_warning);    }    protected void postInit() {        new srcastra.astra.gui.components.fx.JComponentBorderFx(grp_TField_encode);        requiredInput = true;        // listeners        grp_TField_encode.addFocusListener(focusListener);        grp_TField_encode.addActionListener(textFieldEncodeActionListener);        grp_TField_research.addActionListener(textFieldResearchActionListener);        /* Boutons arrow */        //grp_But_Button.addActionListener(openListButtonActionListener);        grp_But_ButtonResearch.addActionListener(openListButtonActionListener);        grp_PopMenu_popup.addPopupMenuListener(popupMenuListener);        grp_Table_table.addMouseListener(tableMouseListener);        grp_But_Button.addMouseListener(buttonMouseListener);        grp_TField_encode.addFocusListener(iconFocusListener);        // grp_TField_research.addFocusListener(iconFocusListener);        /* focus listener pour ramener le focus au textfield */        // grp_Table_table.addFocusListener(toTextFieldFocusListener);        grp_TField_encode.getDocument().addDocumentListener(docListener);        grp_TField_encode.addKeyListener(dropDownKeyListener);        cleUnik = -1;    }    public void setAdditionalComponent(JComponent c) {        if (grp_additional != null) grp_PopMenu_popup.remove(grp_additional);        GridBagConstraints gc = new GridBagConstraints();        gc.gridy = 3;        gc.fill = gc.BOTH;        grp_PopMenu_popup.add(c, gc);    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => LISTENERS////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /* Action Listener pour le TextField */    protected ActionListener textFieldEncodeActionListener = new ActionListener() {        public void actionPerformed(ActionEvent evt) {            showTable(false, 0);            if (popupThread != null) {                synchronized (popupThread) {                    /* Le pop-up charge toujours ses données. il fera la vérification lui meme*/                    if (popupThread.stillLoading()) {                        if (!grp_Comp_nextComponent.isEnabled()) grp_Comp_nextComponent.setEnabled(true);                        grp_Comp_nextComponent.requestFocus();                        return;                    }                }            }            validComponent();            fire();            try {                if (!grp_Comp_nextComponent.isEnabled()) {                    grp_Comp_nextComponent.setEnabled(true);                }                grp_Comp_nextComponent.requestFocus();            } catch (NullPointerException e) {            }        }    };//----------------------------------------------------------------------------------------------------------------------------------------    /* Action Listener pour le champ de recherche */    protected ActionListener textFieldResearchActionListener = new ActionListener() {        public void actionPerformed(ActionEvent evt) {            /* uniquement si le beans ne doit pas être rempli et qu'on a pas déjà effectuer de recherche */            if (!requiredInput && grp_TField_research.getText().equals("")) cleUnik = -1;                /* sinon on met à jour la clé unique, le textFieldEncode, et on ferme le popup */            else {                grp_TField_encode.getDocument().removeDocumentListener(docListener);                grp_TField_encode.setText(getValue(listSelectorMask.getPosition()).toString());                grp_TField_encode.getDocument().addDocumentListener(docListener);                cleUnik = Integer.parseInt(getCleUnikValue(listSelectorMask.getPosition()).toString());            }            // fermeture du popup            showTable(false, 0);            validComponent();            fire();            try {                if (!grp_Comp_nextComponent.isEnabled()) {                    grp_Comp_nextComponent.setEnabled(true);                    grp_Comp_nextComponent.requestFocus();                }            } catch (NullPointerException e) {            }        }    };//----------------------------------------------------------------------------------------------------------------------------------------    /* Focus Listener pour le Textfield */    protected FocusListener focusListener = new FocusListener() {        public void focusGained(FocusEvent evt) {            /* System.out.println("ohohoh je passe focus gained !!!");           System.out.println("[FOCUS GAINED] needDataSeek" + needDataSeek );           if (needDataSeek) {               boolean opa = listSelectorMask.goToCleUnikPosition(cleUnik, grp_TField_encode.getText(), -1);               System.out.println("[FOCUS GAINED] opa = " + opa);               needDataSeek = false;           }            */        }        public void focusLost(FocusEvent evt) {            validComponent();        }    };//----------------------------------------------------------------------------------------------------------------------------------------    private void fire() {        fireListSelectorEvent(new ListSelectorEvent(this, ListSelectorEvent.ACTION_PERFORMED, "comand"));    }//----------------------------------------------------------------------------------------------------------------------------------------    /* Focus Listener pour les icônes du textField encode */    protected FocusListener iconFocusListener = new FocusListener() {        public void focusGained(FocusEvent evt) {            JLabel label = (evt.getSource().equals(grp_TField_encode)) ? grp_Label_warning : grp_Label_warningResearch;            if (grp_Comp_previousComponent == null || grp_Comp_previousComponent.isEnabled()) {                ((JTextField) evt.getSource()).selectAll();                if (correctInput) setStateIcon(label, workingIcon);                else setStateIcon(label, warningIcon);            }        }        public void focusLost(FocusEvent evt) {            JLabel label = (evt.getSource().equals(grp_TField_encode)) ? grp_Label_warning : grp_Label_warningResearch;            setStateIcon(label, null);        }    };//----------------------------------------------------------------------------------------------------------------------------------------    /* Focus Listener pour les autres composant -> pour les ramener sur le textfield */    protected FocusListener toTextFieldFocusListener = new FocusListener() {        public void focusGained(FocusEvent evt) {            /*System.out.println("[TO TEXT FIELD FOCUS LISTENER] transfert du focus au champs de Texte");transferFocus(grp_TField_encode);                        */        }        public void focusLost(FocusEvent evt) {        }    };//----------------------------------------------------------------------------------------------------------------------------------------    /* Action Listener pour le bouton */    protected ActionListener openListButtonActionListener = new ActionListener() {        public void actionPerformed(ActionEvent evt) {            if (listSelectorTableModel != null && evt.getSource().equals(grp_But_Button)) {                showTable(true, listSelectorMask.getPosition());            } else if (listSelectorTableModel != null && evt.getSource().equals(grp_But_ButtonResearch)) {                showTable(false, 0);            }        }    };//----------------------------------------------------------------------------------------------------------------------------------------    /* KeyListener pour les haut/bas => monter descendre dans la JTable */    protected KeyListener upAndDownArrowKeyListener = new KeyListener() {        public void keyPressed(KeyEvent evt) {            if (evt.getKeyCode() == ListSelector.UP_ARROW || evt.getKeyCode() == ListSelector.DOWN_ARROW || evt.getKeyCode() == ListSelector.HOME_KEY || evt.getKeyCode() == ListSelector.END_KEY || evt.getKeyCode() == ListSelector.PGUP_KEY || evt.getKeyCode() == ListSelector.PGDN_KEY) {                moveSelectionByArrow(evt.getKeyCode());            }        }        public void keyReleased(KeyEvent evt) {        }        public void keyTyped(KeyEvent evt) {        }    };//----------------------------------------------------------------------------------------------------------------------------------------    /* Gere la touche "bas" sur le textfield encode*/    protected KeyListener dropDownKeyListener = new KeyListener() {        public void keyPressed(KeyEvent evt) {            if (evt.getKeyCode() == ListSelector.DOWN_ARROW) if (listSelectorTableModel != null) {                showTable(true, listSelectorMask.getPosition());            }            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {                fireValidFieldListeners();            }        }        public void keyReleased(KeyEvent evt) {        }        public void keyTyped(KeyEvent evt) {        }    };//----------------------------------------------------------------------------------------------------------------------------------------    /* PopPupMenuListener -> prévu pour ajouter ou supprimer des actions avant l'ouverture et/ou* la fermeture du popupMenu */    protected PopupMenuListener popupMenuListener = new PopupMenuListener() {        /* appelé quand le menu est cancelé */        public void popupMenuCanceled(PopupMenuEvent evt) {        }        /* appelé avant que le menu devienne invisible */        public void popupMenuWillBecomeInvisible(PopupMenuEvent evt) {            /* il faut remover le keyListener des arrows up/down du textfield */            grp_TField_research.removeKeyListener(upAndDownArrowKeyListener);            grp_TField_encode.requestFocus();        }        /* appelé avant que le menu devienne visible */        public void popupMenuWillBecomeVisible(PopupMenuEvent evt) {            /* il faut ajouter le keyListener des arrows up/down au textfield */            grp_TField_research.addKeyListener(upAndDownArrowKeyListener);            grp_TField_research.requestFocus();        }    };//----------------------------------------------------------------------------------------------------------------------------------------    /* Document Listener -> prévu pour ouvrir le popup s'il ne l'est pas lors d'une insertion de charactère */    protected DocumentListener docListener = new DocumentListener() {        public void changedUpdate(DocumentEvent evt) {        }        public void insertUpdate(DocumentEvent evt) {            Logger.getDefaultLogger().log(Logger.LOG_DEBUG, "key typed :)))))))))))))");            //grp_TField_research.setText(grp_TField_encode.getText());            if (!grp_PopMenu_popup.isShowing()) {                showTable(true, listSelectorMask.getPosition());            }            needDataSeek = false;        }        public void removeUpdate(DocumentEvent evt) {            needDataSeek = false;            if (grp_PopMenu_popup.isShowing() && evt.getDocument().getLength() == 0)                grp_PopMenu_popup.setVisible(false);            else if (!grp_PopMenu_popup.isShowing()) showTable(true, listSelectorMask.getPosition());        }    };//----------------------------------------------------------------------------------------------------------------------------------------    /* Mouse Listener -> prévu pour pouvoir cliquer directement sur le champ de la table */    protected MouseListener tableMouseListener = new MouseListener() {        public void mouseClicked(MouseEvent evt) {            listSelectorMask.setPosition(grp_Table_table.getSelectedRow());            if (evt.getClickCount() >= 2) {                textFieldResearchActionListener.actionPerformed(new ActionEvent(grp_TField_research, ActionEvent.ACTION_PERFORMED, "MouseClickClick"));            }        }        public void mouseEntered(MouseEvent evt) {        }        public void mouseExited(MouseEvent evt) {        }        public void mousePressed(MouseEvent evt) {        }        public void mouseReleased(MouseEvent e) {        }    };//----------------------------------------------------------------------------------------------------------------------------------------    /* mouse Listener -> prevu pour prendre le focus lorsqu'on appuye sur le bouton */    protected MouseListener buttonMouseListener = new MouseListener() {        public void mouseClicked(MouseEvent evt) {            if (listSelectorTableModel != null) {                showTable(true, listSelectorMask.getPosition());            }        }        public void mouseEntered(MouseEvent evt) {        }        public void mouseExited(MouseEvent evt) {        }        public void mousePressed(MouseEvent evt) {            grp_TField_encode.requestFocus();        }        public void mouseReleased(MouseEvent e) {        }    };////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE AU BEANS////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    private void setStateIcon(JLabel label, Icon icone) {        label.setIcon(icone);    }    public void changeSelection(int line) {        System.out.println("Ligne choisie : " + line);        if (line >= 0) grp_Table_table.changeSelection(line, 0, false, false);    }    private void validComponent() {        if ((popupThread != null) && (popupThread.willValidateComponent()))            /*Le popup validera en temps voulu*/ return;        System.out.println("---------------------validating----------------");        grp_TField_encode.getDocument().removeDocumentListener(docListener);        if (!requiredInput && grp_TField_research.getText().equals("")) {            cleUnik = -1;        } else {            //if (needDataSeek) {            //  listSelectorMask.goToCleUnikPosition(cleUnik, grp_TField_encode.getText(), -1);            //}            if (cleUnik == 0) {                grp_TField_encode.setText("");            } else {                grp_TField_encode.setText(getValue(listSelectorMask.getPosition()).toString());                cleUnik = Integer.parseInt(getCleUnikValue(listSelectorMask.getPosition()).toString());                if (nextFieldToFill != null) {                    nextFieldToFill.setText(getValue(listSelectorMask.getPosition(), columnNumberForNextFieldToField - 1).toString());                }            }        }        fireStateChanged();        grp_TField_encode.getDocument().addDocumentListener(docListener);    }    private synchronized void showTable(boolean show, int rowSelection) {        if ((show) && (!showinprogress) && this.isEnabled()) {            System.out.println("---------------------Showing table");            //Thread.dumpStack();            showinprogress = true;            popupThread = new ListSelector.PopupShowThread(this, rowSelection);            popupThread.start();            // chargement des données            /*listSelectorTableModel.resetData();           grp_Table_table.setModel(this.listSelectorTableModel);           if (needDataSeek)           {               listSelectorMask.goToCleUnikPosition(cleUnik,grp_TField_encode.getText(),-1);               needDataSeek=false;           }           // position de la sélection dans la table           if (rowSelection != -1 && listSelectorTableModel.getRowCount() >= (rowSelection - 1)) changeSelection(rowSelection);           else if (listSelectorTableModel.getRowCount() > 0) changeSelection(0);           // update du champ du TextFieldResearch           //grp_TField_research.setText(getValue(listSelectorMask.getPosition()).toString());           // ouverture du popup           grp_PopMenu_popup.show(this, grp_TField_encode.getX(), grp_TField_encode.getY());           transferFocus(grp_TField_research);            */        } else if (!show) {            //System.out.println("---------------------Hiding table");            //Thread.dumpStack();            if ((popupThread != null) && (popupThread.isAlive())) {                synchronized (popupThread) {                    System.out.println("------------------------------ASKING for don't show");                    if (popupThread.dontShow()) return;                }            }            System.out.println("------------------------------ASKING for don't show: failed or not performed");            needDataSeek = true;            grp_PopMenu_popup.setVisible(false);            grp_TField_encode.requestFocus();        }    }    private void setTextMsg(String txt) {        grp_Label_warning.setToolTipText(txt);    }    private void confirmCorrectInput(boolean correct) {        boolean oldValue = correctInput;        boolean newValue = correct;        correctInput = correct;        // m_supporter.firePropertyChange(BEANS_PROPERTY_CORRECT_INPUT, oldValue, newValue);    }    private void adaptBackgroundColor(boolean enabled) {        Color background = enabled ? Color.white : Color.lightGray;        grp_TField_encode.setBackground(background);    }    protected void fireStateChanged() {        Object[] listeners = m_listenerList.getListenerList();        for (int i = 0; i < listeners.length; i++) {            // System.out.println("[FIRESTATECHANGED] listeners : " + listeners[i].getClass());            if (ActionListener.class.isAssignableFrom(listeners[i].getClass())) {                System.out.println("[FIRESTATECHANGED] passé");                if (m_actionEvent == null) {                    m_actionEvent = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "validate");                }                ((ActionListener) listeners[i]).actionPerformed(m_actionEvent);            }        }    }    protected void fireValidFieldListeners() {        Object[] listeners = m_validateList.getListenerList();        for (int i = 0; i < listeners.length; i++) {            System.out.println("[fireValidFieldListeners] listeners : " + listeners[i].getClass());            if (ValidateField.class.isAssignableFrom(listeners[i].getClass())) {                if (m_actionEvent == null) {                    m_actionEvent = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "validate");                }                ((ValidateField) listeners[i]).actionPerformed(m_actionEvent);            }        }    }    protected void moveSelectionByArrow(int arrow) {        int currentSelection = grp_Table_table.getSelectedRow();        int totalRow = listSelectorTableModel.getRowCount();        int candidate = 0;        switch (arrow) {            case ListSelector.DOWN_ARROW:                candidate = currentSelection + 1;                break;            case ListSelector.UP_ARROW:                candidate = currentSelection - 1;                break;            case ListSelector.PGUP_KEY:                candidate = currentSelection - 10;                break;            case ListSelector.PGDN_KEY:                candidate = currentSelection + 10;                break;            case ListSelector.HOME_KEY:                candidate = 0;                break;            case ListSelector.END_KEY:                candidate = totalRow - 1;                break;            default:                java.awt.Toolkit.getDefaultToolkit().beep();                break;        }        candidate = candidate < 0 ? 0 : candidate >= totalRow ? totalRow - 1 : candidate;        if (candidate != currentSelection) {            grp_Table_table.changeSelection(candidate, 0, false, false);            listSelectorMask.setPosition(candidate);        }        /*if (arrow == ListSelector.DOWN_ARROW && currentSelection < (totalRow - 1)) {            grp_Table_table.changeSelection(currentSelection + 1, 0, false, false);            listSelectorMask.setPosition(currentSelection + 1);        }        else if (arrow == ListSelector.UP_ARROW && currentSelection > 0) {            grp_Table_table.changeSelection(currentSelection -1, 0, false, false);            listSelectorMask.setPosition(currentSelection - 1);        }*/    }    public Object getValue(int row) {        Object value = null;        try {            value = listSelectorTableModel.getValueAt(row, 0);        } catch (Exception e) {        }        return value;    }    public Object getValue(int row, int col) {        Object value = null;        try {            value = listSelectorTableModel.getValueAt(row, col);        } catch (Exception e) {        }        return value;    }    private Object getCleUnikValue(int row) {        return listSelectorTableModel.getValueAt(row, -1);    }    private boolean isComponentsManagingFocus() {        JComponent[] comp = new JComponent[]{grp_TField_encode, grp_Label_warning, grp_Table_table, grp_PopMenu_popup, grp_ScrollPan_popupScrollPane};        for (int i = 0; i < comp.length; i++) {        }        return false;    }    public void closePopup() {        showTable(false, 0);    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE A L' AFFICHAGE DES DONNEES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => Beans Properties////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /* propriété : le composant précédent à prendre le focus */    protected JComponent grp_Comp_nextComponent;    /* propriété : le prochain composant à prendre le focus */    protected JComponent grp_Comp_previousComponent;    /* propriétés : icône de warning */    protected Icon warningIcon;    /* propriétés : icône d'état */    protected Icon workingIcon;    /* propriété : mis à true => le composant doit lancer la fct verifAllFields() de son parent (parentComp) */    protected boolean lastFocusedComponent;    /* propriété : mis à true => les données sont considérée comme valides */    protected boolean correctInput = true;    /* propriété : type de valeur sur laquelle on pourra placer un objet Document dans le textfield */    protected int typeTextValue;    /* propriété : locale du user courant */    protected Locale locale;    /* propriété : tableModel */    protected AbstractListSelectorTableModel listSelectorTableModel;    /* propriété : requiredInput */    protected boolean requiredInput;    /* propriété : n° de colonne pour remplir le "nextFieldToFill" */    protected int columnNumberForNextFieldToField;    /* propriéte : NextFieldToField -> champ suivant à remplir d'une donnée */    protected AstraComponent nextFieldToFill;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => Champs de la classe////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    protected EventListenerList m_listenerList;    protected EventListenerList m_validateList;    protected ActionEvent m_actionEvent;    protected ListSelectorMask listSelectorMask;    protected int currentColumn = 1;    protected SwingPropertyChangeSupport m_supporter;    protected int cleUnik = 0;    protected boolean needDataSeek = false;    protected boolean showinprogress = false;    protected class PopupShowThread extends Thread {        JComponent main;        int rowSelection;        boolean needShow = true;        boolean atWork = true;        boolean needValidation = false;        public PopupShowThread(JComponent main, int rowSelection) {            this.main = main;            this.rowSelection = rowSelection;        }        public void run() {            listSelectorTableModel.resetData();            grp_Table_table.setModel(listSelectorTableModel);            if (needDataSeek) {                listSelectorMask.goToCleUnikPosition(cleUnik, grp_TField_encode.getText(), -1);            }            // position de la sélection dans la table            if (rowSelection != -1 && listSelectorTableModel.getRowCount() >= (rowSelection - 1))                changeSelection(rowSelection);            else if (listSelectorTableModel.getRowCount() > 0) changeSelection(0);            synchronized (this) {                atWork = false;                if ((!needDataSeek) || (needValidation)) {                    Logger.getDefaultLogger().log(Logger.LOG_DEBUG, "research field is " + grp_TField_research.getText());                    Logger.getDefaultLogger().log(Logger.LOG_DEBUG, "encode field is " + grp_TField_encode.getText());                    if (!grp_TField_research.getText().equals(grp_TField_encode.getText()))                        grp_TField_research.setText(grp_TField_encode.getText());                    if (needValidation) {                        validComponent();                    }                }                if (needShow) {                    grp_PopMenu_popup.show(main, grp_TField_encode.getX() - grp_PopMenu_popup.getBorder().getBorderInsets(grp_PopMenu_popup).left, grp_TField_encode.getY() - grp_PopMenu_popup.getBorder().getBorderInsets(grp_PopMenu_popup).top);                    grp_TField_research.requestFocus();                    grp_TField_research.setCaretPosition(grp_TField_research.getText().length());                    needDataSeek = false;                    showinprogress = false;                    grp_PopMenu_popup.repaint();                    return;                } else {                    needDataSeek = false;                    showinprogress = false;                    grp_PopMenu_popup.repaint();                    return;                }            }        }        public synchronized boolean dontShow() {            if (!atWork) return false;            needShow = false;            return true;        }        public synchronized boolean stillLoading() {            return atWork;        }        public synchronized boolean willValidateComponent() {            if (!atWork) return false;            Logger.getDefaultLogger().log(Logger.LOG_DEBUG, "Deferring validate for later <-----------<-------------");            needValidation = true;            needShow = false;            return true;        }    }    protected PopupShowThread popupThread = null;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// STATIC VARIABLES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public static final int UP_ARROW = KeyEvent.VK_UP;    public static final int DOWN_ARROW = KeyEvent.VK_DOWN;    public static final int PGUP_KEY = KeyEvent.VK_PAGE_UP;    public static final int PGDN_KEY = KeyEvent.VK_PAGE_DOWN;    public static final int HOME_KEY = KeyEvent.VK_HOME;    public static final int END_KEY = KeyEvent.VK_END;    public static final String PROPERTY_TABLEMODEL = "TableModel";////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => Graphic Component////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    protected JTextField grp_TField_encode;    protected JTextField grp_TField_research;    protected BasicArrowButton grp_But_Button;    private BasicArrowButton grp_But_ButtonResearch;    protected JLabel grp_Label_warning;    private JLabel grp_Label_warningResearch;    protected JPopupMenu grp_PopMenu_popup;    protected JScrollPane grp_ScrollPan_popupScrollPane;    protected JTable grp_Table_table;    protected JPanel grp_Pan_research;    private JComponent grp_additional = null;    private JPanel grp_Pan_researchBean;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// BEANS PROPERTIES GET/SET SUPPORT////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public boolean getverif() {        return correctInput;    }    public boolean isLastFocusedComponent() {        return lastFocusedComponent;    }    public void setLastFocusedComponent(boolean lastFocusedComponent) {        this.lastFocusedComponent = lastFocusedComponent;    }    public void setText(String text) {        grp_TField_encode.getDocument().removeDocumentListener(docListener);        grp_TField_encode.setText(text);        grp_TField_encode.getDocument().addDocumentListener(docListener);    }    /**     * Getter for property grp_Comp_previousComponent.     *     * @return Value of property grp_Comp_previousComponent.     */    public JComponent getGrp_Comp_previousComponent() {        return grp_Comp_previousComponent;    }    /**     * Setter for property grp_Comp_previousComponent.     *     * @param grp_Comp_previousComponent New value of property grp_Comp_previousComponent.     */    public void setGrp_Comp_previousComponent(JComponent grp_Comp_previousComponent) {        this.grp_Comp_previousComponent = grp_Comp_previousComponent;    }    /**     * Getter for property grp_Comp_nextComponent.     *     * @return Value of property grp_Comp_nextComponent.     */    public JComponent getGrp_Comp_nextComponent() {        return grp_Comp_nextComponent;    }    /**     * Setter for property grp_Comp_nextComponent.     *     * @param grp_Comp_nextComponent New value of property grp_Comp_nextComponent.     */    public void setGrp_Comp_nextComponent(JComponent grp_Comp_nextComponent) {        this.grp_Comp_nextComponent = grp_Comp_nextComponent;    }    /**     * Getter for property warningIcon.     *     * @return Value of property warningIcon.     */    public Icon getWarningIcon() {        return warningIcon;    }    /**     * Setter for property warningIcon.     *     * @param warningIcon New value of property warningIcon.     */    public void setWarningIcon(Icon warningIcon) {        this.warningIcon = warningIcon;    }    /**     * Getter for property workingIcon.     *     * @return Value of property workingIcon.     */    public Icon getWorkingIcon() {        return workingIcon;    }    /**     * Setter for property workingIcon.     *     * @param workingIcon New value of property workingIcon.     */    public void setWorkingIcon(Icon workingIcon) {        this.workingIcon = workingIcon;    }    /**     * Getter for property correctInput.     *     * @return Value of property correctInput.     */    public boolean getCorrectInput() {        return correctInput;    }    /**     * Setter for property correctInput.     *     * @param correctInput New value of property correctInput.     */    public void setCorrectInput(boolean correctInput) {        this.correctInput = correctInput;    }    /**     * Getter for property typeTextValue.     *     * @return Value of property typeTextValue.     */    public int getTypeTextValue() {        return typeTextValue;    }    public String getText() {        return this.grp_TField_encode.getText();    }    /**     * Setter for property typeTextValue.     *     * @param typeTextValue New value of property typeTextValue.     */    public void setTypeTextValue(int typeTextValue) {        this.typeTextValue = typeTextValue;        listSelectorMask = new ListSelectorMask(this.typeTextValue, locale, this);        grp_TField_research.setDocument(listSelectorMask);    }    /**     * Getter for property locale.     *     * @return Value of property locale.     */    public Locale getLocale() {        return locale;    }    /**     * Setter for property locale.     *     * @param locale New value of property locale.     */    public void setLocale(Locale locale) {        this.locale = locale;    }    public void setEnabled(boolean enabled) {        if (enabled && !this.isEnabled()) {            grp_But_Button.addMouseListener(buttonMouseListener);        } else if (!enabled && this.isEnabled()) {            grp_But_Button.removeMouseListener(buttonMouseListener);        }        super.setEnabled(enabled);        grp_TField_encode.setEnabled(enabled);        grp_But_Button.setEnabled(enabled);        grp_Label_warning.setEnabled(enabled);        // grp_TField_encode.setFocusable(enabled);        //grp_But_Button.setFocusable(enabled);        //grp_Label_warning.setFocusable(enabled);        // -> couleur du fond        adaptBackgroundColor(enabled);    }    /**     * Getter for property listSelectorTableModel.     *     * @return Value of property listSelectorTableModel.     */    public srcastra.astra.gui.components.combobox.listSelector.AbstractListSelectorTableModel getListSelectorTableModel() {        return listSelectorTableModel;    }    /**     * Setter for property listSelectorTableModel.     *     * @param listSelectorTableModel New value of property listSelectorTableModel.     */    public void setListSelectorTableModel(srcastra.astra.gui.components.combobox.listSelector.AbstractListSelectorTableModel listSelectorTableModel) {        this.listSelectorTableModel = listSelectorTableModel;        //grp_Table_table.setModel(this.listSelectorTableModel);        // suppression de la colonne des ids        /*if (listSelectorTableModel.getRowCount() > 0) {            TableColumn x = grp_Table_table.getColumnModel().getColumn(0);            grp_Table_table.getColumnModel().removeColumn(x);            System.out.println("j'ai remover la colonne");        }*/    }    /**     * add ActionListeners     */    public void addActionListener(ActionListener listener) {        m_listenerList.add(ActionListener.class, listener);    }    /**     * Remove ActionListeners     */    public void removeActionListener(ActionListener listener) {        m_listenerList.remove(ActionListener.class, listener);    }    public int getCurrentColumn() {        return this.currentColumn;    }    /**     * Getter for property cleUnik.     *     * @return Value of property cleUnik.     */    public int getCleUnik() {        return cleUnik;    }    /**     * Setter for property cleUnik.     *     * @param cleUnik New value of property cleUnik.     */    public void setCleUnik(int cleUnik) {        this.cleUnik = cleUnik;        if (cleUnik >= 0) needDataSeek = false;        listSelectorMask.goToCleUnikPosition(this.cleUnik, this.grp_TField_encode.getText(), 0);    }    /**     * Getter for property requiredInput.     *     * @return Value of property requiredInput.     */    public boolean isRequiredInput() {        return requiredInput;    }    /**     * Setter for property requiredInput.     *     * @param requiredInput New value of property requiredInput.     */    public void setRequiredInput(boolean requiredInput) {        this.requiredInput = requiredInput;    }    public void setPreferredSize(Dimension dim) {        super.setPreferredSize(dim);        int width = dim.width;        int height = dim.height;        grp_TField_encode.setPreferredSize(new Dimension(width - (2 * height), height));        grp_But_Button.setPreferredSize(new Dimension(height, height));        grp_Label_warning.setPreferredSize(new Dimension(height, height));    }    public void setMinimumSize(Dimension dim) {        super.setMinimumSize(dim);        int width = dim.width;        int height = dim.height;        grp_TField_encode.setMinimumSize(new Dimension(width - (2 * height), height));        grp_But_Button.setMinimumSize(new Dimension(height, height));        grp_Label_warning.setMinimumSize(new Dimension(height, height));    }    public void setMaximumSize(Dimension dim) {        super.setMaximumSize(dim);        int width = dim.width;        int height = dim.height;        grp_TField_encode.setMaximumSize(new Dimension(width - (2 * height), height));        grp_But_Button.setMaximumSize(new Dimension(height, height));        grp_Label_warning.setMaximumSize(new Dimension(height, height));    }    public void requestFocus() {        grp_TField_encode.requestFocus();    }    /**     * Getter for property columnNumberForNextFieldToField.     *     * @return Value of property columnNumberForNextFieldToField.     */    public int getColumnNumberForNextFieldToField() {        return columnNumberForNextFieldToField;    }    /**     * Setter for property columnNumberForNextFieldToField.     *     * @param columnNumberForNextFieldToField     *         New value of property columnNumberForNextFieldToField.     */    public void setColumnNumberForNextFieldToField(int columnNumberForNextFieldToField) {        this.columnNumberForNextFieldToField = columnNumberForNextFieldToField;    }    /**     * Getter for property nextFieldToFill.     *     * @return Value of property nextFieldToFill.     */    public srcastra.astra.gui.components.AstraComponent getNextFieldToFill() {        return nextFieldToFill;    }    /**     * Setter for property nextFieldToFill.     *     * @param nextFieldToFill New value of property nextFieldToFill.     */    public void setNextFieldToFill(srcastra.astra.gui.components.AstraComponent nextFieldToFill) {        this.nextFieldToFill = nextFieldToFill;    }    public void addListSelectorListener(ListSelectorListener listener) {        m_listenerList.add(ListSelectorListener.class, listener);    }    public void removeListSelectorListener(ListSelectorListener listener) {        m_listenerList.remove(ListSelectorListener.class, listener);    }    public boolean fireListSelectorEvent(ListSelectorEvent evt) {        Object[] listener = m_listenerList.getListenerList();        boolean sw = false;        for (int i = 0; i < listener.length; i++) {            sw = true;            if (ListSelectorListener.class.isAssignableFrom(listener[i].getClass())) {                ((ListSelectorListener) listener[i]).focusLost(evt);            }        }        return sw;    }    public void addValidateFieldListener(ValidateField listener) {        m_validateList.add(ValidateField.class, listener);    }    public void removeValidateFieldListener(ValidateField listener) {        m_validateList.remove(ValidateField.class, listener);    }    public void clearIcon() {        grp_Label_warning.setIcon(null);    }    public String getText2() {        return "";    }}