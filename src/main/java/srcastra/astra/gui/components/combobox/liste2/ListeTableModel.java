/* * TransportTableModel.java * * Created on 20 novembre 2002, 14:22 */package srcastra.astra.gui.components.combobox.liste2;import srcastra.astra.sys.rmi.astrainterface;import srcastra.astra.sys.classetransfert.Loginusers_T;import java.util.ArrayList;import srcastra.astra.Astra;import java.rmi.RemoteException;import srcastra.astra.gui.sys.ErreurScreenLibrary;import srcastra.astra.gui.sys.formVerification.ListSelectorMask;import srcastra.astra.gui.sys.tableModel.AbstractAstraTableModel;import srcastra.astra.gui.sys.ErreurScreenLibrary;import srcastra.astra.gui.test.*;import srcastra.astra.sys.rmi.astrainterface;import srcastra.astra.sys.classetransfert.clients.Clients_T;import srcastra.astra.sys.classetransfert.Loginusers_T;import java.util.ArrayList;import srcastra.astra.Astra;import java.rmi.RemoteException;import srcastra.astra.gui.sys.ErreurScreenLibrary;import srcastra.astra.gui.sys.formVerification.ListSelectorMask;import srcastra.astra.sys.Logger;import srcastra.astra.sys.rmi.Exception.ServeurSqlFailure;import srcastra.astra.sys.manipuleclient.ClientConstante;import srcastra.astra.gui.sys.tableModel.AbstractAstraTableModel;import srcastra.astra.gui.sys.ErreurScreenLibrary;import srcastra.astra.sys.classetransfert.dossier.ProduitAffichage;import javax.swing.*;import java.util.*;import java.awt.Component;import javax.swing.table.AbstractTableModel;import srcastra.astra.gui.sys.comparator.ListeSelectorComparaTor2;/** * @author Thomas */public class ListeTableModel extends AbstractTableModel implements ListeModelInterface, Comparator {    /**     * Creates a new instance of TransportTableModel     */    public ListeTableModel(astrainterface serveur, Loginusers_T login) {        m_serveur = serveur;        m_login = login;        //loadata();    }    public ArrayList loadata(String name) {        return null;    }    public int getColumnCount() {        return m_columns.length;    }    public ArrayList loadata() {        if (m_vector == null) {            m_vector = new ArrayList();            try {                System.out.println("CHARGEMENT de la liste");                m_vector = m_serveur.renvSignalitiques(m_login.getUrlmcleunik(), m_login.getUrcleunik(), 1, astrainterface.COMBO_TRANSPORT);                if (m_vector == null || m_vector.size() == 0)                    System.out.println("ARRAY vide ou null");            }            catch (RemoteException e) {                ErreurScreenLibrary.displayErreur(null, ErreurScreenLibrary.REMOTE_EXCEPTION, Astra.DEBUG, e, m_login);            }            catch (Exception e) {                ErreurScreenLibrary.displayErreur(null, ErreurScreenLibrary.EXCEPTION, Astra.DEBUG, e, m_login);            }        }        return m_vector;    }    public int getRowCount() {        return m_vector == null ? 0 : m_vector.size();    }    public Object getValueAt(int param, int param1) {        if (m_vector == null) return "";        if (param < 0 || param1 > getColumnCount())            return "";        Object[] row = (Object[]) m_vector.get(param);        int size = row.length - 1;        switch (param1)        {            case 0:                return new RowColorListe(row[1], ((Integer) row[size]).intValue());            case 1:                return new RowColorListe(row[2], ((Integer) row[size]).intValue());        }        return "";    }    /**     * Getter for property m_column.     *     * @return Value of property m_column.     */    public srcastra.astra.gui.test.ColumnData[] getM_column() {        return this.m_columns;    }    /**     * Setter for property m_column.     *     * @param m_column New value of property m_column.     */    public void setM_column(srcastra.astra.gui.test.ColumnData[] m_column) {        this.m_columns = m_column;    }    /**     * Getter for property seveur.     *     * @return Value of property seveur.     */    public int getCleUnik(int row) {        return 0;    }    public srcastra.astra.sys.rmi.astrainterface getServeur() {        return m_serveur;    }    public Object[] getSelectedObject(int row) {        return null;    }    /**     * Setter for property seveur.     *     * @param seveur New value of property seveur.     */    public void setServeur(srcastra.astra.sys.rmi.astrainterface seveur) {        this.m_serveur = seveur;    }    /**     * Getter for property login.     *     * @return Value of property login.     */    public srcastra.astra.sys.classetransfert.Loginusers_T getLogin() {        return m_login;    }    /**     * Setter for property login.     *     * @param login New value of property login.     */    public void setLogin(srcastra.astra.sys.classetransfert.Loginusers_T login) {        this.m_login = login;    }    public int compare(Object obj, Object obj1) {        System.out.println("[COMPARE] column = " + m_sortCol);        Object[] tmpObj1 = (Object[]) obj;        Object[] tempObj2 = (Object[]) obj1;        Object comp1 = tempObj2[1];        int compare;        String cp1 = null;        String cp2 = null;        int entier1;        int entier2;        int comparaison = 0;        switch (m_sortCol)        {            case 0:                entier1 = ((Integer) tmpObj1[0]).intValue();                entier2 = ((Integer) comp1).intValue();                if (entier1 < entier2) comparaison = -1;                else if (entier1 > entier2) comparaison = 1;                else if (entier1 == entier2) comparaison = 0;                break;            case 1:                cp1 = tmpObj1[1].toString();                cp2 = comp1.toString();                comparaison = (cp1.toUpperCase()).compareTo(cp2.toUpperCase());                break;        }        //  System.out.println("[COMPARE] Objet comparé 1 = " + cp1 + " Objet comparé 2 = " + cp2 + " Nbre de comparaison retourné = " + comparaison);        return comparaison;    }    public int searchAWord(Object word, int column) {        int position = -1;        m_sortCol = column;        Object[] array;        Object[] array2 = new Object[getColumnCount() + 1];        for (int i = 0; i < array2.length; i++) {            array2[i] = word;        }        if (column == 0) {            loadata();            m_vector_by_key = (ArrayList) m_vector.clone();            Collections.sort(m_vector_by_key, new ListeSelectorComparaTor2(0, true));            array = m_vector_by_key.toArray();            //   for(int i=0;i<array.length;i++){            //  Object[] tmp=(Object[])array[i];            //System.out.println("pays "+" "+i+" "+tmp[0]+" "+tmp[1]);            // }            position = Arrays.binarySearch(array, array2, this);            //m_vector=tmpArray;        } else {            loadata();            array = m_vector.toArray();            position = Arrays.binarySearch(array, array2, this);        }        // position = Arrays.binarySearch(array, array2, this);        // position = Arrays.binarySearch(array, word);        // System.out.println("[SEARCH A WORD] position after binarySearch : " + position);        if (position < 0) return (position + 1) * -1;        return position;    }    /**     * Getter for property m_vector.     *     * @return Value of property m_vector.     */    public java.util.ArrayList getM_vector() {        return m_vector;    }    /**     * Setter for property m_vector.     *     * @param m_vector New value of property m_vector.     */    public void setM_vector(java.util.ArrayList m_vector) {        this.m_vector = m_vector;    }    public String getColumnName(int column)    {        return m_columns[column].c_title;    }    /**     * Getter for property m_vector_by_key.     *     * @return Value of property m_vector_by_key.     */    public java.util.ArrayList getM_vector_by_key() {        return m_vector_by_key;    }    /**     * Setter for property m_vector_by_key.     *     * @param m_vector_by_key New value of property m_vector_by_key.     */    public void setM_vector_by_key(java.util.ArrayList m_vector_by_key) {        this.m_vector_by_key = m_vector_by_key;    }    public void resetData() {    }    public ColumnData[] m_columns = new ColumnData[]{            new ColumnData("Abréviation", 20, JLabel.LEFT),            new ColumnData("Intitule", 20, JLabel.LEFT)};    protected ArrayList m_vector;    protected ArrayList m_vector_by_key;    protected astrainterface m_serveur;    protected Loginusers_T m_login;    protected int m_sortCol;}