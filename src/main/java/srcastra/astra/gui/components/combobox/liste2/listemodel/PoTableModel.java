/* * TransportTableModel.java * * Created on 20 novembre 2002, 14:22 */package srcastra.astra.gui.components.combobox.liste2.listemodel;import srcastra.astra.sys.rmi.astrainterface;import srcastra.astra.sys.classetransfert.Loginusers_T;import java.util.ArrayList;import srcastra.astra.Astra;import java.rmi.RemoteException;import srcastra.astra.gui.sys.ErreurScreenLibrary;import srcastra.astra.gui.sys.formVerification.ListSelectorMask;import srcastra.astra.gui.sys.tableModel.AbstractAstraTableModel;import srcastra.astra.gui.sys.ErreurScreenLibrary;import srcastra.astra.gui.test.*;import srcastra.astra.sys.rmi.astrainterface;import srcastra.astra.sys.classetransfert.clients.Clients_T;import srcastra.astra.sys.classetransfert.Loginusers_T;import java.util.ArrayList;import srcastra.astra.Astra;import java.rmi.RemoteException;import srcastra.astra.gui.sys.ErreurScreenLibrary;import srcastra.astra.gui.sys.formVerification.ListSelectorMask;import srcastra.astra.sys.Logger;import srcastra.astra.sys.rmi.Exception.ServeurSqlFailure;import srcastra.astra.sys.manipuleclient.ClientConstante;import srcastra.astra.gui.sys.tableModel.AbstractAstraTableModel;import srcastra.astra.gui.sys.ErreurScreenLibrary;import srcastra.astra.sys.classetransfert.dossier.ProduitAffichage;import javax.swing.*;import java.util.*;import java.awt.Component;import javax.swing.table.AbstractTableModel;import srcastra.astra.gui.sys.comparator.ListeSelectorComparaTor2;/** * @author Thomas */public class PoTableModel extends srcastra.astra.gui.components.combobox.liste2.listemodel.SousClientListeTableModel implements srcastra.astra.gui.components.combobox.liste2.ListeModelInterface, srcastra.astra.sys.manipuleclient.ClientConstante {    /**     * Creates a new instance of TransportTableModel     */    String champ;    public PoTableModel(astrainterface serveur, Loginusers_T login) {        super(serveur, login);        //loadata();    }    public ArrayList loadata(String name) {        try {            m_vector = m_serveur.renvDossierRmiObject(m_login.getUrcleunik()).getPoListe(m_login.getUrcleunik(), name);        }        catch (RemoteException e) {            ErreurScreenLibrary.displayErreur(null, ErreurScreenLibrary.REMOTE_EXCEPTION, Astra.DEBUG, e, m_login);        }        catch (Exception e) {            ErreurScreenLibrary.displayErreur(null, ErreurScreenLibrary.EXCEPTION, Astra.DEBUG, e, m_login);        }        return m_vector;    }    public int searchAWord(Object word, int column) {        int position = -1;        m_sortCol = column;        Object[] array;        Object[] array2 = new Object[getColumnCount() + 1];        for (int i = 0; i < array2.length; i++) {            array2[i] = word;        }        if (column == 0) {            //loadata();            m_vector_by_key = (ArrayList) m_vector.clone();            Collections.sort(m_vector_by_key, new ListeSelectorComparaTor2(1, true));            array = m_vector_by_key.toArray();            position = Arrays.binarySearch(array, array2, this);        } else {            array = m_vector.toArray();            position = Arrays.binarySearch(array, array2, this);        }        if (position < 0) return (position + 1) * -1;        return position;    }    /**     * Getter for property m_column.     *     * @return Value of property m_column.     */    public srcastra.astra.gui.test.ColumnData[] getM_column() {        return this.m_columns;    }/*    public Object[] getSelectedObject(int row){        return (Object[])m_vector.get(row);             }        public void setM_column(srcastra.astra.gui.test.ColumnData[] m_column) {        this.m_columns = m_column;    }*/    public int compare(Object obj, Object obj1) {        System.out.println("[COMPARE] column = " + m_sortCol);        Object[] tmpObj1 = (Object[]) obj;        Object[] tempObj2 = (Object[]) obj1;        Object comp1 = tempObj2[0];        int compare;        String cp1 = null;        String cp2 = null;        int entier1;        int entier2;        int comparaison = 0;        switch (m_sortCol)        {            case 0:                if (tmpObj1[0] instanceof Integer) {                    entier1 = ((Integer) tmpObj1[0]).intValue();                    entier2 = ((Integer) comp1).intValue();                    if (entier1 < entier2) comparaison = -1;                    else if (entier1 > entier2) comparaison = 1;                    else if (entier1 == entier2) comparaison = 0;                } else if (tmpObj1[0] instanceof Long) {                    long long1 = ((Long) tmpObj1[0]).longValue();                    long long2 = ((Integer) comp1).longValue();                    if (long1 < long2) comparaison = -1;                    else if (long1 > long2) comparaison = 1;                    else if (long1 == long2) comparaison = 0;                }                break;            case 1:                cp1 = tmpObj1[1].toString();                cp2 = comp1.toString();                comparaison = (cp1.toUpperCase()).compareTo(cp2.toUpperCase());                break;            case 2:                cp1 = tmpObj1[1].toString();                cp2 = comp1.toString();                comparaison = (cp1.toUpperCase()).compareTo(cp2.toUpperCase());                break;        }        //  System.out.println("[COMPARE] Objet comparé 1 = " + cp1 + " Objet comparé 2 = " + cp2 + " Nbre de comparaison retourné = " + comparaison);        return comparaison;    }    public Object getValueAt(int param, int param1) {        if (m_vector == null) return "";        if (param < 0 || param1 > getColumnCount())            return "";        Object[] row = (Object[]) m_vector.get(param);        int size = row.length - 1;        switch (param1) {            case 0:                return new srcastra.astra.gui.components.combobox.liste2.RowColorListe(row[1], 1);            case 1:                return new srcastra.astra.gui.components.combobox.liste2.RowColorListe(row[2], 1);            case 2:                return new srcastra.astra.gui.components.combobox.liste2.RowColorListe(row[3], 1);            case 3:                return new srcastra.astra.gui.components.combobox.liste2.RowColorListe(row[4], 1);        }        return "";    }    public int getTypeProd(int row, int col) {        Object[] tmp = (Object[]) m_vector.get(row);        return ((Integer) tmp[col]).intValue();    }    /*  public int searchAWord(Object word, int column) {            int position = -1;            m_sortCol = column;            Object[] array;            Object[] array2 = new Object[getColumnCount()+1];            for (int i=0; i < array2.length; i++) {              array2[i] = word;            }            if(column==0){               //loadata();               m_vector_by_key=(ArrayList)m_vector.clone();               Collections.sort(m_vector_by_key,new ListeSelectorComparaTor2(0,true));               array=m_vector_by_key.toArray();            //   for(int i=0;i<array.length;i++){             //  Object[] tmp=(Object[])array[i];               //System.out.println("pays "+" "+i+" "+tmp[0]+" "+tmp[1]);              // }               position = Arrays.binarySearch(array, array2,this);               //m_vector=tmpArray;            }            else{                 //loadata();                 array=m_vector.toArray();                 position = Arrays.binarySearch(array, array2,this);            }           // position = Arrays.binarySearch(array, array2, this);           // position = Arrays.binarySearch(array, word);           // System.out.println("[SEARCH A WORD] position after binarySearch : " + position);            if (position < 0) return (position +1) * -1;            return position;        }         public int compare(Object obj, Object obj1) {            System.out.println("[COMPARE] column = " + m_sortCol);            Object[] tmpObj1 =(Object[]) obj;            Object[] tempObj2 = (Object[]) obj1;            Object comp1=tempObj2[1];            int compare;            String cp1=null;            String cp2=null;            int entier1;            int entier2;            int comparaison =0;            switch(m_sortCol)            {                case 0:                    entier1=((Integer)tmpObj1[0]).intValue();                    entier2=((Integer)comp1).intValue();                    if(entier1<entier2) comparaison=-1;                    else if(entier1>entier2) comparaison=1;                    else if(entier1==entier2) comparaison=0;                    break;                case 1:                    cp1=tmpObj1[6].toString();                    cp2=comp1.toString();                    comparaison = (cp1.toUpperCase()).compareTo(cp2.toUpperCase());                    break;            }          //  System.out.println("[COMPARE] Objet comparé 1 = " + cp1 + " Objet comparé 2 = " + cp2 + " Nbre de comparaison retourné = " + comparaison);            return comparaison;        }         public java.util.ArrayList getM_vector() {             return m_vector;         }         public void setM_vector(java.util.ArrayList m_vector) {             this.m_vector = m_vector;         }    */    public String getColumnName(int column)    {        return m_columns[column].c_title;    }    /*        public java.util.ArrayList getM_vector_by_key() {            return m_vector_by_key;        }        public void setM_vector_by_key(java.util.ArrayList m_vector_by_key) {            this.m_vector_by_key = m_vector_by_key;        }    */    public int getColumnCount() {        return m_columns.length;    }/*    public int getRowCount(){        if(m_vector==null) return 0;        else       return m_vector.size();     }  */    ColumnData[] m_columns = new ColumnData[]{            new ColumnData("PO/PNR", 60, JLabel.LEFT),            new ColumnData("Catalogue", 60, JLabel.LEFT),            new ColumnData("Fournisseur", 60, JLabel.LEFT),            new ColumnData("Valeur", 60, JLabel.LEFT),            /* new ColumnData("Hotel",60,JLabel.LEFT),           new ColumnData("Status",60,JLabel.LEFT),           new ColumnData("Client",60,JLabel.LEFT),           new ColumnData("Fournisseur",60,JLabel.LEFT),           new ColumnData("Prix",60,JLabel.LEFT)*/    };    }