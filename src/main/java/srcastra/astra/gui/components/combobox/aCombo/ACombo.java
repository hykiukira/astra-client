/* * ACombo.java * * Created on 25 novembre 2002, 9:40 */package srcastra.astra.gui.components.combobox.aCombo;import srcastra.astra.gui.sys.*;import java.awt.Color;import java.awt.event.*;import javax.swing.*;import javax.swing.event.*;import srcastra.astra.gui.event.*;import srcastra.astra.gui.components.AstraComponent;import java.awt.Component;import srcastra.astra.gui.sys.listModel.AbstractAstraListModel;/** * @author Sébastien */public class ACombo extends javax.swing.JPanel implements java.io.Serializable, AstraComponent {////// FIELDS ///////////////////////////////////////////////////////////////////////////////////////////////////////    private AString m_current0bject;    protected static final int NO_MOVE = -1;    protected static final int MOVE_UP = 0;    protected static final int MOVE_DOWN = 1;    private EventListenerList m_listener_list;////// PROPERTIES ///////////////////////////////////////////////////////////////////////////////////////////////////////    private Color m_selectionColor;    private Color m_selectedTextColor;    private Color m_backgroundColor;    private Color m_foregroundColor;    private Color m_disabledColor;    private Color m_disabledBorderColor;    private boolean m_lastFocused;    private Icon m_workingIcon;    private JComponent m_nextComponent;////// INIT ///////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Creates new form ACombo     */    public ACombo() {        // setFocusable(true);        //setFocusCycleRoot(true);        m_listener_list = new EventListenerList();        // enableEvents(java.awt.AWTEvent.FOCUS_EVENT_MASK);        // enableInputMethods(true);        // setFocusTraversalKeysEnabled(true);        preInit();        initComponents();        postInit();        setListeners();    }    // public void refreshListe(O    private void preInit() {        m_selectionColor = new Color(204, 204, 255);        m_selectedTextColor = Color.black;        m_backgroundColor = Color.white;        m_foregroundColor = Color.black;        m_disabledColor = Color.lightGray;        m_disabledBorderColor = new Color(153, 153, 153);        grp_But_barrow = new javax.swing.plaf.basic.BasicArrowButton(javax.swing.plaf.basic.BasicArrowButton.SOUTH);    }    private void setListeners() {        addKeyListener(new ACombo.KeyL());        addFocusListener(new ACombo.FocusL());        addMouseListener(l_getThaFocus);        grp_TField_encode.addMouseListener(l_getThaFocus);        grp_But_barrow.addMouseListener(l_getThaFocus);        grp_But_barrow.addMouseListener(l_mousBut);        grp_List.addListSelectionListener(l_list);        grp_List.addMouseListener(l_mousList);    }    private void postInit() {        grp_Pan_Comp.add(grp_But_barrow);        grp_Popup.setPreferredSize(new java.awt.Dimension(100, 100));        grp_ScrollPane_list.setPreferredSize(new java.awt.Dimension(99, 98));        grp_Popup.add(grp_ScrollPane_list);        grp_Popup.setFocusable(false);        grp_But_barrow.setFocusable(false);        grp_TField_encode.setFocusable(false);        grp_ScrollPane_list.setFocusable(false);        grp_List.setFocusable(false);        grp_TField_encode.setDisabledTextColor(m_selectedTextColor);        grp_TField_encode.setHorizontalAlignment(javax.swing.JTextField.LEFT);        setPreferredSize(new java.awt.Dimension(100, 18));    }    /**     * This method is called from within the constructor to     * <p/>     * <p/>     * <p/>     * initialize the form.     * <p/>     * <p/>     * <p/>     * WARNING: Do NOT modify this code. The content of this method is     * <p/>     * <p/>     * <p/>     * always regenerated by the Form Editor.     */    private void initComponents() {//GEN-BEGIN:initComponents        grp_Popup = new javax.swing.JPopupMenu();        grp_ScrollPane_list = new javax.swing.JScrollPane();        grp_List = new javax.swing.JList();        jPopupMenu1 = new javax.swing.JPopupMenu();        grp_Pan_Comp = new javax.swing.JPanel();        grp_TField_encode = new javax.swing.JTextField();        grp_Label_iconer = new javax.swing.JLabel();        grp_Popup.setBackground(new java.awt.Color(255, 255, 255));        grp_Popup.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));        grp_ScrollPane_list.setBorder(null);        grp_List.setFont(new java.awt.Font("Tahoma", 0, 10));        grp_ScrollPane_list.setViewportView(grp_List);        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));        setFocusCycleRoot(true);        setMaximumSize(new java.awt.Dimension(118, 18));        setMinimumSize(new java.awt.Dimension(118, 18));        setPreferredSize(new java.awt.Dimension(100, 18));        setOpaque(false);        grp_Pan_Comp.setLayout(new javax.swing.BoxLayout(grp_Pan_Comp, javax.swing.BoxLayout.X_AXIS));        grp_Pan_Comp.setBackground(new java.awt.Color(255, 255, 255));        grp_Pan_Comp.setBorder(new javax.swing.border.EtchedBorder());        grp_Pan_Comp.setMaximumSize(new java.awt.Dimension(100, 18));        grp_Pan_Comp.setMinimumSize(new java.awt.Dimension(100, 18));        grp_Pan_Comp.setPreferredSize(new java.awt.Dimension(100, 18));        grp_TField_encode.setBackground(new java.awt.Color(255, 255, 255));        grp_TField_encode.setEditable(false);        grp_TField_encode.setFont(new java.awt.Font("Tahoma", 0, 10));        grp_TField_encode.setBorder(null);        grp_TField_encode.setDisabledTextColor(new java.awt.Color(255, 255, 255));        grp_TField_encode.setMinimumSize(new java.awt.Dimension(0, 13));        grp_TField_encode.setPreferredSize(new java.awt.Dimension(70, 13));        grp_Pan_Comp.add(grp_TField_encode);        add(grp_Pan_Comp);        grp_Label_iconer.setBackground(new java.awt.Color(204, 204, 204));        grp_Label_iconer.setMaximumSize(new java.awt.Dimension(18, 18));        grp_Label_iconer.setMinimumSize(new java.awt.Dimension(18, 18));        grp_Label_iconer.setPreferredSize(new java.awt.Dimension(18, 18));        add(grp_Label_iconer);    }//GEN-END:initComponents////// LISTENER ///////////////////////////////////////////////////////////////////////////////////////////////////////    private class KeyL implements java.awt.event.KeyListener {        public void keyPressed(java.awt.event.KeyEvent evt) {            boolean popup = grp_Popup.isVisible();            if (evt.getKeyCode() == KeyEvent.VK_DOWN && !popup) openMenu();            else if (evt.getKeyCode() == KeyEvent.VK_DOWN && popup) {                changeSelection(MOVE_DOWN);            }// descendre dans la liste            else if (evt.getKeyCode() == KeyEvent.VK_UP && popup) {                changeSelection(MOVE_UP);            }// monter dans la liste            else if (evt.getKeyCode() == KeyEvent.VK_ENTER && popup) {                closeMenu();                focusNextComponent();            } else if (evt.getKeyCode() == KeyEvent.VK_ENTER && !popup) {                focusNextComponent();            }        }        public void keyReleased(java.awt.event.KeyEvent evt) {        }        public void keyTyped(java.awt.event.KeyEvent evt) {        }    }    private class FocusL implements java.awt.event.FocusListener {        public void focusGained(java.awt.event.FocusEvent evt) {            if (!evt.isTemporary()) {                grp_TField_encode.setBackground(m_selectionColor);                grp_Label_iconer.setIcon(m_workingIcon);            }        }        public void focusLost(java.awt.event.FocusEvent evt) {            if (isEnabled()) grp_TField_encode.setBackground(m_backgroundColor);            grp_Label_iconer.setIcon(null);        }    }    private MouseListener l_getThaFocus = new MouseListener() {        public void mouseClicked(java.awt.event.MouseEvent mouseEvent) {            if (!isFocusOwner()) requestFocus();        }        public void mouseEntered(java.awt.event.MouseEvent mouseEvent) {        }        public void mouseExited(java.awt.event.MouseEvent mouseEvent) {        }        public void mousePressed(java.awt.event.MouseEvent mouseEvent) {        }        public void mouseReleased(java.awt.event.MouseEvent mouseEvent) {        }    };    private MouseListener l_mousBut = new MouseListener() {        public void mouseClicked(java.awt.event.MouseEvent mouseEvent) {            if (grp_But_barrow.isEnabled()) {                if (grp_Popup.isVisible()) closeMenu();                else openMenu();            }        }        public void mouseEntered(java.awt.event.MouseEvent mouseEvent) {        }        public void mouseExited(java.awt.event.MouseEvent mouseEvent) {        }        public void mousePressed(java.awt.event.MouseEvent mouseEvent) {        }        public void mouseReleased(java.awt.event.MouseEvent mouseEvent) {        }    };    private MouseListener l_mousList = new MouseListener() {        public void mouseClicked(java.awt.event.MouseEvent evt) {            if (evt.getClickCount() > 1) closeMenu();        }        public void mouseEntered(java.awt.event.MouseEvent evt) {        }        public void mouseExited(java.awt.event.MouseEvent evt) {        }        public void mousePressed(java.awt.event.MouseEvent evt) {        }        public void mouseReleased(java.awt.event.MouseEvent evt) {        }    };    private ListSelectionListener l_list = new ListSelectionListener() {        public void valueChanged(ListSelectionEvent evt) {            keepObject();        }    };////// METHODES ///////////////////////////////////////////////////////////////////////////////////////////////////////    private void openMenu() {        checkPopupPreferedSize();        grp_Popup.show(this, grp_Pan_Comp.getX(), grp_Pan_Comp.getY() + grp_Pan_Comp.getHeight());        if (grp_List.getSelectedIndex() < 0) changeSelection(NO_MOVE);        grp_Popup.setVisible(true);        requestFocus();    }    private void checkPopupPreferedSize() {        int w = grp_Pan_Comp.getPreferredSize().width;        int wp = grp_Popup.getPreferredSize().width;        int hp = grp_Popup.getPreferredSize().height;        if (w != wp) {            grp_Popup.setPreferredSize(new java.awt.Dimension(w, hp));        }    }    private void closeMenu() {        grp_Popup.setVisible(false);    }    private void changeSelection(int direction) {        int selId = grp_List.getSelectedIndex();        int totId = grp_List.getModel().getSize();        if (selId < 0) {            selId = 0;            grp_List.setSelectedIndex(selId);        } else if (selId + 1 < totId && direction == MOVE_DOWN) grp_List.setSelectedIndex(selId + 1);        else if (selId > 0 && direction == MOVE_UP) grp_List.setSelectedIndex(selId - 1);    }    private void keepObject() {        m_current0bject = (AString) grp_List.getSelectedValue();        if (m_current0bject != null) {            grp_TField_encode.setText(m_current0bject.toString());            fireActionEvent();        }    }    private void focusNextComponent() {        if (m_nextComponent != null) {            if (!m_nextComponent.isEnabled()) m_nextComponent.setEnabled(true);            m_nextComponent.requestFocus();        }        fireValidateActionEvent();    }    public void addItems(String[] items) {    }    public void addItems(String item) {    }    public String getSelectedText() {        if (m_current0bject != null) return m_current0bject.toString();        else return new String();    }    public void setSelectedIndex(int index) {        if (index < grp_List.getModel().getSize()) grp_List.setSelectedIndex(index);        grp_TField_encode.setCaretPosition(0);    }    public int getSelectedIndex() {        return grp_List.getSelectedIndex();    }    public int getSelectedCleUnik() {        if (m_current0bject != null) return m_current0bject.getCleunik();        else return -1;    }    public void setSelectedCleUnik(int cleUnik) {        AbstractAstraListModel list = (AbstractAstraListModel) grp_List.getModel();        AString[] datas = list.getData();        if (datas != null) {            for (int i = 0; i < datas.length; i++) {                if (datas[i].getCleunik() == cleUnik) grp_List.setSelectedIndex(i);            }            grp_TField_encode.setCaretPosition(0);        }    }    private void fireActionEvent() {        if (m_listener_list.getListenerCount(ActionListener.class) > 0) {            Object[] list = m_listener_list.getListeners(ActionListener.class);            for (int i = 0; i < list.length; i++) {                //if (ActionListener.class == list[i].getClass()) {                ((ActionListener) list[i]).actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "action"));                //}            }        }    }    private void fireValidateActionEvent() {        if (m_listener_list.getListenerCount(ValidateField.class) > 0) {            Object[] list = m_listener_list.getListeners(ValidateField.class);            for (int i = 0; i < list.length; i++) {                //if (ValidateField.class.isAssignableFrom(list[i].getClass())) {                ((ValidateField) list[i]).actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "action"));                //}            }        }    }////// GRAPHICS FIELDS ///////////////////////////////////////////////////////////////////////////////////////////////////////    // Variables declaration - do not modify//GEN-BEGIN:variables    private javax.swing.JPopupMenu grp_Popup;    private javax.swing.JPopupMenu jPopupMenu1;    private javax.swing.JList grp_List;    private javax.swing.JTextField grp_TField_encode;    private javax.swing.JScrollPane grp_ScrollPane_list;    private javax.swing.JLabel grp_Label_iconer;    private javax.swing.JPanel grp_Pan_Comp;    // End of variables declaration//GEN-END:variables    private javax.swing.plaf.basic.BasicArrowButton grp_But_barrow;////// GET / SET  SUPPORT  ///////////////////////////////////////////////////////////////////////////////////////////////////////    public void setModel(srcastra.astra.gui.sys.listModel.AbstractAstraListModel model) {        grp_List.setModel(model);    }    public void refresh() {        if (grp_Popup != null)            grp_Popup.repaint();        if (grp_List != null)            grp_List.repaint();        //grp_List.    }    public srcastra.astra.gui.sys.listModel.AbstractAstraListModel getModel() {        javax.swing.ListModel model = grp_List.getModel();        return (model != null && model instanceof AbstractAstraListModel) ? (AbstractAstraListModel) model : null;    }    public void clearIcon() {    }    public boolean getverif() {        return true;    }    public void setText(String text) {    }    /**     * Getter for property m_foregroundColor.     *     * @return Value of property m_foregroundColor.     */    public java.awt.Color getForeground() {        return m_foregroundColor;    }    /**     * Setter for property m_foregroundColor.     *     * @param m_foregroundColor New value of property m_foregroundColor.     */    public void setForeground(java.awt.Color m_foregroundColor) {        this.m_foregroundColor = m_foregroundColor;    }    /**     * Getter for property m_backgroundColor.     *     * @return Value of property m_backgroundColor.     */    public java.awt.Color getBackground() {        return m_backgroundColor;    }    /**     * Setter for property m_backgroundColor.     *     * @param m_backgroundColor New value of property m_backgroundColor.     */    public void setBackground(java.awt.Color m_backgroundColor) {        this.m_backgroundColor = m_backgroundColor;    }    /**     * Getter for property m_nextComponent.     *     * @return Value of property m_nextComponent.     */    public JComponent getGrp_Comp_nextComponent() {        return m_nextComponent;    }    /**     * Setter for property m_nextComponent.     *     * @param m_nextComponent New value of property m_nextComponent.     */    public void setGrp_Comp_nextComponent(JComponent m_nextComponent) {        this.m_nextComponent = m_nextComponent;    }    /**     * Getter for property m_lastFocused.     *     * @return Value of property m_lastFocused.     */    public boolean isLastFocusedComponent() {        return m_lastFocused;    }    /**     * Setter for property m_lastFocused.     *     * @param m_lastFocused New value of property m_lastFocused.     */    public void setLastFocusedComponent(boolean m_lastFocused) {        this.m_lastFocused = m_lastFocused;    }    /**     * Getter for property m_workingIcon.     *     * @return Value of property m_workingIcon.     */    public Icon getWorkingIcon() {        return m_workingIcon;    }    /**     * Setter for property m_workingIcon.     *     * @param m_workingIcon New value of property m_workingIcon.     */    public void setWorkingIcon(Icon m_workingIcon) {        this.m_workingIcon = m_workingIcon;    }    /**     * Getter for property m_selectedTextColor.     *     * @return Value of property m_selectedTextColor.     */    public java.awt.Color getSelectedTextColor() {        return m_selectedTextColor;    }    /**     * Setter for property m_selectedTextColor.     *     * @param m_selectedTextColor New value of property m_selectedTextColor.     */    public void setSelectedTextColor(java.awt.Color m_selectedTextColor) {        this.m_selectedTextColor = m_selectedTextColor;    }    /**     * Getter for property m_selectionColor.     *     * @return Value of property m_selectionColor.     */    public java.awt.Color getSelectionColor() {        return m_selectionColor;    }    /**     * Setter for property m_selectionColor.     *     * @param m_selectionColor New value of property m_selectionColor.     */    public void setSelectionColor(java.awt.Color m_selectionColor) {        this.m_selectionColor = m_selectionColor;    }    public void setEnabled(boolean enabled) {        super.setEnabled(enabled);        grp_TField_encode.setEnabled(enabled);        grp_But_barrow.setEnabled(enabled);        //   super.setFocusable(enabled);        // grp_TField_encode.setFocusable(enabled);        // grp_But_barrow.setFocusable(enabled);        // setFocusable(enabled);        /// if (!enabled) transferFocus();        if (enabled) {            grp_Pan_Comp.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.LOWERED));            grp_TField_encode.setBackground(m_backgroundColor);        } else {            grp_Pan_Comp.setBorder(new javax.swing.border.LineBorder(m_disabledBorderColor));            grp_TField_encode.setBackground(m_disabledColor);        }        if (grp_Popup.isVisible()) closeMenu();    }    public void setPreferredSize(java.awt.Dimension dim) {        int w = dim.width;        int h = dim.height;        super.setPreferredSize(dim);        grp_Pan_Comp.setPreferredSize(new java.awt.Dimension(w - h, h));        grp_Label_iconer.setPreferredSize(new java.awt.Dimension(h, h));        w = w - h;        grp_But_barrow.setPreferredSize(new java.awt.Dimension(h, h));        grp_TField_encode.setPreferredSize(new java.awt.Dimension(w - h, h));    }    public void setMinimumSize(java.awt.Dimension dim) {        int w = dim.width;        int h = dim.height;        super.setMinimumSize(dim);        grp_Pan_Comp.setMinimumSize(new java.awt.Dimension(w - h, h));        grp_Label_iconer.setMinimumSize(new java.awt.Dimension(h, h));        w = w - h;        grp_But_barrow.setMinimumSize(new java.awt.Dimension(h, h));        grp_TField_encode.setMinimumSize(new java.awt.Dimension(w - 18, h));    }    public void setMaximumSize(java.awt.Dimension dim) {        int w = dim.width;        int h = dim.height;        super.setMaximumSize(dim);        grp_Pan_Comp.setMaximumSize(new java.awt.Dimension(w - h, h));        grp_Label_iconer.setMaximumSize(new java.awt.Dimension(h, h));        w = w - h;        grp_But_barrow.setMaximumSize(new java.awt.Dimension(h, h));        grp_TField_encode.setMaximumSize(new java.awt.Dimension(w - 18, h));    }    public void addActionListener(ActionListener listener) {        m_listener_list.add(ActionListener.class, listener);    }    public void removeActionListener(ActionListener listener) {        m_listener_list.remove(ActionListener.class, listener);    }    public void addValidateFieldListener(ValidateField listener) {        m_listener_list.add(ValidateField.class, listener);    }    public void removeValidateFieldListener(ValidateField listener) {        m_listener_list.remove(ValidateField.class, listener);    }    public String getText2() {        return "";    }    public void setWarningIcon(javax.swing.Icon workingIcon) {    }}