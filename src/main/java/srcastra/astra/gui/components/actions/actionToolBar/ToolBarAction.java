/* * ToolBarAction.java * * Created on 12 juillet 2002, 12:33 */package srcastra.astra.gui.components.actions.actionToolBar;import srcastra.astra.gui.sys.ErreurScreenLibrary;import srcastra.astra.sys.classetransfert.Loginusers_T;/** * @author Sébastien */public class ToolBarAction extends javax.swing.AbstractAction {    public int action;    private ActionToolBar toolbar;    private Loginusers_T currentUser;    public ToolBarAction(String name, int action, ActionToolBar toolbar, Loginusers_T currentUser) {        putValue(javax.swing.Action.NAME, name);        this.action = action;        this.toolbar = toolbar;        this.currentUser = currentUser;        // defineToolTipText();    }    private void defineToolTipText() {        try {            String tooltip = java.util.ResourceBundle.getBundle("srcastra/astra/locale/ActionToolBar", currentUser.getLangage()).getString("" + this.action);            putValue(javax.swing.Action.SHORT_DESCRIPTION, tooltip);        }        catch (java.util.MissingResourceException e) {        }    }    public void actionPerformed(java.awt.event.ActionEvent evt) {        if (lock || this.toolbar.isM_locked())            return;        System.out.println("action :" + action);        ToolBarComposer tbcomposer = toolbar.getTbComposer();        sw = new Boolean(false);        Object syn = new Object();        if (tbcomposer != null) {            try {                synchronized (syn) {                    lock = true;                    if (action == ActionToolBar.DO_ACCEPT) {                        tbcomposer.doAccept();                    }                    if (action == ActionToolBar.DO_F10) {                        tbcomposer.doF10();                    } else if (action == ActionToolBar.DO_CREATE) {                        tbcomposer.doCreate();                    } else if (action == ActionToolBar.DO_MODIFY) {                        tbcomposer.doModify();                    } else if (action == ActionToolBar.DO_DELETE) {                        tbcomposer.doDelete();                    } else if (action == ActionToolBar.DO_PREVIOUS) {                        tbcomposer.doPrevious();                    } else if (action == ActionToolBar.DO_NEXT) {                        tbcomposer.doNext();                    } else if (action == ActionToolBar.DO_CANCEL) {                        tbcomposer.doCancel();                    } else if (action == ActionToolBar.DO_CLOSE) {                        tbcomposer.doClose();                    } else if (action == ActionToolBar.DO_SWITCH) {                        tbcomposer.doSwitch();                    } else if (action == ActionToolBar.DO_F7) {                        tbcomposer.doF7();                    }                }                lock = false;            }            catch (Exception e) {                ErreurScreenLibrary.displayErreur(null, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);            }        }    }    private boolean onlyOneActionAtATime() {        synchronized (sw) {            if (sw.booleanValue() == false)            {                sw = new Boolean(true);                return false;            } else                return true;        }    }    private void setSwToFalse() {        synchronized (sw) {            sw = new Boolean(false);        }    }    Boolean sw;    boolean lock;}