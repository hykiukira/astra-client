/* * ToolBarInteraction.java * * Created on 31 juillet 2002, 15:34 */package srcastra.astra.gui.components.actions;// Diversimport srcastra.astra.gui.modules.MainScreenModule;import srcastra.astra.gui.modules.InternScreenModule;import srcastra.astra.gui.components.actions.actionToolBar.ActionToolBar;import srcastra.astra.gui.components.textFields.ATextField;import srcastra.astra.gui.components.AstraComponent;import srcastra.astra.gui.components.InsertCombo.InsertCombo;import javax.swing.JComponent;// Listenerimport srcastra.astra.gui.components.InsertCombo.InsertComboListener;import srcastra.astra.gui.components.InsertCombo.InsertComboEvent;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import srcastra.astra.gui.sys.tableModel.DataContainerListener;import srcastra.astra.gui.sys.tableModel.DataContainerEvent;import java.util.*;/** * @author Sébastien */public class ToolBarInteraction {    /**     * for validate action environnement     */    public static final int ACT_ENV_DEFAULT = 0;      // F4 - F8    /**     * for validate action environnement     */    public static final int ACT_ENV_STANDART = 1;     // F5 - F8    /**     * for validate action environnement     */    public static final int ACT_ENV_WITH_SWITCH = 2;  // F5 - F8 - F12    public static final int ACT_ENV_WITH_SWITCH_PROD = 3;    private MainScreenModule module;    private InternScreenModule internModule;    private InsertComboListener changeInsertComboDataActionListener;    private ActionListener validateActionListener;    private boolean validateActionListenerEnabled = true;    private AstraComponent[] components;    private DataContainerListener containerListener;    private boolean containerListenerEnabled = true;    private int environnement;    private int validateActionEnvironnement;    private boolean verified;    Hashtable hash;    /**     * Creates a new instance of ToolBarInteraction     */    public ToolBarInteraction(MainScreenModule module, InternScreenModule internModule, AstraComponent[] components) {        this.module = module;        this.internModule = internModule;        this.components = components;        hash = new Hashtable();        validateActionEnvironnement = ACT_ENV_DEFAULT; // environnement de validation en défaut        /* création de l'insertcombo listener */        this.changeInsertComboDataActionListener = new InsertComboListener() {            public void actionComboPerformed(InsertComboEvent evt) {                actionComboDataChangedPerformed(evt);            }        };        /* creation de l'action listener pour la validation */        this.validateActionListener = new ActionListener() {            public void actionPerformed(ActionEvent evt) {                if (validateActionListenerEnabled) validateAction(evt);            }        };        this.containerListener = new DataContainerListener() {            public void dataChanged(DataContainerEvent evt) {                if (containerListenerEnabled) dataContainerChanged(evt);            }        };    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    private void actionComboDataChangedPerformed(InsertComboEvent evt) {        InsertCombo insertCombo = (InsertCombo) evt.getSource();        if (insertCombo.isEnabled()) {            module.setCurrentActionEnabled(getActionsForInsertComboEnvironnement(evt.getState(), evt.getEnvironnement()));            System.out.println("[propertyChangeComboData] j'ai changer les actions !!!");        }    }    private int[] getActionsForInsertComboEnvironnement(int state, int environnement) {        int nbrElem = (state == InsertCombo.DATASTATE_EMPTY) ? 2 : 5;        int[] actions = new int[nbrElem];        if (state == InsertCombo.DATASTATE_EMPTY) {            actions[0] = ActionToolBar.DO_CREATE;            actions[1] = (environnement == InsertCombo.ENVIRONNEMENT_INDEX_PREVIEW) ? ActionToolBar.DO_CLOSE : ActionToolBar.DO_CANCEL;        } else if (state == InsertCombo.DATASTATE_FULL) {            switch (environnement) {                case InsertCombo.ENVIRONNEMENT_INDEX_PREVIEW:                    actions[0] = ActionToolBar.DO_CREATE;                    actions[1] = ActionToolBar.DO_ACCEPT;                    actions[2] = ActionToolBar.DO_CLOSE;                    actions[3] = ActionToolBar.DO_DELETE;                    actions[4] = ActionToolBar.DO_NOTHING;                    break;                case InsertCombo.ENVIRONNEMENT_PANEL_DATA:                    actions[0] = ActionToolBar.DO_CREATE;                    actions[1] = ActionToolBar.DO_NOTHING;                    actions[2] = ActionToolBar.DO_CANCEL;                    actions[3] = ActionToolBar.DO_DELETE;                    actions[4] = ActionToolBar.DO_MODIFY;                    break;                case InsertCombo.ENVIRONNEMENT_PANEL_SIGNALETIQUE:                    actions[0] = ActionToolBar.DO_CREATE;                    actions[1] = ActionToolBar.DO_NOTHING;                    actions[2] = ActionToolBar.DO_CLOSE;                    actions[3] = ActionToolBar.DO_DELETE;                    actions[4] = ActionToolBar.DO_MODIFY;                    break;            }        } else if (state == InsertCombo.DATASTATE_LOADING) {            return new int[0];        }        return actions;    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    private void dataContainerChanged(DataContainerEvent evt) {        //    JComponent jc = (JComponent) evt.getSource();        //    if (jc.isEnabled()) {        module.setCurrentActionEnabled(getActionsForEnvironnement(evt.getState(), environnement));        //    }    }    private int[] getActionsForEnvironnement(int state, int environnement) {        int nbrElem = (state == InsertCombo.DATASTATE_EMPTY) ? 2 : 5;        int[] actions = new int[nbrElem];        if (state == InsertCombo.DATASTATE_EMPTY) {            actions[0] = ActionToolBar.DO_CREATE;            actions[1] = (environnement == InsertCombo.ENVIRONNEMENT_INDEX_PREVIEW) ? ActionToolBar.DO_CLOSE : ActionToolBar.DO_CANCEL;        } else if (state == InsertCombo.DATASTATE_FULL) {            switch (environnement) {                case InsertCombo.ENVIRONNEMENT_INDEX_PREVIEW:                    actions[0] = ActionToolBar.DO_CREATE;                    actions[1] = ActionToolBar.DO_ACCEPT;                    actions[2] = ActionToolBar.DO_CLOSE;                    actions[3] = ActionToolBar.DO_DELETE;                    actions[4] = ActionToolBar.DO_NOTHING;                    break;                case InsertCombo.ENVIRONNEMENT_PANEL_DATA:                    actions[0] = ActionToolBar.DO_CREATE;                    actions[1] = ActionToolBar.DO_ACCEPT;                    actions[2] = ActionToolBar.DO_CANCEL;                    actions[3] = ActionToolBar.DO_DELETE;                    actions[4] = ActionToolBar.DO_MODIFY;                    break;                case InsertCombo.ENVIRONNEMENT_PANEL_SIGNALETIQUE:                    actions[0] = ActionToolBar.DO_CREATE;                    actions[1] = ActionToolBar.DO_NOTHING;                    actions[2] = ActionToolBar.DO_CLOSE;                    actions[3] = ActionToolBar.DO_DELETE;                    actions[4] = ActionToolBar.DO_MODIFY;                    break;            }        } else if (state == InsertCombo.DATASTATE_LOADING) {            return new int[0];        }        return actions;    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    private void validateAction(ActionEvent evt) {        System.out.println("----------ValidateAction--------------------------------------------------------------");        int actionType = internModule.getAction();        if (actionType != ActionToolBar.ACT_READ) {            int lfc = 0;            boolean value = true;            for (int i = 0; i < components.length; i++) {                // System.out.println("[validateAction] composant intéroger :" + i + " value : " + components[i].getverif() + " lfc : " + components[i].isLastFocusedComponent() + " Enabled : " + components[i].isEnabled());                if (!components[i].getverif()) {                    System.out.println("composant " + i + " non valide " + components[i].getGrp_Comp_nextComponent() + " " + components[i].getText2());                    value = false;                    break;                } else System.out.println("composant  " + i + " valide ");                lfc++;                if (components[i].isLastFocusedComponent() && components[i].isEnabled()) {                    lfc++;                }            }            if (lfc == 0) {                System.out.println("[validate action] aucun lastFocusedComponent : fixe la value à false");                value = false;            }            System.out.println("[validateAction] valeur de value à la sortie : " + value);            enableToolBarAcceptButton(value);        }        System.out.println("---------------ValidateAction----------fin-------------------------------------------");    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    private void enableToolBarAcceptButton(boolean value) {        System.out.println("\n\n[++++++++++++++++++++] value" + value);        if (((javax.swing.JInternalFrame) module).isSelected()) {            int[] actionEnabled = new int[0];            if (value) {                verified = true;                switch (validateActionEnvironnement) {                    case ToolBarInteraction.ACT_ENV_DEFAULT:                        actionEnabled = new int[]{ActionToolBar.DO_ACCEPT,                                ActionToolBar.DO_CANCEL};                        break;                    case ToolBarInteraction.ACT_ENV_STANDART:                        actionEnabled = new int[]{ActionToolBar.DO_PREVIOUS,                                ActionToolBar.DO_CANCEL};                        break;                    case ToolBarInteraction.ACT_ENV_WITH_SWITCH:                        actionEnabled = new int[]{ActionToolBar.DO_PREVIOUS,                                ActionToolBar.DO_CANCEL,                                ActionToolBar.DO_SWITCH};                        break;                    case ToolBarInteraction.ACT_ENV_WITH_SWITCH_PROD:                        actionEnabled = new int[]{ActionToolBar.DO_PREVIOUS,                                ActionToolBar.DO_CANCEL,                                ActionToolBar.DO_SWITCH,                                ActionToolBar.DO_F10};                        break;                }            } else {                verified = false;                actionEnabled = new int[]{ActionToolBar.DO_CANCEL};            }            module.setCurrentActionEnabled(actionEnabled);        }    }    private void enableToolBarActionButton(int[] actions) {        module.setCurrentActionEnabled(actions);    }    public void enableValidateActionListener(boolean enabled) {        this.validateActionListenerEnabled = enabled;    }    public void enabledContainerListenerEnabled(boolean enabled) {        this.containerListenerEnabled = enabled;    }    /**     * Getter for property validateActionListener.     *     * @return Value of property validateActionListener.     */    public java.awt.event.ActionListener getValidateActionListener() {        return validateActionListener;    }    /**     * Setter for property validateActionListener.     *     * @param validateActionListener New value of property validateActionListener.     */    public void setValidateActionListener(java.awt.event.ActionListener validateActionListener) {        this.validateActionListener = validateActionListener;    }    /**     * Getter for property changeInsertComboDataActionListener.     *     * @return Value of property changeInsertComboDataActionListener.     */    public srcastra.astra.gui.components.InsertCombo.InsertComboListener getChangeInsertComboDataActionListener() {        return changeInsertComboDataActionListener;    }    /**     * Setter for property changeInsertComboDataActionListener.     *     * @param changeInsertComboDataActionListener     *         New value of property changeInsertComboDataActionListener.     */    public void setChangeInsertComboDataActionListener(srcastra.astra.gui.components.InsertCombo.InsertComboListener changeInsertComboDataActionListener) {        this.changeInsertComboDataActionListener = changeInsertComboDataActionListener;    }    /**     * Getter for property environnement.     *     * @return Value of property environnement.     */    public int getEnvironnement() {        return environnement;    }    /**     * Setter for property environnement.     *     * @param environnement New value of property environnement.     */    public void setEnvironnement(int environnement) {        this.environnement = environnement;    }    /**     * Getter for property containerListener.     *     * @return Value of property containerListener.     */    public srcastra.astra.gui.sys.tableModel.DataContainerListener getContainerListener() {        return containerListener;    }    /**     * Setter for property containerListener.     *     * @param containerListener New value of property containerListener.     */    public void setContainerListener(srcastra.astra.gui.sys.tableModel.DataContainerListener containerListener) {        this.containerListener = containerListener;    }    /**     * Getter for property validateActionEnvironnement.     *     * @return Value of property validateActionEnvironnement.     */    public int getValidateActionEnvironnement() {        return validateActionEnvironnement;    }    /**     * Setter for property validateActionEnvironnement.     *     * @param validateActionEnvironnement New value of property validateActionEnvironnement.     */    public void setValidateActionEnvironnement(int validateActionEnvironnement) {        this.validateActionEnvironnement = validateActionEnvironnement;    }    /**     * Getter for property verified.     *     * @return Value of property verified.     */    public boolean isVerified() {        return verified;    }    /**     * Setter for property verified.     *     * @param verified New value of property verified.     */    public void setVerified(boolean verified) {        this.verified = verified;    }}