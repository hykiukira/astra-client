/* * ActionToolBar.java * Created on 6 mars 2002, 15:11 */package srcastra.astra.gui.components.actions.actionToolBar;import javax.swing.JButton;import srcastra.astra.gui.event.*;import srcastra.astra.gui.sys.ErreurScreenLibrary;import srcastra.astra.sys.classetransfert.Loginusers_T;import javax.swing.JPanel;import java.awt.*;import java.awt.event.*;import java.util.*;import javax.swing.*;/** * @author Sébastien */public class ActionToolBar extends javax.swing.JPanel implements java.awt.event.KeyListener {    private srcastra.astra.gui.modules.dossier.productSpecification.integration.IntegrationFrame grp_Mod_integra;    /**     * Représentation d'action : ne rien faire     */    public static final int DO_NOTHING = 0;    /**     * Représentation d'action : créer     */    public static final int DO_CREATE = 2;    /**     * Représentation d'action : modifier     */    public static final int DO_MODIFY = 3;    /**     * Représentation d'action : accepter     */    public static final int DO_ACCEPT = 4;    /**     * Représentation d'action : précédent     */    public static final int DO_PREVIOUS = 5;    /**     * Représentation d'action : suivant     */    public static final int DO_NEXT = 6;    public static final int DO_F7 = 7;    /**     * Représentation d'action : annuler     */    public static final int DO_CANCEL = 8;    /**     * Représentation d'action : supprimer     */    public static final int DO_DELETE = 9;    /**     * Représentation d'action : fermer     */    public static final int DO_CLOSE = 11;    /**     * Représentation d'action : imprimer     */    public static final int DO_SWITCH = 12;    public static final int DO_F10 = 10;    public static final int DO_UP = 11;    public static final int DO_DOWN = 12;    /**     * Représentation d'état : lecture     */    public static final int ACT_READ = 0;    /**     * Représentation d'état : insertion     */    public static final int ACT_INSERT = 1;    /**     * Représentation d'état : modification     */    public static final int ACT_MODIFY = 2;    public static final int ACT_DISABLE = 3;    private java.util.Vector actualEnabledKeystroke = new java.util.Vector(0);    private JButton[] buttonList;    private ToolBarAction[] tbList;    private int[] actionEnabled;    private java.util.List<Color> buttonColors=new ArrayList<Color>();    /**     * valeur pour représenter une action     */    protected static final String[] nmList;    static {        nmList = new String[]{"F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12"};        //  nmList = new String[] { "F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11",KeyEvent.getKeyText(KeyEvent.VK_P) };    }    /**     * tableau qui décide de l'affectation des actions sur     * <p/>     * <p/>     * les touches de la toolbar     */    protected static final int[] actList;    static {        // changer les actions des touches ici        //                    F1,        F2,        F3,        F4,          F5,      F6,     F7,        F8,        F9,    F10,      F11,      F12        actList = new int[]{0, DO_CREATE, DO_MODIFY, DO_ACCEPT, DO_PREVIOUS, DO_NEXT, DO_F7, DO_CANCEL, DO_DELETE, DO_F10, DO_CLOSE, DO_SWITCH};    }    public ActionToolBar(Loginusers_T currentUser) {        this.currentUser = currentUser;        tmp = this;        initComponents();        postInit();        this.setPreferredSize(new java.awt.Dimension(50, 400));        this.addKeyListener(this);        buttonList = new JButton[]{grp_But_F1, grp_But_F2, grp_But_F3, grp_But_F4,                grp_But_F5, grp_But_F6, grp_But_F7, grp_But_F8,                grp_But_F9, grp_But_F10, grp_But_F11, grp_But_F12};        for (int i = 0; i < buttonList.length; i++) {            JButton jButton = buttonList[i];            buttonColors.add(jButton.getForeground());        }        System.out.println("touche :" + KeyEvent.getKeyText(KeyEvent.VK_UP));        System.out.println("touche :" + KeyEvent.getKeyText(KeyEvent.VK_DOWN));        setActionToDefault();    }    public ActionToolBar(Loginusers_T currentUser, boolean test) {        this.currentUser = currentUser;        tmp = this;        initComponents();        postInit();        this.setPreferredSize(new java.awt.Dimension(50, 400));        this.addKeyListener(this);        buttonList = new JButton[]{grp_But_F1, grp_But_F2, grp_But_F3, grp_But_F4,                grp_But_F5, grp_But_F6, grp_But_F7, grp_But_F8,                grp_But_F9, grp_But_F10, grp_But_F11, grp_But_F12};        //  System.out.println("touche :"+KeyEvent.getKeyText(KeyEvent.VK_UP));        // System.out.println("touche :"+KeyEvent.getKeyText(KeyEvent.VK_DOWN));        //  setActionToDefault();    }    /**     * This method is called from within the constructor to     * <p/>     * <p/>     * initialize the form.     * <p/>     * <p/>     * WARNING: Do NOT modify this code. The content of this method is     * <p/>     * <p/>     * always regenerated by the Form Editor.     */    private void initComponents() {//GEN-BEGIN:initComponents        jToolBar1 = new javax.swing.JToolBar();        jPanel1 = new javax.swing.JPanel();        grp_But_F1 = new javax.swing.JButton();        grp_But_F2 = new javax.swing.JButton();        grp_But_F3 = new javax.swing.JButton();        grp_But_F4 = new javax.swing.JButton();        grp_But_F5 = new javax.swing.JButton();        grp_But_F6 = new javax.swing.JButton();        grp_But_F7 = new javax.swing.JButton();        grp_But_F8 = new javax.swing.JButton();        grp_But_F9 = new javax.swing.JButton();        grp_But_F10 = new javax.swing.JButton();        grp_But_F11 = new javax.swing.JButton();        grp_But_F12 = new javax.swing.JButton();        grp_But_Up = new javax.swing.JButton();        grp_But_Down = new javax.swing.JButton();        jToolBar1.setBorder(null);        jToolBar1.setForeground(new java.awt.Color(0, 0, 204));        jToolBar1.setOrientation(1);        jToolBar1.setPreferredSize(new java.awt.Dimension(40, 500));        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 1, 1));        jPanel1.setMinimumSize(new java.awt.Dimension(36, 500));        jPanel1.setPreferredSize(new java.awt.Dimension(34, 498));        grp_But_F1.setAction(null);        grp_But_F1.setFont(new java.awt.Font("Tahoma", 1, 10));        grp_But_F1.setForeground(new java.awt.Color(0, 0, 204));        grp_But_F1.setContentAreaFilled(false);        grp_But_F1.setFocusPainted(false);        grp_But_F1.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_F1.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_F1.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_F1.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_F1.setRequestFocusEnabled(false);        grp_But_F1.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseClicked(java.awt.event.MouseEvent evt) {                grp_But_F1MouseClicked(evt);            }            public void mouseEntered(java.awt.event.MouseEvent evt) {                mouseOverButtonEvent(evt);            }            public void mouseExited(java.awt.event.MouseEvent evt) {                mouseOutButtonEvent(evt);            }        });        jPanel1.add(grp_But_F1);        grp_But_F2.setAction(null);        grp_But_F2.setFont(new java.awt.Font("Tahoma", 1, 10));        grp_But_F2.setForeground(new java.awt.Color(0, 0, 204));        grp_But_F2.setToolTipText("Cr\u00e9er");        grp_But_F2.setContentAreaFilled(false);        grp_But_F2.setFocusPainted(false);        grp_But_F2.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_F2.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_F2.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_F2.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_F2.setRequestFocusEnabled(false);        grp_But_F2.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseExited(java.awt.event.MouseEvent evt) {                mouseOutButtonEvent(evt);            }            public void mouseEntered(java.awt.event.MouseEvent evt) {                mouseOverButtonEvent(evt);            }        });        jPanel1.add(grp_But_F2);        grp_But_F3.setFont(new java.awt.Font("Tahoma", 1, 10));        grp_But_F3.setForeground(new java.awt.Color(0, 0, 204));        grp_But_F3.setToolTipText("Modifier");        grp_But_F3.setAction(null);        grp_But_F3.setContentAreaFilled(false);        grp_But_F3.setFocusPainted(false);        grp_But_F3.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_F3.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_F3.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_F3.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_F3.setRequestFocusEnabled(false);        grp_But_F3.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseExited(java.awt.event.MouseEvent evt) {                mouseOutButtonEvent(evt);            }            public void mouseEntered(java.awt.event.MouseEvent evt) {                mouseOverButtonEvent(evt);            }        });        jPanel1.add(grp_But_F3);        grp_But_F4.setFont(new java.awt.Font("Tahoma", 1, 10));        grp_But_F4.setForeground(new java.awt.Color(0, 0, 204));        grp_But_F4.setToolTipText("Accepter");        grp_But_F4.setAction(null);        grp_But_F4.setContentAreaFilled(false);        grp_But_F4.setFocusPainted(false);        grp_But_F4.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_F4.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_F4.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_F4.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_F4.setRequestFocusEnabled(false);        grp_But_F4.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseExited(java.awt.event.MouseEvent evt) {                mouseOutButtonEvent(evt);            }            public void mouseEntered(java.awt.event.MouseEvent evt) {                mouseOverButtonEvent(evt);            }        });        jPanel1.add(grp_But_F4);        grp_But_F5.setFont(new java.awt.Font("Tahoma", 1, 10));        grp_But_F5.setForeground(new java.awt.Color(204, 0, 51));        grp_But_F5.setToolTipText("Valider le dossier");        grp_But_F5.setAction(null);        grp_But_F5.setContentAreaFilled(false);        grp_But_F5.setFocusPainted(false);        grp_But_F5.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_F5.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_F5.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_F5.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_F5.setRequestFocusEnabled(false);        grp_But_F5.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseExited(java.awt.event.MouseEvent evt) {                mouseOutButtonEvent(evt);            }            public void mouseEntered(java.awt.event.MouseEvent evt) {                mouseOverButtonEvent(evt);            }        });        jPanel1.add(grp_But_F5);        grp_But_F6.setFont(new java.awt.Font("Tahoma", 1, 10));        grp_But_F6.setForeground(new java.awt.Color(0, 204, 51));        grp_But_F6.setAction(null);        grp_But_F6.setContentAreaFilled(false);        grp_But_F6.setFocusPainted(false);        grp_But_F6.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_F6.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_F6.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_F6.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_F6.setRequestFocusEnabled(false);        grp_But_F6.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseExited(java.awt.event.MouseEvent evt) {                mouseOutButtonEvent(evt);            }            public void mouseEntered(java.awt.event.MouseEvent evt) {                mouseOverButtonEvent(evt);            }        });        jPanel1.add(grp_But_F6);        grp_But_F7.setFont(new java.awt.Font("Tahoma", 1, 10));        grp_But_F7.setForeground(new java.awt.Color(0, 0, 204));        grp_But_F7.setAction(null);        grp_But_F7.setContentAreaFilled(false);        grp_But_F7.setFocusPainted(false);        grp_But_F7.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_F7.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_F7.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_F7.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_F7.setRequestFocusEnabled(false);        grp_But_F7.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseExited(java.awt.event.MouseEvent evt) {                mouseOutButtonEvent(evt);            }            public void mouseEntered(java.awt.event.MouseEvent evt) {                mouseOverButtonEvent(evt);            }        });        jPanel1.add(grp_But_F7);        grp_But_F8.setFont(new java.awt.Font("Tahoma", 1, 10));        grp_But_F8.setForeground(new java.awt.Color(0, 0, 204));        grp_But_F8.setAction(null);        grp_But_F8.setContentAreaFilled(false);        grp_But_F8.setFocusPainted(false);        grp_But_F8.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_F8.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_F8.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_F8.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_F8.setRequestFocusEnabled(false);        grp_But_F8.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseExited(java.awt.event.MouseEvent evt) {                mouseOutButtonEvent(evt);            }            public void mouseEntered(java.awt.event.MouseEvent evt) {                mouseOverButtonEvent(evt);            }        });        jPanel1.add(grp_But_F8);        grp_But_F9.setAction(null);        grp_But_F9.setFont(new java.awt.Font("Tahoma", 1, 10));        grp_But_F9.setForeground(new java.awt.Color(0, 0, 204));        grp_But_F9.setContentAreaFilled(false);        grp_But_F9.setFocusPainted(false);        grp_But_F9.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_F9.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_F9.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_F9.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_F9.setRequestFocusEnabled(false);        grp_But_F9.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseExited(java.awt.event.MouseEvent evt) {                mouseOutButtonEvent(evt);            }            public void mouseEntered(java.awt.event.MouseEvent evt) {                mouseOverButtonEvent(evt);            }        });        jPanel1.add(grp_But_F9);        grp_But_F10.setFont(new java.awt.Font("Tahoma", 1, 10));        grp_But_F10.setForeground(new java.awt.Color(0, 0, 204));        grp_But_F10.setAction(null);        grp_But_F10.setContentAreaFilled(false);        grp_But_F10.setFocusPainted(false);        grp_But_F10.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_F10.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_F10.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_F10.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_F10.setRequestFocusEnabled(false);        grp_But_F10.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseExited(java.awt.event.MouseEvent evt) {                mouseOutButtonEvent(evt);            }            public void mouseEntered(java.awt.event.MouseEvent evt) {                mouseOverButtonEvent(evt);            }        });        jPanel1.add(grp_But_F10);        grp_But_F11.setFont(new java.awt.Font("Tahoma", 1, 10));        grp_But_F11.setForeground(new java.awt.Color(0, 0, 204));        grp_But_F11.setAction(null);        grp_But_F11.setContentAreaFilled(false);        grp_But_F11.setFocusPainted(false);        grp_But_F11.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_F11.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_F11.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_F11.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_F11.setRequestFocusEnabled(false);        grp_But_F11.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseExited(java.awt.event.MouseEvent evt) {                mouseOutButtonEvent(evt);            }            public void mouseEntered(java.awt.event.MouseEvent evt) {                mouseOverButtonEvent(evt);            }        });        jPanel1.add(grp_But_F11);        grp_But_F12.setFont(new java.awt.Font("Tahoma", 1, 10));        grp_But_F12.setForeground(new java.awt.Color(0, 0, 204));        grp_But_F12.setAction(null);        grp_But_F12.setContentAreaFilled(false);        grp_But_F12.setFocusPainted(false);        grp_But_F12.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_F12.setMaximumSize(new java.awt.Dimension(30, 30));        grp_But_F12.setMinimumSize(new java.awt.Dimension(30, 30));        grp_But_F12.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_F12.setRequestFocusEnabled(false);        grp_But_F12.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseExited(java.awt.event.MouseEvent evt) {                mouseOutButtonEvent(evt);            }            public void mouseEntered(java.awt.event.MouseEvent evt) {                mouseOverButtonEvent(evt);            }        });        jPanel1.add(grp_But_F12);        grp_But_Up.setBorderPainted(false);        grp_But_Up.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_Up.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                grp_But_UpActionPerformed(evt);            }        });        jPanel1.add(grp_But_Up);        grp_But_Down.setText("jButton1");        grp_But_Down.setPreferredSize(new java.awt.Dimension(30, 30));        grp_But_Down.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                grp_But_DownActionPerformed(evt);            }        });        jPanel1.add(grp_But_Down);        jToolBar1.add(jPanel1);        add(jToolBar1);    }//GEN-END:initComponents    private void grp_But_DownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_But_DownActionPerformed        // TODO add your handling code here:    }//GEN-LAST:event_grp_But_DownActionPerformed    private void grp_But_UpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_But_UpActionPerformed        // TODO add your handling code here:    }//GEN-LAST:event_grp_But_UpActionPerformed    private void grp_But_F1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grp_But_F1MouseClicked        // TODO add your handling code here:    }//GEN-LAST:event_grp_But_F1MouseClicked    private void postInit() {        grp_But_F1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));        grp_But_F2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));        grp_But_F3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));        grp_But_F4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));        grp_But_F5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));        grp_But_F6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));        grp_But_F7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));        grp_But_F8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));        grp_But_F9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));        grp_But_F10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));        grp_But_F11.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));        grp_But_F12.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));    }    private void mouseOutButtonEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseOutButtonEvent    }//GEN-LAST:event_mouseOutButtonEvent    private void mouseOverButtonEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseOverButtonEvent        // Add your handling code here:    }//GEN-LAST:event_mouseOverButtonEvent    private void setButtonState() {        boolean en;        for (int i = 0; i < actionEnabled.length; i++) {            en = (actionEnabled[i] == 0) ? false : true;            buttonList[i].setEnabled(en);        }    }    /**     * Méthode de définition des actions de la ToolBarre     * <p/>     * <p/>     * appelé dans le contructeur     */    boolean m_locked;    private void defineAction() {        tbList = new ToolBarAction[12];        if (this.actionEnabled != null && this.actionEnabled.length > 0) {            for (int ae = 0; ae < actionEnabled.length; ae++) {                if (actionEnabled[ae] == 0) {                    tbList[ae] = null;                } else {//                          nom touche    Action                    tbList[ae] = new ToolBarAction(nmList[ae], actList[ae], this, currentUser);                }            }            imap = getInputMap(javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW);            for (int i = 0; i < actualEnabledKeystroke.size(); i++) {                javax.swing.KeyStroke keyR = (javax.swing.KeyStroke) actualEnabledKeystroke.get(i);                imap.remove(keyR);                actualEnabledKeystroke.remove(i);            }            for (int imp = 0; imp < tbList.length; imp++) {                javax.swing.KeyStroke keyP = javax.swing.KeyStroke.getKeyStroke(nmList[imp]);                imap.put(keyP, nmList[imp]);                actualEnabledKeystroke.add(keyP);            }            amap = getActionMap();            for (int amp = 0; amp < tbList.length; amp++) {                amap.put(nmList[amp], tbList[amp]);            }            for (int bt = 0; bt < tbList.length; bt++) {                if (tbList[bt] != null) {                    buttonList[bt].setAction(tbList[bt]);                    buttonList[bt].setEnabled(true);                    buttonList[bt].setForeground(buttonColors.get(bt));                } else {                    buttonList[bt].setText(nmList[bt]);                    buttonList[bt].setActionCommand(nmList[bt]);                    buttonList[bt].setEnabled(false);                    buttonList[bt].setForeground(Color.LIGHT_GRAY);                }            }        }    }    /**     * Remet les actions à 0     */    public void setActionToDefault() {        this.actionEnabled = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};        defineAction();    }    /**     * Indexed getter for property actionEnabled.     *     * @param index Index of the property.     * @return Value of the property at <CODE>index</CODE>.     */    public int getActionEnabled(int index) {        return actionEnabled[index];    }    /**     * Getter for property actionEnabled.     *     * @return Value of property actionEnabled.     */    public int[] getActionEnabled() {        return actionEnabled;    }    /**     * Indexed setter for property actionEnabled.     *     * @param index         Index of the property.     * @param actionEnabled New value of the property at <CODE>index</CODE>.     */    public void setActionEnabled(int index, int actionEnabled) {        this.actionEnabled[index] = actionEnabled;    }    /**     * Setter for property actionEnabled.     *     * @param actionEn tableau contenant la liste des actions à     *                 <p/>     *                 <p/>     *                 enclencher     */    public void setActionEnabled(int[] actionEn) {        this.actionEnabled = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};        int nbr = 0;        for (int i = 0; i < actionEn.length; i++) {            nbr = actionEn[i] - 1;            if (actionEn[i] != ActionToolBar.DO_NOTHING) this.actionEnabled[nbr] = 1;        }        defineAction();    }    public void setActionEnabled2(int[] actionEn) {        this.actionEnabled = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};        int nbr = 0;        for (int i = 0; i < actionEn.length; i++) {            nbr = actionEn[i] - 1;            if (actionEn[i] != ActionToolBar.DO_NOTHING) this.actionEnabled[nbr] = 1;        }        defineAction();    }    public void setActionEnabled(int[] actionEn, JPanel focuseWindow) {        this.actionEnabled = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};        int nbr = 0;        for (int i = 0; i < actionEn.length; i++) {            nbr = actionEn[i] - 1;            if (actionEn[i] != ActionToolBar.DO_NOTHING) this.actionEnabled[nbr] = 1;        }        tmp = focuseWindow;        defineAction();    }    /**     * méthode pour reloader d'ancienne action dans la toolbar     *     * @param actionEn contient les actions sauvegardée et qui doivent     *                 <p/>     *                 <p/>     *                 être réinitialisé dans la toolBar.     */    public void reloadActionEnabled(int[] actionEn) {        this.actionEnabled = actionEn;        defineAction();    }    /**     * Getter for property tbComposer.     *     * @return Value of property tbComposer.     */    public srcastra.astra.gui.components.actions.actionToolBar.ToolBarComposer getTbComposer() {        System.out.println("DEMANDE D'UN TB");        return this.tbComposer;    }    /**     * Setter for property tbComposer.     *     * @param tbComposer New value of property tbComposer.     */    /*  public void setTbComposer(srcastra.astra.gui.components.actions.actionToolBar.ToolBarComposer tbComposer,JTable generiqueTable) {        this.tbComposer = tbComposer;        System.out.println("REGISTRATION D'UN TB");        m_generiqueTable=generiqueTable;        // setActionEnabled(tbComposer.getDefaultActionToolBarMask());        // defineAction();    }*/    public void setTbComposer(srcastra.astra.gui.components.actions.actionToolBar.ToolBarComposer tbComposer) {        this.tbComposer = tbComposer;        // m_generiqueTable=(javax.swing.JTable)tbComposer.m_getGeneriqueTable();        System.out.println("REGISTRATION D'UN TB");        // setActionEnabled(tbComposer.getDefaultActionToolBarMask());        // defineAction();    }    /**     * Getter for property tmp.     *     * @return Value of property tmp.     */    public JPanel getTmp() {        return tmp;    }    /**     * Setter for property tmp.     *     * @param tmp New value of property tmp.     */    public void setTmp(JPanel tmp) {        this.tmp = tmp;    }    public void keyPressed(java.awt.event.KeyEvent keyEvent) {        int direction = keyEvent.getKeyCode();        if (tbComposer.m_getGeneriqueTable() != null) {            if (((JTable) tbComposer.m_getGeneriqueTable()).getRowCount() > 0) {                System.out.println("ok j'encode");                // System.out.println("ATENTION MON NOMBRE DE LIGNES TOTALES EST ========> " + m_generiqueTable.getRowCount());                int cur = ((JTable) tbComposer.m_getGeneriqueTable()).getSelectedRow();                int tot = ((JTable) tbComposer.m_getGeneriqueTable()).getRowCount();                if (direction == KeyEvent.VK_DOWN && (cur < tot - 1))                    ((JTable) tbComposer.m_getGeneriqueTable()).changeSelection(cur + 1, 0, false, false);                if (direction == KeyEvent.VK_UP && (cur > 0))                    ((JTable) tbComposer.m_getGeneriqueTable()).changeSelection(cur - 1, 0, false, false);            } else System.out.println("table vide");        } else System.out.println("table null");    }    public void keyReleased(java.awt.event.KeyEvent keyEvent) {    }    public void keyTyped(java.awt.event.KeyEvent keyEvent) {    }    /**     * Getter for property insert.     *     * @return Value of property insert.     */    public boolean isInsert() {        return insert;    }    /**     * Setter for property insert.     *     * @param insert New value of property insert.     */    public void setInsert(boolean insert) {        this.insert = insert;    }    /**     * Getter for property m_locked.     *     * @return Value of property m_locked.     */    public boolean isM_locked() {        return m_locked;    }    /**     * Setter for property m_locked.     *     * @param m_locked New value of property m_locked.     */    public void setM_locked(boolean m_locked) {        this.m_locked = m_locked;    }    private ToolBarComposer tbComposer;    private javax.swing.InputMap imap;    private javax.swing.ActionMap amap;    private Loginusers_T currentUser;    private JPanel tmp;    private JTable m_generiqueTable;    boolean insert;    // Variables declaration - do not modify//GEN-BEGIN:variables    private javax.swing.JButton grp_But_Down;    private javax.swing.JButton grp_But_F1;    private javax.swing.JButton grp_But_F10;    private javax.swing.JButton grp_But_F11;    private javax.swing.JButton grp_But_F12;    private javax.swing.JButton grp_But_F2;    private javax.swing.JButton grp_But_F3;    private javax.swing.JButton grp_But_F4;    private javax.swing.JButton grp_But_F5;    private javax.swing.JButton grp_But_F6;    private javax.swing.JButton grp_But_F7;    private javax.swing.JButton grp_But_F8;    private javax.swing.JButton grp_But_F9;    private javax.swing.JButton grp_But_Up;    private javax.swing.JPanel jPanel1;    private javax.swing.JToolBar jToolBar1;    // End of variables declaration//GEN-END:variables}