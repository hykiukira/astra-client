/* * InsertCombo.java * Created on 19 avril 2002, 10:09 */package srcastra.astra.gui.components.InsertCombo;import srcastra.astra.sys.rmi.astrainterface;import srcastra.astra.gui.sys.ErreurScreenLibrary;import srcastra.astra.gui.modules.InternScreenModule;import java.util.ArrayList;import srcastra.astra.sys.rmi.Exception.*;import srcastra.astra.sys.Logger;// listenersimport javax.swing.event.EventListenerList;import java.awt.event.ActionListener;import java.awt.event.ActionEvent;import java.util.*;import srcastra.astra.gui.sys.comparator.*;/** * @author Sébastien */public class InsertCombo extends javax.swing.JPanel implements java.awt.event.KeyListener, java.awt.event.FocusListener {    private ChargeObject thr = null;    /**     * Creates new form InsertCombo     */    public InsertCombo() {        initComponents();        //grp_Table_affiche.se        this.grp_TField_rechercher.addKeyListener(this);        manip = new ManipuleTable(this);        grp_Table_affiche.getTableHeader().setReorderingAllowed(false);        grp_Table_affiche.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);    }    public InsertCombo(String[] titreColonne, int nbrColonneToHide) {        init2(titreColonne);        this.nbrColonneToHide = nbrColonneToHide;        initComponents();        init3();        //grp_Table_affiche.se        this.grp_TField_rechercher.addKeyListener(this);        manip = new ManipuleTable(this);        grp_Pan_north.addFocusListener(this);        grp_CBox_Generique1.addFocusListener(this);        grp_Cbox_Generique2.addFocusListener(this);    }    public InsertCombo(String[] titreColonne, int nbrColonneToHide, srcastra.astra.sys.classetransfert.Loginusers_T currentUser) {        this.currentUser = currentUser;        init2(titreColonne);        this.nbrColonneToHide = nbrColonneToHide;        initComponents();        init3();        /* initialisation de la liste des listeners */        m_listenerList = new EventListenerList();        //grp_Table_affiche.se        this.grp_TField_rechercher.addKeyListener(this);        manip = new ManipuleTable(this);        grp_Pan_north.addFocusListener(this);        grp_CBox_Generique1.addFocusListener(this);        grp_Cbox_Generique2.addFocusListener(this);    }    private void init2(String[] titreColonne) {        this.titreColonne = titreColonne;        config1 = titreColonne[1];        config2 = titreColonne[2];        setItemToFocus(-1);    }    public void setTitle(String[] title) {        config1 = title[1];        config2 = title[2];        grp_CBox_Generique1.setText(config1);        grp_Cbox_Generique2.setText(config2);    }    private void init3() {        grp_CBox_Generique1.setText(config1);        grp_Cbox_Generique2.setText(config2);        grp_Table_affiche.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);    }    /**     * This method is called from within the constructor to     * <p/>     * <p/>     * initialize the form.     * <p/>     * <p/>     * WARNING: Do NOT modify this code. The content of this method is     * <p/>     * <p/>     * always regenerated by the Form Editor.     */    private void initComponents() {//GEN-BEGIN:initComponents        buttonGroup1 = new javax.swing.ButtonGroup();        grp_Pan_north = new javax.swing.JPanel();        grp_Pan_recherche = new javax.swing.JPanel();        grp_Label_Generique1 = new javax.swing.JLabel();        grp_TField_rechercher = new javax.swing.JTextField();        grp_Label_Generique2 = new javax.swing.JLabel();        grp_CBox_Generique1 = new javax.swing.JRadioButton();        grp_Cbox_Generique2 = new javax.swing.JRadioButton();        grp_Pan_Center = new javax.swing.JPanel();        panelDownload = new javax.swing.JPanel();        jProgressReception = new javax.swing.JProgressBar();        grp_ScrollP_affichScroll = new javax.swing.JScrollPane();        grp_Table_affiche = new javax.swing.JTable();        jPanel6 = new javax.swing.JPanel();        grp_But_premierElement = new javax.swing.JButton();        grp_But_precedent = new javax.swing.JButton();        grp_But_suivant = new javax.swing.JButton();        grp_But_dernier = new javax.swing.JButton();        setLayout(new java.awt.BorderLayout());        setPreferredSize(new java.awt.Dimension(453, 250));        addKeyListener(new java.awt.event.KeyAdapter() {            public void keyPressed(java.awt.event.KeyEvent evt) {                formKeyPressed(evt);            }        });        grp_Pan_north.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));        grp_Pan_north.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseClicked(java.awt.event.MouseEvent evt) {                grp_Pan_northMouseClicked(evt);            }        });        grp_Label_Generique1.setFont(new java.awt.Font("Tahoma", 0, 10));        grp_Label_Generique1.setText(java.util.ResourceBundle.getBundle("srcastra.astra.locale.Composants", currentUser.getLangage()).getString("InsertCombo_rechercher"));        grp_Pan_recherche.add(grp_Label_Generique1);        grp_TField_rechercher.setFont(new java.awt.Font("Tahoma", 0, 10));        grp_TField_rechercher.setDisabledTextColor(new java.awt.Color(0, 0, 0));        grp_TField_rechercher.setPreferredSize(new java.awt.Dimension(100, 18));        new srcastra.astra.gui.components.fx.JComponentBorderFx(grp_TField_rechercher);        grp_Pan_recherche.add(grp_TField_rechercher);        grp_Label_Generique2.setFont(new java.awt.Font("Tahoma", 0, 10));        grp_Label_Generique2.setText(java.util.ResourceBundle.getBundle("srcastra.astra.locale.Composants", currentUser.getLangage()).getString("InsertCombo_par"));        grp_Pan_recherche.add(grp_Label_Generique2);        grp_CBox_Generique1.setFont(new java.awt.Font("Tahoma", 0, 10));        grp_CBox_Generique1.setSelected(true);        buttonGroup1.add(grp_CBox_Generique1);        grp_CBox_Generique1.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                grp_CBox_Generique1ActionPerformed(evt);            }        });        grp_Pan_recherche.add(grp_CBox_Generique1);        grp_Cbox_Generique2.setFont(new java.awt.Font("Tahoma", 0, 10));        buttonGroup1.add(grp_Cbox_Generique2);        grp_Cbox_Generique2.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                grp_Cbox_Generique2ActionPerformed(evt);            }        });        grp_Pan_recherche.add(grp_Cbox_Generique2);        grp_Pan_north.add(grp_Pan_recherche);        add(grp_Pan_north, java.awt.BorderLayout.NORTH);        grp_Pan_Center.setLayout(new java.awt.CardLayout());        grp_Pan_Center.setPreferredSize(new java.awt.Dimension(453, 200));        panelDownload.setLayout(new java.awt.GridBagLayout());        jProgressReception.setForeground((java.awt.Color) javax.swing.UIManager.getDefaults().get("Button.highlight"));        jProgressReception.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, null, java.awt.Color.black, java.awt.Color.gray));        jProgressReception.setIndeterminate(true);        jProgressReception.setMinimumSize(new java.awt.Dimension(200, 20));        jProgressReception.setPreferredSize(new java.awt.Dimension(450, 20));        jProgressReception.setString("R\u00e9ception d'informations en cours");        jProgressReception.setStringPainted(true);        jProgressReception.setAutoscrolls(true);        jProgressReception.setEnabled(false);        panelDownload.add(jProgressReception, new java.awt.GridBagConstraints());        grp_Pan_Center.add(panelDownload, "card3");        grp_ScrollP_affichScroll.setMinimumSize(new java.awt.Dimension(453, 200));        grp_ScrollP_affichScroll.setPreferredSize(new java.awt.Dimension(453, 165));        grp_Table_affiche.setFont(new java.awt.Font("Tahoma", 0, 10));        grp_Table_affiche.setSelectionForeground(new java.awt.Color(0, 102, 0));        grp_Table_affiche.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseClicked(java.awt.event.MouseEvent evt) {                grp_Table_afficheMouseClicked(evt);            }        });        grp_ScrollP_affichScroll.setViewportView(grp_Table_affiche);        grp_Pan_Center.add(grp_ScrollP_affichScroll, "card2");        add(grp_Pan_Center, java.awt.BorderLayout.CENTER);        jPanel6.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseClicked(java.awt.event.MouseEvent evt) {                jPanel6MouseClicked(evt);            }        });        grp_But_premierElement.setIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/button/previousArrow.gif")));        grp_But_premierElement.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_premierElement.setRequestFocusEnabled(false);        grp_But_premierElement.addMouseListener(new srcastra.astra.gui.components.RollButtonListener(grp_But_premierElement));        grp_But_premierElement.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                grp_But_premierElementActionPerformed(evt);            }        });        jPanel6.add(grp_But_premierElement);        grp_But_precedent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/button/previousToFirstArrow.gif")));        grp_But_precedent.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_precedent.setRequestFocusEnabled(false);        grp_But_precedent.addMouseListener(new srcastra.astra.gui.components.RollButtonListener(grp_But_precedent));        grp_But_precedent.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                grp_But_precedentActionPerformed(evt);            }        });        jPanel6.add(grp_But_precedent);        grp_But_suivant.setIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/button/nextToLastArrow.gif")));        grp_But_suivant.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_suivant.setRequestFocusEnabled(false);        grp_But_suivant.addMouseListener(new srcastra.astra.gui.components.RollButtonListener(grp_But_suivant));        grp_But_suivant.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                grp_But_suivantActionPerformed(evt);            }        });        jPanel6.add(grp_But_suivant);        grp_But_dernier.setIcon(new javax.swing.ImageIcon(getClass().getResource("/srcastra/astra/gui/img/button/nextArrow.gif")));        grp_But_dernier.setMargin(new java.awt.Insets(2, 2, 2, 2));        grp_But_dernier.setRequestFocusEnabled(false);        grp_But_dernier.addMouseListener(new srcastra.astra.gui.components.RollButtonListener(grp_But_dernier));        grp_But_dernier.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                grp_But_dernierActionPerformed(evt);            }        });        jPanel6.add(grp_But_dernier);        add(jPanel6, java.awt.BorderLayout.SOUTH);    }//GEN-END:initComponents    private void jPanel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel6MouseClicked        grp_TField_rechercher.requestFocus();        // Add your handling code here:    }//GEN-LAST:event_jPanel6MouseClicked    private void grp_Pan_northMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grp_Pan_northMouseClicked        grp_TField_rechercher.requestFocus();        // Add your handling code here:    }//GEN-LAST:event_grp_Pan_northMouseClicked    private void grp_CBox_Generique1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_CBox_Generique1ActionPerformed        if (getDataLenght() != 0)        {            changeColonne(1);            chargeData(1);            sortTable(1);        }// Add your handling code here:    }//GEN-LAST:event_grp_CBox_Generique1ActionPerformed    private void grp_Cbox_Generique2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_Cbox_Generique2ActionPerformed        if (getDataLenght() != 0)        {            setData(this.data);            sortTable(2);            resetTable();            //changeColonne(2);            // chargeData(2);        }// Add your handling code here:    }//GEN-LAST:event_grp_Cbox_Generique2ActionPerformed    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed        scrollTo(evt.getKeyCode());        if (evt.getKeyCode() == evt.VK_ENTER) {            SelectionObj(1, this.typeDeCombo);        }    }//GEN-LAST:event_formKeyPressed    private void grp_But_dernierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_But_dernierActionPerformed        int tmpNbrLigne = grp_Table_affiche.getRowCount();        grp_Table_affiche.setRowSelectionInterval(tmpNbrLigne - 1, tmpNbrLigne - 1);        grp_Table_affiche.scrollRectToVisible(new java.awt.Rectangle(0, grp_Table_affiche.getRowHeight() * (tmpNbrLigne - 1), 20, grp_Table_affiche.getRowHeight()));        updateButtons();        grp_TField_rechercher.requestFocus();    }//GEN-LAST:event_grp_But_dernierActionPerformed    private void grp_But_suivantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_But_suivantActionPerformed        int tmpNbrLigne = grp_Table_affiche.getRowCount();        int tmpLigneCourrante = grp_Table_affiche.getSelectedRow();        if (tmpLigneCourrante != (tmpNbrLigne - 1)) {            grp_Table_affiche.setRowSelectionInterval(tmpLigneCourrante + 1, tmpLigneCourrante + 1);            grp_Table_affiche.scrollRectToVisible(new java.awt.Rectangle(0, grp_Table_affiche.getRowHeight() * (tmpLigneCourrante + 1), 20, grp_Table_affiche.getRowHeight()));        }        updateButtons();        grp_TField_rechercher.requestFocus();    }//GEN-LAST:event_grp_But_suivantActionPerformed    private void grp_But_precedentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_But_precedentActionPerformed        int tmpNbrLigne = grp_Table_affiche.getRowCount();        int tmpLigneCourrante = grp_Table_affiche.getSelectedRow();        if (tmpLigneCourrante != 0) {            grp_Table_affiche.setRowSelectionInterval(tmpLigneCourrante - 1, tmpLigneCourrante - 1);            grp_Table_affiche.scrollRectToVisible(new java.awt.Rectangle(0, grp_Table_affiche.getRowHeight() * (tmpLigneCourrante + 1), 20, grp_Table_affiche.getRowHeight()));        }        updateButtons();        grp_TField_rechercher.requestFocus();    }//GEN-LAST:event_grp_But_precedentActionPerformed    private void grp_But_premierElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_But_premierElementActionPerformed        grp_Table_affiche.setRowSelectionInterval(0, 0);        grp_Table_affiche.scrollRectToVisible(new java.awt.Rectangle(0, grp_Table_affiche.getRowHeight() * 0, 20, grp_Table_affiche.getRowHeight()));        updateButtons();        grp_TField_rechercher.requestFocus();    }//GEN-LAST:event_grp_But_premierElementActionPerformed    private void grp_Table_afficheMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grp_Table_afficheMouseClicked        SelectionObj(1, this.typeDeCombo);        updateButtons();        grp_TField_rechercher.requestFocus();    }//GEN-LAST:event_grp_Table_afficheMouseClicked    public void SelectionObj2() {        SelectionObj(1, this.typeDeCombo);    }    public void chargeData(int cas) {        testChargeData(cas);    }    private boolean testChargeData(int cas) {        synchronized (this) {            if ((thr == null) || (thr.isFinnished())) {                thr = new ChargeObject(cas);                thr.start();                return true;            }            return false;        }    }    private void sortTable(int col) {        //srcastra.astra.gui.sys.utils.CursorChange.changeCursor(changeLocation, cursor, , this);        Collections.sort(this.data, new ListeSelectorComparaTor(col, true));        grp_Table_affiche.getColumnModel().moveColumn(2, 1);        //srcastra.astra.gui.sys.utils.CursorChange.changeCursor(changeLocation, cursor, superOwner, this);    }    public void setEnabled(boolean enabled) {        super.setEnabled(enabled);        grp_TField_rechercher.setEnabled(enabled);        grp_CBox_Generique1.setEnabled(enabled);        grp_Cbox_Generique2.setEnabled(enabled);        grp_ScrollP_affichScroll.setEnabled(enabled);        grp_Table_affiche.setEnabled(enabled);        adaptBackgroundColor(enabled);        // boutons        if (!enabled) {            grp_But_dernier.setEnabled(enabled);            grp_But_precedent.setEnabled(enabled);            grp_But_premierElement.setEnabled(enabled);            grp_But_suivant.setEnabled(enabled);        } else updateButtons();    }    private void adaptBackgroundColor(boolean enabled) {        java.awt.Color background = enabled ? java.awt.Color.white : java.awt.Color.lightGray;        grp_Table_affiche.setBackground(background);        grp_TField_rechercher.setBackground(background);    }    /**     * Getter for property serveur.     *     * @return Value of property serveur.     */    public srcastra.astra.sys.rmi.astrainterface getServeur() {        return serveur;    }    /**     * Setter for property serveur.     *     * @param serveur New value of property serveur.     */    public void setServeur(srcastra.astra.sys.rmi.astrainterface serveur) {        this.serveur = serveur;    }    /**     * Getter for property currentUser.     *     * @return Value of property currentUser.     */    public srcastra.astra.sys.classetransfert.Loginusers_T getCurrentUser() {        return currentUser;    }    /**     * Setter for property currentUser.     *     * @param currentUser New value of property currentUser.     */    public void setCurrentUser(srcastra.astra.sys.classetransfert.Loginusers_T currentUser) {        this.currentUser = currentUser;    }    public void setFocusRecherche() {        grp_TField_rechercher.requestFocus();    }    /**     * Setter for property data.     *     * @param data New value of property data.     */    public void setData(java.util.ArrayList data) {        this.data = data;        grp_Table_affiche = new javax.swing.JTable();        grp_Table_affiche.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseClicked(java.awt.event.MouseEvent evt) {                grp_Table_afficheMouseClicked(evt);            }        });        grp_ScrollP_affichScroll.setViewportView(grp_Table_affiche);        if (!this.data.equals(null) && this.data.size() > 0) {            grp_Table_affiche.setModel(new TableModel());            grp_Table_affiche.setRequestFocusEnabled(true);        }    }    /**     * Getter for property typeDeCombo.     *     * @return Value of property typeDeCombo.     */    public int getTypeDeCombo() {        return typeDeCombo;    }    /**     * Setter for property typeDeCombo.     *     * @param typeDeCombo New value of property typeDeCombo.     */    public void setTypeDeCombo(int typeDeCombo) {        this.typeDeCombo = typeDeCombo;    }    /**     * Getter for property extCleUnik.     *     * @return Value of property extCleUnik.     */    public int getExtCleUnik() {        return extCleUnik;    }    /**     * Setter for property extCleUnik.     *     * @param extCleUnik New value of property extCleUnik.     */    public void setExtCleUnik(int extCleUnik) {        this.extCleUnik = extCleUnik;    }    private Object SelectionDefaultObj(/*int cas, int constCombo*/) {        Object tmpobj = new Object();        String tmpstr;        Object[] tmpobj2 = (Object[]) data.get(0);        // grp_Table_affiche.getValueAt(grp_Table_affiche.getSelectedRow(),0);        tmpstr = tmpobj2[0].toString();        this.id = Integer.parseInt(tmpstr);        if (this.id != 0) {            try {                /* temporaire ------------------------------------------------------- */                if (this.typeDeCombo == astrainterface.COMBO_CLIENT) {                    try {                        tmpobj = new srcastra.astra.sys.classetransfert.clients.Sous_Client_T().selectObject(serveur, currentUser, this.id);                    } catch (ServeurSqlFailure se)                    {                        ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se);                    }                    catch (java.rmi.RemoteException re)                    {                        ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);                    }                    catch (Exception e)                    {                        ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);                    }                } else if (this.typeDeCombo == astrainterface.COMBO_CLIENT_ADRESSES) {                    tmpobj = new srcastra.astra.sys.classetransfert.clients.ClientsMultiAdresses_T().selectObject(serveur, currentUser, this.id);                } else if (this.typeDeCombo == astrainterface.COMBO_CLIENT_REMISES) {                    tmpobj = new srcastra.astra.sys.classetransfert.clients.ClientsRemises_T().selectObject(serveur, currentUser, this.id);                } else {                    tmpobj = this.serveur.ChargeObjectPopup(this.currentUser.getUrlmcleunik(), this.currentUser.getUrcleunik(), this.id, 1, typeDeCombo);                }                /*---------------------------------------------------------------------*/            }            catch (java.rmi.RemoteException re) {                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);            }            catch (Exception e) {                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);            }            // updateFieldsIntoParent(tmpobj);        }        return tmpobj;    }    public void setValuefromParent(int cas, int constCombo)    {        this.cas = cas;        this.typeDeCombo = constCombo;    }    public void SelectionObj(int cas, int constCombo) {        Object tmpobj = new Object();        String tmpstr;        System.out.println("Appel de get selected row: " + grp_Table_affiche.getSelectedRow());        System.out.flush();        Object[] tmpobj2 = (Object[]) data.get(grp_Table_affiche.getSelectedRow());        tmpstr = tmpobj2[0].toString();        this.id = Integer.parseInt(tmpstr);        if (this.id != 0) {            try {                /* temporaire ------------------------------------------------------- */                if (this.typeDeCombo == astrainterface.COMBO_CLIENT) {                    tmpobj = new srcastra.astra.sys.classetransfert.clients.Sous_Client_T().selectObject(serveur, currentUser, this.id);                } else if (this.typeDeCombo == astrainterface.COMBO_CLIENT_ADRESSES) {                    tmpobj = new srcastra.astra.sys.classetransfert.clients.ClientsMultiAdresses_T().selectObject(serveur, currentUser, this.id);                } else if (this.typeDeCombo == astrainterface.COMBO_CLIENT_REMISES) {                    tmpobj = new srcastra.astra.sys.classetransfert.clients.ClientsRemises_T().selectObject(serveur, currentUser, this.id);                } else {                    tmpobj = this.serveur.ChargeObjectPopup(this.currentUser.getUrlmcleunik(), this.currentUser.getUrcleunik(), this.id, 1, typeDeCombo);                }                /*---------------------------------------------------------------------*/            }            catch (ServeurSqlFailure se)            {                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se);            }            catch (java.rmi.RemoteException re) {                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);            }            catch (Exception e) {                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);            }            updateFieldsIntoParent(tmpobj);        }        updateButtons();    }    public Object SelectionObj() {        Object tmpobj = new Object();        String tmpstr;        System.out.println("Appel de get selected row: " + grp_Table_affiche.getSelectedRow());        System.out.flush();        Object[] tmpobj2 = (Object[]) data.get(grp_Table_affiche.getSelectedRow());        tmpstr = tmpobj2[0].toString();        this.id = Integer.parseInt(tmpstr);        Logger.getDefaultLogger().log(Logger.LOG_DEBUG, "id at the position is " + id);        if (this.id != 0) {            try {                /* temporaire ------------------------------------------------------- */                if (this.typeDeCombo == astrainterface.COMBO_CLIENT) {                    tmpobj = new srcastra.astra.sys.classetransfert.clients.Sous_Client_T().selectObject(serveur, currentUser, this.id);                } else if (this.typeDeCombo == astrainterface.COMBO_CLIENT_ADRESSES) {                    tmpobj = new srcastra.astra.sys.classetransfert.clients.ClientsMultiAdresses_T().selectObject(serveur, currentUser, this.id);                } else if (this.typeDeCombo == astrainterface.COMBO_CLIENT_REMISES) {                    tmpobj = new srcastra.astra.sys.classetransfert.clients.ClientsRemises_T().selectObject(serveur, currentUser, this.id);                } else {                    tmpobj = this.serveur.ChargeObjectPopup(this.currentUser.getUrlmcleunik(), this.currentUser.getUrcleunik(), this.id, 1, typeDeCombo);                }                /*---------------------------------------------------------------------*/            }            catch (ServeurSqlFailure se)            {                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se);            }            catch (java.rmi.RemoteException re) {                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);            }            catch (Exception e) {                ErreurScreenLibrary.displayErreur(this, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);            }            // updateFieldsIntoParent(tmpobj);        }        return tmpobj;        //updateButtons();    }    private void updateFieldsIntoParent(Object tmpobj) {        parent.updateAllFields(tmpobj);    }    /**     * Getter for property parent.     *     * @return Value of property parent.     */    public srcastra.astra.gui.modules.InternScreenModule getIParent() {        return parent;    }    /**     * Setter for property parent.     *     * @param parent New value of property parent.     */    public void setIParent(srcastra.astra.gui.modules.InternScreenModule parent) {        this.parent = parent;    }    public void keyPressed(java.awt.event.KeyEvent keyEvent) {        scrollTo(keyEvent.getKeyCode());        int i;        switch (keyEvent.getKeyCode())        {            case java.awt.event.KeyEvent.VK_PAGE_UP:                i = grp_Table_affiche.getSelectedRow() - 20;                if (i < 0) i = 0;                grp_Table_affiche.changeSelection(                        i, 1, false, false                );                updateButtons();                break;            case java.awt.event.KeyEvent.VK_PAGE_DOWN:                i = grp_Table_affiche.getSelectedRow() + 20;                if (i >= grp_Table_affiche.getRowCount())                    i = grp_Table_affiche.getRowCount() - 1;                grp_Table_affiche.changeSelection(                        i, 1, false, false                );                updateButtons();                break;            case java.awt.event.KeyEvent.VK_HOME:                grp_Table_affiche.changeSelection(0, 1, false, false);                updateButtons();                break;            case java.awt.event.KeyEvent.VK_END:                grp_Table_affiche.changeSelection(                        grp_Table_affiche.getRowCount() - 1, 1, false, false);                updateButtons();                break;            case java.awt.event.KeyEvent.VK_ENTER:                SelectionObj(1, this.typeDeCombo);                break;        }    }    public void keyReleased(java.awt.event.KeyEvent keyEvent) {        int tmpvalue;        //String tmpTransform=grp_TField_rechercher.getText().toUpperCase();        //grp_TField_rechercher.setText(tmpTransform);        tmpvalue = manip.checkKeyCode(keyEvent);        if (tmpvalue != 1)            manip.combo(keyEvent.getKeyCode());        updateButtons();    }    public void keyTyped(java.awt.event.KeyEvent keyEvent) {    }    /**     * Classe TableModel     * <p/>     * <p/>     * -------------------     * <p/>     * <p/>     * AbstractTableModel pour la jTable     */    private class TableModel extends javax.swing.table.AbstractTableModel {        public java.lang.Object getValueAt(int row, int col) {            Object[] obj = (Object[]) data.get(row);            return obj[col];        }        protected String[] columnNames = titreColonne;        public int getRowCount() {            return data.size();        }        public int getColumnCount() {            Object[] obj = (Object[]) data.get(0);            return obj.length;        }        public String getColumnName(int col) {            Object[] obj = (Object[]) data.get(0);            int size = obj.length;            if (size > columnNames.length)            {                if (col == obj.length - 1)                    return "provisoire";                else                    return columnNames[col];            } else                return columnNames[col];        }    }    /**     * Classe d'action     */    public class KeyAction extends javax.swing.AbstractAction {        public int action;        public KeyAction(String name, int action) {            putValue(javax.swing.Action.NAME, name);            this.action = action;        }        public void actionPerformed(java.awt.event.ActionEvent evt) {        }    }    public void setTextGrp_TField_affiche(String text) {        this.grp_TField_rechercher.setText(text);    }    public String getTextGrp_TField_affiche() {        return grp_TField_rechercher.getText();    }    public void setRowSelectionIntervalGrp_Table_Affiche(int row, int col) {        // this.grp_Table_affiche.setRowSelectionInterval(row, col);        this.grp_Table_affiche.getSelectionModel().setSelectionInterval(row, col);    }    public void scrollRectToVisibleGrp_table_Affiche(java.awt.Rectangle rect) {        grp_Table_affiche.scrollRectToVisible(rect);    }    public javax.swing.JTable getGrp_Table_Affiche() {        return this.grp_Table_affiche;    }    private void addKeyActionListener() {        KeyAction previous = new KeyAction("", 0);        KeyAction next = new KeyAction("", 1);        javax.swing.InputMap imap = new javax.swing.InputMap();        imap = getInputMap(javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW);        imap.put(javax.swing.KeyStroke.getKeyStroke("UP"), "UP");        javax.swing.ActionMap amap = getActionMap();        amap.put("UP", previous);    }    private void removeKeyActionListener() {        //    }    private void scrollTo(int keyCode) {        int nbrLigne;        int ck;        nbrLigne = this.grp_Table_affiche.getRowCount();        ck = this.grp_Table_affiche.getSelectedRow();        if (keyCode == java.awt.event.KeyEvent.VK_UP) {            if (ck == 0) {                grp_Table_affiche.scrollRectToVisible(new java.awt.Rectangle(0, grp_Table_affiche.getRowHeight() * ck, 20, grp_Table_affiche.getRowHeight()));            } else {                grp_Table_affiche.scrollRectToVisible(new java.awt.Rectangle(0, grp_Table_affiche.getRowHeight() * (ck - 1), 20, grp_Table_affiche.getRowHeight()));            }            if (ck > 0) {                this.grp_Table_affiche.setRowSelectionInterval(ck - 1, ck - 1);            }        } else if (keyCode == java.awt.event.KeyEvent.VK_DOWN) {            ck = this.grp_Table_affiche.getSelectedRow();            if (ck == nbrLigne) {                grp_Table_affiche.scrollRectToVisible(new java.awt.Rectangle(0, grp_Table_affiche.getRowHeight() * ck, 20, grp_Table_affiche.getRowHeight()));            } else {                grp_Table_affiche.scrollRectToVisible(new java.awt.Rectangle(0, grp_Table_affiche.getRowHeight() * (ck + 1), 20, grp_Table_affiche.getRowHeight()));            }            int tot = nbrLigne - 1;            if (ck < tot) {                grp_Table_affiche.setRowSelectionInterval(ck + 1, ck + 1);            }        }    }    private void changeColonne(int i) {        if (i == 1) {            this.titreColonne[1] = config1;            this.titreColonne[2] = config2;        } else if (i == 2) {            this.titreColonne[1] = config2;            this.titreColonne[2] = config1;        }    }    public void setSelectionTable(int itemToFocus) {        int size = this.data.size();        int i = 0;        int id = -1;        Logger.getDefaultLogger().log(Logger.LOG_DEBUG, "[INSERTCOMBO] Recherche de l'id pour sélection : début de recherche----------------");        while (i < size && getItemToFocus() != -1) {            Object[] tmpobj2 = (Object[]) data.get(i);            String tmpstr = tmpobj2[0].toString();            id = Integer.parseInt(tmpstr);            Logger.getDefaultLogger().log(Logger.LOG_DEBUG, "[INSERTCOMBO] id = " + id + " itemtofocus = " + itemToFocus + " getItemToFocus = " + this.getItemToFocus());            if (id == this.getItemToFocus()) {                grp_Table_affiche.setRowSelectionInterval(i, i);                Logger.getDefaultLogger().log(Logger.LOG_DEBUG, "[INSERTCOMBO] je place la selection à : " + i + ":" + id);                grp_Table_affiche.scrollRectToVisible(new java.awt.Rectangle(0, grp_Table_affiche.getRowHeight() * i, 20, grp_Table_affiche.getRowHeight()));                this.id = id;                Logger.getDefaultLogger().log(Logger.LOG_DEBUG, "[INSERTCOMBO] Recherche de l'id pour sélection : fin de recherche----------------");                return;            }            i++;        }        Logger.getDefaultLogger().log(Logger.LOG_DEBUG, "[INSERTCOMBO] G pas trouvé l'Id :(( et vais me placer au début");        /*We didn't find a match. Let's go with first element of list*/        Object[] tmpobj2 = (Object[]) data.get(0);        String tmpstr = tmpobj2[0].toString();        id = Integer.parseInt(tmpstr);        grp_Table_affiche.setRowSelectionInterval(0, 0);        Logger.getDefaultLogger().log(Logger.LOG_DEBUG, "[INSERTCOMBO] je place la selection à : 0:" + id);        grp_Table_affiche.scrollRectToVisible(new java.awt.Rectangle(0, 0, 20, grp_Table_affiche.getRowHeight()));        setItemToFocus(id);        this.id = id;        Logger.getDefaultLogger().log(Logger.LOG_DEBUG, "[INSERTCOMBO] Recherche de l'id pour sélection : fin de recherche----------------");    }    public void setModifyItem(int itemToFocus) {        this.itemToFocus = itemToFocus;    }    public void focusLost(java.awt.event.FocusEvent focusEvent) {    }    public void focusGained(java.awt.event.FocusEvent focusEvent) {        /* Attention ceci est une message de Seb !!!  * J'ai du désactiver le focusGained comme vous pouvez voir ci-dessous,  * Celui-ci créait des interférences point de vue focus avec divers composants graphiques  * comme l'Atextfield et le composant de sélection de langues des Signalétiques.  * Ce changement n'affecte en rien les capacité du beans, si ce n'est le fait que lorsqu'  * InsertCombo prend le focus, le champs de texte de recherche ne prends pas le focus  * -fin du message- merci ! */        /*   if(focusEvent.getSource()==grp_Cbox_Generique2) {              if(grp_Cbox_Generique2.isSelected()==false)  {                  if ( testChargeData(2))                  {                       grp_Cbox_Generique2.setSelected(true);                       changeColonne(2);                  }              }          }          if(focusEvent.getSource()==grp_CBox_Generique1)  {              if(grp_CBox_Generique1.isSelected()==false) {                  if (testChargeData(1))                  {                      grp_CBox_Generique1.setSelected(true);                      changeColonne(1);                  }              }          }           grp_TField_rechercher.requestFocus();        */    }    public void changeSelectionColor(boolean selected) {        if (selected)            grp_Table_affiche.setSelectionBackground(new java.awt.Color(0, 0, 153));        else            grp_Table_affiche.setSelectionBackground(new java.awt.Color(221, 221, 255));    }    /**     * Updates the status of navigation buttons.     * <p/>     * <p/>     * disable useless button according to number     * <p/>     * <p/>     * of elements in table and selected element     */    private void updateButtons()    {        int selectedIndex = grp_Table_affiche.getSelectedRow();        int maxIndex = grp_Table_affiche.getRowCount() - 1;        grp_But_premierElement.setEnabled((selectedIndex > 0) && (maxIndex > 0));        grp_But_precedent.setEnabled((selectedIndex > 0) && (maxIndex > 0));        grp_But_dernier.setEnabled((selectedIndex < maxIndex) && (maxIndex > 0));        grp_But_suivant.setEnabled((selectedIndex < maxIndex) && (maxIndex > 0));        /*grp_But_premierElement.setBorderPainted( (selectedIndex>0) && (maxIndex >0));   grp_But_precedent.setBorderPainted ((selectedIndex>0) && (maxIndex >0));   grp_But_dernier.setBorderPainted ((selectedIndex < maxIndex) && (maxIndex>0));   grp_But_suivant.setBorderPainted ((selectedIndex < maxIndex) && (maxIndex>0));*/    }    private void resetTable() {        if (data.size() > 0) {            javax.swing.table.TableColumn x = grp_Table_affiche.getColumnModel().getColumn(0);            grp_Table_affiche.getColumnModel().removeColumn(x);            grp_TField_rechercher.requestFocus();            /*if(getItemToFocus()==-1)            {                Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"item to focus is -1");                setRowSelectionIntervalGrp_Table_Affiche(0,0);                updateFieldsIntoParent( SelectionDefaultObj());                System.out.println("[INSERCOMBO:chargeObject:je sélectionne la première ligne"+getItemToFocus());            }            else*/            {                Logger.getDefaultLogger().log(Logger.LOG_DEBUG, "item to focus is " + getItemToFocus());                setSelectionTable(getItemToFocus());                updateFieldsIntoParent(SelectionObj());                updateButtons();            }            fireComboActionPerformed(InsertCombo.DATASTATE_FULL);        } else {            fireComboActionPerformed(InsertCombo.DATASTATE_EMPTY);        }    }    public class ChargeObject extends Thread {        private boolean finnished = false;        protected int cas;        public ChargeObject(int cas) {            this.cas = cas;        }        public boolean isFinnished() {            return finnished;        }        public void run() {            try {                fireComboActionPerformed(InsertCombo.DATASTATE_LOADING);                jProgressReception.setVisible(true);                grp_Table_affiche.setEnabled(false);                ((java.awt.CardLayout) (grp_Pan_Center.getLayout())).first(grp_Pan_Center);                grp_But_dernier.setEnabled(false);                grp_But_precedent.setEnabled(false);                grp_But_premierElement.setEnabled(false);                grp_But_suivant.setEnabled(false);                grp_CBox_Generique1.setEnabled(false);                grp_Cbox_Generique2.setEnabled(false);                grp_TField_rechercher.setEnabled(false);                int tmpdebug1 = currentUser.getUrcleunik();                int tmpdebug2 = currentUser.getUrlmcleunik();                System.out.println("getting signalétiques");                if (typeDeCombo == astrainterface.COMBO_CODE_POST) {                    setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(), currentUser.getUrcleunik(), 1, astrainterface.COMBO_CODE_POST, astrainterface.COMBO_CODE_POST_CAS + currentUser.getUrlmcleunik(), true));                } else if (typeDeCombo == astrainterface.COMBO_PAYS) {                    setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(), currentUser.getUrcleunik(), 1, astrainterface.COMBO_PAYS, astrainterface.COMBO_PAYS_CAS + currentUser.getUrlmcleunik(), true));                    /*  if (cas==1)                                        setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(),currentUser.getUrcleunik(),1,astrainterface.COMBO_PAYS,astrainterface.COMBO_PAYS_CAS1,true));                                    else if(cas==2)                                        setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(),currentUser.getUrcleunik(),2,astrainterface.COMBO_PAYS,astrainterface.COMBO_PAYS_CAS2,true));                    */                } else if (typeDeCombo == astrainterface.COMBO_DEVISE) {                    setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(), currentUser.getUrcleunik(), 1, astrainterface.COMBO_DEVISE, astrainterface.COMBO_DEVISECAS + currentUser.getUrlmcleunik(), true));                    /* if (cas==1)                                        setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(),currentUser.getUrcleunik(),1,astrainterface.COMBO_DEVISE,astrainterface.COMBO_DEVISECAS1,true));                                    else if(cas==2)                                        setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(),currentUser.getUrcleunik(),2,astrainterface.COMBO_DEVISE,astrainterface.COMBO_DEVISECAS2,true));                    */                } else if (typeDeCombo == astrainterface.COMBO_TRANSPORT) {                    //  if (cas==1)                    setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(), currentUser.getUrcleunik(), 1, astrainterface.COMBO_TRANSPORT, astrainterface.COMBO_TRANSPORTCAS + currentUser.getUrlmcleunik(), true));                    //else if(cas==2)                    //  setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(),currentUser.getUrcleunik(),2,astrainterface.COMBO_TRANSPORT,astrainterface.COMBO_TRANSPORTCAS2,true));                } else if (typeDeCombo == astrainterface.COMBO_FOURNPROD) {                    if (cas == 1)                        setData(serveur.renvcombo('g', currentUser.getUrcleunik(), currentUser.getUrlmcleunik(), 'p', Integer.toString(extCleUnik), 1));                    else if (cas == 2)                        setData(serveur.renvcombo('g', currentUser.getUrcleunik(), currentUser.getUrlmcleunik(), 'p', Integer.toString(extCleUnik), 2));                } else if (typeDeCombo == astrainterface.COMBO_TVA_TYPE) {                    if (cas == 1)                        setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(), currentUser.getUrcleunik(), 1, astrainterface.COMBO_TVA_TYPE, astrainterface.COMBO_TVA_TYPECAS1, true));                    else if (cas == 2)                        setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(), currentUser.getUrcleunik(), 2, astrainterface.COMBO_TVA_TYPE, astrainterface.COMBO_TVA_TYPECAS2, true));                } else if (typeDeCombo == astrainterface.COMBO_FOURNISSEUR) {                    if (cas == 1)                        setData(serveur.renvcombo('f', currentUser.getUrcleunik(), currentUser.getUrlmcleunik(), 'p', Integer.toString(extCleUnik), 1, astrainterface.COMBO_FOURNISSEURCAS1, true));                    else if (cas == 2)                        setData(serveur.renvcombo('f', currentUser.getUrcleunik(), currentUser.getUrlmcleunik(), 'p', Integer.toString(extCleUnik), 2, astrainterface.COMBO_FOURNISSEURCAS2, true));                } else if (typeDeCombo == astrainterface.COMBO_FOURNCONTACT) {                    if (cas == 1)                        setData(serveur.renvcombofourncontact(currentUser.getUrcleunik(), premiereLettre, 1, extCleUnik));                    else if (cas == 2)                        setData(serveur.renvcombofourncontact(currentUser.getUrcleunik(), premiereLettre, 2, extCleUnik));                } else if (typeDeCombo == astrainterface.COMBO_LANGUE) {                    setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(), currentUser.getUrcleunik(), 1, astrainterface.COMBO_LANGUE, astrainterface.COMBO_LANGUECAS + currentUser.getUrlmcleunik(), true));                    /*  if (cas==1)                                        setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(),currentUser.getUrcleunik(),1,astrainterface.COMBO_LANGUE,astrainterface.COMBO_LANGUECAS1,true));                                    else if(cas==2)                                        setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(),currentUser.getUrcleunik(),2,astrainterface.COMBO_LANGUE,astrainterface.COMBO_LANGUECAS2,true));                    */                } else if (typeDeCombo == astrainterface.COMBO_LOGEMENT) {                    //  if (cas==1)                    setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(), currentUser.getUrcleunik(), 1, astrainterface.COMBO_LOGEMENT, astrainterface.COMBO_LOGEMENTCAS + currentUser.getUrlmcleunik(), true));                    // else if(cas==2)                    //   setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(),currentUser.getUrcleunik(),2,astrainterface.COMBO_LOGEMENT,astrainterface.COMBO_LOGEMENTCAS2,true));                } else if (typeDeCombo == astrainterface.COMBO_TITREPERSONNES) {                    //   if (cas==1)                    setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(), currentUser.getUrcleunik(), 1, astrainterface.COMBO_TITREPERSONNES, astrainterface.COMBO_TITREPERSONNESCAS + currentUser.getUrlmcleunik(), true));                    // else if(cas==2)                    //   setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(),currentUser.getUrcleunik(),2,astrainterface.COMBO_TITREPERSONNES,astrainterface.COMBO_TITREPERSONNESCAS2,true));                } else if (typeDeCombo == astrainterface.COMBO_CLIENT) {                    try {                        setData(new srcastra.astra.sys.classetransfert.clients.Sous_Client_T().selectAllObject(serveur, currentUser, null, (cas - 1)));                    }                    catch (ServeurSqlFailure se)                    {                        ErreurScreenLibrary.displayErreur(null, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se);                    }                    catch (java.rmi.RemoteException re) {                        ErreurScreenLibrary.displayErreur(null, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);                    }                    catch (Exception e) {                        ErreurScreenLibrary.displayErreur(null, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);                    }                } else if (typeDeCombo == astrainterface.COMBO_CLIENT_ADRESSES) {                    try {                        int[] param = new int[1];                        param[0] = extCleUnik;                        setData(new srcastra.astra.sys.classetransfert.clients.ClientsMultiAdresses_T().selectAllObject(serveur, currentUser, param, (cas + 8)));                    }                    catch (ServeurSqlFailure se)                    {                        ErreurScreenLibrary.displayErreur(null, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se);                    }                    catch (java.rmi.RemoteException re) {                        ErreurScreenLibrary.displayErreur(null, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);                    }                    catch (Exception e) {                        ErreurScreenLibrary.displayErreur(null, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);                    }                } else if (typeDeCombo == astrainterface.COMBO_CLIENT_REMISES) {                    try {                        int[] param = new int[1];                        param[0] = extCleUnik;                        setData(new srcastra.astra.sys.classetransfert.clients.ClientsRemises_T().selectAllObject(serveur, currentUser, param, (cas + 10)));                    }                    catch (ServeurSqlFailure se)                    {                        ErreurScreenLibrary.displayErreur(null, ErreurScreenLibrary.SERVEUR_SQL_FAILURE, srcastra.astra.Astra.DEBUG, se);                    }                    catch (java.rmi.RemoteException re) {                        ErreurScreenLibrary.displayErreur(null, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);                    }                    catch (Exception e) {                        ErreurScreenLibrary.displayErreur(null, ErreurScreenLibrary.EXCEPTION, srcastra.astra.Astra.DEBUG, e);                    }                } else if (typeDeCombo == astrainterface.COMBO_DESTINATION) {                    setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(), currentUser.getUrcleunik(), 1, astrainterface.COMBO_DESTINATION, astrainterface.COMBO_DESTINATIONCAS + currentUser.getUrlmcleunik(), true));                    /* if (cas==1)                                        setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(),currentUser.getUrcleunik(),1,astrainterface.COMBO_DESTINATION,astrainterface.COMBO_DESTINATIONCAS1,true));                                    else if(cas==2)                                        setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(),currentUser.getUrcleunik(),2,astrainterface.COMBO_DESTINATION,astrainterface.COMBO_DESTINATIONCAS2,true));                    */                } else if (typeDeCombo == astrainterface.COMBO_COMPAGNIE) {                    if (cas == 1)                        setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(), currentUser.getUrcleunik(), 1, astrainterface.COMBO_COMPAGNIE, astrainterface.COMBO_COMPAGNIECAS1, true));                    else if (cas == 2)                        setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(), currentUser.getUrcleunik(), 2, astrainterface.COMBO_COMPAGNIE, astrainterface.COMBO_COMPAGNIECAS2, true));                } else if (typeDeCombo == astrainterface.COMBO_EMBARQDEBARQ) {                    setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(), currentUser.getUrcleunik(), 1, astrainterface.COMBO_EMBARQDEBARQ, astrainterface.COMBO_EMBARQDEBARQCAS + currentUser.getUrlmcleunik(), true));                    // setData(serveur.renvSignalitiques(currentUser.getUrlmcleunik(),currentUser.getUrcleunik(),1,astrainterface.COMBO_EMBARQDEBARQ,astrainterface.COMBO_EMBARQDEBARQCAS1,true));                }                position = new ArrayList();                position.add(new Integer(0));                if (data.size() > 0) {                    javax.swing.table.TableColumn x = grp_Table_affiche.getColumnModel().getColumn(0);                    grp_Table_affiche.getColumnModel().removeColumn(x);                    grp_TField_rechercher.requestFocus();                    /*if(getItemToFocus()==-1)                    {                        Logger.getDefaultLogger().log(Logger.LOG_DEBUG,"item to focus is -1");                        setRowSelectionIntervalGrp_Table_Affiche(0,0);                        updateFieldsIntoParent( SelectionDefaultObj());                        System.out.println("[INSERCOMBO:chargeObject:je sélectionne la première ligne"+getItemToFocus());                    }                    else*/                    {                        Logger.getDefaultLogger().log(Logger.LOG_DEBUG, "item to focus is " + getItemToFocus());                        setSelectionTable(getItemToFocus());                        updateFieldsIntoParent(SelectionObj());                        updateButtons();                    }                    fireComboActionPerformed(InsertCombo.DATASTATE_FULL);                } else {                    fireComboActionPerformed(InsertCombo.DATASTATE_EMPTY);                }            }            catch (java.rmi.RemoteException re) {                ErreurScreenLibrary.displayErreur(null, ErreurScreenLibrary.REMOTE_EXCEPTION, srcastra.astra.Astra.DEBUG, re);            }            finally {                parent.chargeData();            }            grp_But_dernier.setEnabled(true);            grp_But_precedent.setEnabled(true);            grp_But_premierElement.setEnabled(true);            grp_But_suivant.setEnabled(true);            grp_CBox_Generique1.setEnabled(true);            grp_Cbox_Generique2.setEnabled(true);            grp_TField_rechercher.setEnabled(true);            jProgressReception.setVisible(false);            grp_Table_affiche.setEnabled(true);            grp_Table_affiche.getTableHeader().setReorderingAllowed(false);            ((java.awt.CardLayout) (grp_Pan_Center.getLayout())).last(grp_Pan_Center);            updateButtons();            setFocusRecherche();            finnished = true;            if (nested)                parent.displayInsertMode();        }    }    public int getDataLenght()    {        int returnvalue;        if (data == null) {            returnvalue = 0;        } else        {            returnvalue = this.data.size();        }        return returnvalue;    }    /**     * Getter for property itemToFocus.     *     * @return Value of property itemToFocus.     */    public int getItemToFocus() {        return itemToFocus;    }    /**     * Setter for property itemToFocus.     *     * @param itemToFocus New value of property itemToFocus.     */    public void setItemToFocus(int itemToFocus) {        this.itemToFocus = itemToFocus;        Logger.getDefaultLogger().log(Logger.LOG_DEBUG, "insert combo: item to focus set to " + itemToFocus);    }    /**     * Method to inform all ActionListeners that an action was performed into the InsertCombo     */    protected void fireComboActionPerformed(int state) {        Object[] listeners = m_listenerList.getListenerList();        for (int i = 0; i < listeners.length; i++) {            System.out.println("[FIRESTATECHANGED] listeners : " + listeners[i].getClass());            if (InsertComboListener.class.isAssignableFrom(listeners[i].getClass())) {                System.out.println("[FIRESTATECHANGED] passé");                if (m_comboEvent == null) {                    m_comboEvent = new InsertComboEvent(this, InsertComboEvent.ACTION_PERFORMED, "stateChanged", state, this.environnement);                } else {                    m_comboEvent.setState(state);                }                ((InsertComboListener) listeners[i]).actionComboPerformed(m_comboEvent);            }        }    }    /**     * Getter for property environnement.     *     * @return Value of property environnement.     */    public int getEnvironnement() {        return environnement;    }    /**     * Setter for property environnement.     *     * @param environnement New value of property environnement.     */    public void setEnvironnement(int environnement) {        this.environnement = environnement;    }    public void addInsertComboListener(InsertComboListener listener) {        m_listenerList.add(InsertComboListener.class, listener);    }    public void removeInsertComboListener(InsertComboListener listener) {        m_listenerList.remove(InsertComboListener.class, listener);    }    /**     * Getter for property nested.     *     * @return Value of property nested.     */    public boolean isNested() {        return nested;    }    /**     * Setter for property nested.     *     * @param nested New value of property nested.     */    public void setNested(boolean nested) {        this.nested = nested;    }    private srcastra.astra.sys.rmi.astrainterface serveur;    private srcastra.astra.sys.classetransfert.Loginusers_T currentUser;    protected java.util.ArrayList data;    protected ArrayList position;    private int typeDeCombo;    private char premiereLettre = 1;    private int cleUnik;    /**     * Clé unique de l'extérieur : par exemple celle du fournisseur     */    private int extCleUnik;    private InternScreenModule parent;    private ManipuleTable manip;    private int id;    private String[] titreColonne;    private String config1;    private String config2;    private int nbrColonneToHide;    private int cas;    private int constCombo;    private int itemToFocus;    /* environement of the insertCombo */    private int environnement = 0;    public static final int ENVIRONNEMENT_INDEX_PREVIEW = 0;    public static final int ENVIRONNEMENT_PANEL_DATA = 1;    public static final int ENVIRONNEMENT_PANEL_SIGNALETIQUE = 2;    /* date state of the beans */    public static final int DATASTATE_EMPTY = 0;    public static final int DATASTATE_FULL = 1;    public static final int DATASTATE_LOADING = 2;    /**     * Swing Property support for bound propertyChange     */    private EventListenerList m_listenerList;    private InsertComboEvent m_comboEvent;    private boolean nested;    // Variables declaration - do not modify//GEN-BEGIN:variables    private javax.swing.ButtonGroup buttonGroup1;    private javax.swing.JButton grp_But_dernier;    private javax.swing.JButton grp_But_precedent;    private javax.swing.JButton grp_But_premierElement;    private javax.swing.JButton grp_But_suivant;    private javax.swing.JRadioButton grp_CBox_Generique1;    private javax.swing.JRadioButton grp_Cbox_Generique2;    private javax.swing.JLabel grp_Label_Generique1;    private javax.swing.JLabel grp_Label_Generique2;    private javax.swing.JPanel grp_Pan_Center;    private javax.swing.JPanel grp_Pan_north;    private javax.swing.JPanel grp_Pan_recherche;    private javax.swing.JScrollPane grp_ScrollP_affichScroll;    private javax.swing.JTextField grp_TField_rechercher;    private javax.swing.JTable grp_Table_affiche;    private javax.swing.JPanel jPanel6;    private javax.swing.JProgressBar jProgressReception;    private javax.swing.JPanel panelDownload;    // End of variables declaration//GEN-END:variables}