/* * ADate.java * * Created on 6 août 2002, 11:35 */package srcastra.astra.gui.components.date.aDate;// Swing importationsimport javax.swing.*;import javax.swing.border.LineBorder;// awt importationsimport java.awt.Dimension;import java.awt.Color;import java.awt.Font;//import java.awt.Component;// Listenersimport java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import javax.swing.event.SwingPropertyChangeSupport;import java.awt.event.ActionListener;import java.awt.event.ActionEvent;import java.awt.event.FocusListener;import java.awt.event.FocusEvent;// Serializationimport java.io.Serializable;// Astra importationimport srcastra.astra.gui.components.AstraComponent;import srcastra.astra.gui.sys.formVerification.DefaultMask;import srcastra.astra.gui.sys.formVerification.DateMask;import srcastra.astra.sys.classetransfert.utils.Date;import javax.swing.event.EventListenerList;import java.awt.event.ActionEvent;/** * @author Sébastien */public class ADate extends JPanel implements Serializable, AstraComponent {////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// CONSTRUCTOR////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Creates a new instance of ADate     */    public ADate() {        preInit();        initComponents();        postInit();    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// INITIALISATION////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    protected void preInit() {        eventManager = new EventListenerList();    }    protected void initComponents() {        // initialisation        ////////////////////////////        grp_TField_jour = new javax.swing.JTextField();        grp_TField_mois = new javax.swing.JTextField();        grp_TField_annee = new javax.swing.JTextField();        grp_Label_separateur = new javax.swing.JLabel();        grp_Label_separateur2 = new javax.swing.JLabel();        grp_Label_warning = new javax.swing.JLabel();        // Placement        ////////////////////////////        // grp_TField_jour        grp_TField_jour.setPreferredSize(new java.awt.Dimension(16, 18));        grp_TField_jour.setFont(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 10));        grp_TField_jour.setDisabledTextColor(java.awt.Color.black);        grp_TField_jour.setBorder(new LineBorder(Color.black));        grp_TField_jour.setVerifyInputWhenFocusTarget(false);        grp_TField_mois.setPreferredSize(new java.awt.Dimension(16, 18));        grp_TField_mois.setDisabledTextColor(java.awt.Color.black);        grp_TField_mois.setFont(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 10));        grp_TField_mois.setBorder(new LineBorder(Color.black));        grp_TField_mois.setVerifyInputWhenFocusTarget(false);        // grp_TField_annee        grp_TField_annee.setPreferredSize(new java.awt.Dimension(32, 18));        grp_TField_annee.setDisabledTextColor(java.awt.Color.black);        grp_TField_annee.setFont(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 10));        grp_TField_annee.setBorder(new LineBorder(Color.black));        grp_TField_annee.setVerifyInputWhenFocusTarget(false);        grp_Label_warning.setPreferredSize(new java.awt.Dimension(18, 18));        grp_Label_separateur.setText("/");        grp_Label_separateur.setHorizontalAlignment(javax.swing.JLabel.CENTER);        grp_Label_separateur.setFont(new java.awt.Font("Tahoma", java.awt.Font.BOLD, 10));        grp_Label_separateur.setForeground(java.awt.Color.black);        grp_Label_separateur.setPreferredSize(new java.awt.Dimension(18, 18));        // grp_Label_separateur2        grp_Label_separateur2.setText("/");        grp_Label_separateur2.setHorizontalAlignment(javax.swing.JLabel.CENTER);        grp_Label_separateur2.setFont(new java.awt.Font("Tahoma", java.awt.Font.BOLD, 10));        grp_Label_separateur2.setForeground(java.awt.Color.black);        grp_Label_separateur2.setPreferredSize(new java.awt.Dimension(18, 18));        this.setPreferredSize(new java.awt.Dimension(136, 18));        this.setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));        this.add(grp_TField_jour);        this.add(grp_Label_separateur);        this.add(grp_TField_mois);        this.add(grp_Label_separateur2);        this.add(grp_TField_annee);        this.add(grp_Label_warning);    }    protected void postInit() {        new srcastra.astra.gui.components.fx.JComponentBorderFx(grp_TField_jour);        new srcastra.astra.gui.components.fx.JComponentBorderFx(grp_TField_mois);        new srcastra.astra.gui.components.fx.JComponentBorderFx(grp_TField_annee);        // documents        grp_TField_jour.setDocument(new DateMask(this, DateMask.DAY, grp_TField_jour));        grp_TField_mois.setDocument(new DateMask(this, DateMask.MONTH, grp_TField_mois));        grp_TField_annee.setDocument(new DateMask(this, DateMask.YEAR, grp_TField_annee));        // listeners registering        grp_TField_jour.addActionListener(actionListener);        grp_TField_mois.addActionListener(actionListener);        grp_TField_annee.addActionListener(actionListener);        grp_TField_jour.addFocusListener(focusListener);        grp_TField_mois.addFocusListener(focusListener);        grp_TField_annee.addFocusListener(focusListener);    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // => LISTENERS    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    protected PropertyChangeListener documentChangeListener = new PropertyChangeListener() {        public void propertyChange(PropertyChangeEvent evt) {            if (evt.getPropertyName().equals(DefaultMask.BEAN_CORRECTINPUT)) {                confirmCorrectInput(Boolean.valueOf(evt.getNewValue().toString()).booleanValue());                if (correctInput && isEnabled()) {                    setStateIcon(workingIcon);                    setTextMsg("");                }                System.out.println("[PROP CHANGES] " + evt.getNewValue() + "boolean : " + correctInput);            }        }    };    protected ActionListener actionListener = new ActionListener() {        public void actionPerformed(ActionEvent evt) {            actionPerform(evt);        }    };    public void actionPerform(ActionEvent evt) {        Object source = evt.getSource();        javax.swing.FocusManager fm = javax.swing.FocusManager.getCurrentManager();        /*try {            DefaultMask mask = (DefaultMask) ((JTextField)source).getDocument();            mask.insertString(0, DefaultMask.VALIDATE, null);            System.out.println("je le fais - je le fais - je le fais - je le fais - je le fais - je le fais - je le fais - ");        }        catch (Exception e) { System.out.println("putain de sa race exception !!!");        */        if (source.equals(grp_TField_jour)) grp_TField_mois.requestFocus();        else if (source.equals(grp_TField_mois)) grp_TField_annee.requestFocus();        else if (source.equals(grp_TField_annee)) {            DefaultMask mask = (DefaultMask) ((JTextField) evt.getSource()).getDocument();            try {                mask.insertString(0, DateMask.FOCUS_LOST, null);                fireAdateEvent(new AdateEvent(ADate.this, AdateEvent.ACTION_PERFORMED, "cool"));                grp_Comp_nextComponent.setEnabled(true);                grp_Comp_nextComponent.requestFocus();            }            catch (Exception e) {                //e.printStackTrace();            }        }    }    /* Focus Listener pour le Textfield */    protected FocusListener focusListener = new FocusListener() {        public void focusGained(FocusEvent evt) {            if (grp_Comp_previousComponent == null || grp_Comp_previousComponent.isEnabled()) {                ((JTextField) evt.getSource()).selectAll();                if (correctInput) setStateIcon(workingIcon);                else setStateIcon(warningIcon);            }        }        public void focusLost(FocusEvent evt) {            //System.out.println("==============================> FOcuse LOST <======================================================");            try {                Object source = evt.getSource();                DefaultMask mask = (DefaultMask) ((JTextField) source).getDocument();                mask.insertString(0, DateMask.FOCUS_LOST, null);                if (!grp_TField_jour.getText().equals("") && !grp_TField_mois.getText().equals("") && evt.getSource().equals(grp_TField_annee)) {                    //System.out.println("===========>FIRE<============");                    fireAdateEvent(new AdateEvent(ADate.this, AdateEvent.ACTION_PERFORMED, "cool"));                }            }            catch (Exception e) {                System.out.println("putain de sa race exception !!!");            }            if (correctInput) setStateIcon(null);            else setStateIcon(warningIcon);        }    };////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => METHODE APPARENTE AU BEANS////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public Date setTodayDate() {        java.util.Calendar c = java.util.Calendar.getInstance();        Date date = new Date(c.get(java.util.Calendar.YEAR), c.get(java.util.Calendar.MONTH), c.get(java.util.Calendar.DAY_OF_MONTH));        setDate(date);        return date;    }    public void clearField() {        try {            grp_TField_jour.getDocument().remove(0, grp_TField_jour.getDocument().getLength());            grp_TField_mois.getDocument().remove(0, grp_TField_mois.getDocument().getLength());            grp_TField_annee.getDocument().remove(0, grp_TField_annee.getDocument().getLength());        }        catch (javax.swing.text.BadLocationException e) {            e.printStackTrace();        }    }    private void setStateIcon(Icon icone) {        grp_Label_warning.setIcon(icone);    }    public void setStateIcon(int i) {        if (i == 1)            grp_Label_warning.setIcon(getWarningIcon());        else if (i == 0)            grp_Label_warning.setIcon(null);    }    private void setTextMsg(String txt) {        grp_Label_warning.setToolTipText(txt);    }    private void confirmCorrectInput(boolean correct) {        boolean oldValue = correctInput;        boolean newValue = correct;        correctInput = correct;        m_supporter.firePropertyChange(BEANS_PROPERTY_CORRECT_INPUT, oldValue, newValue);    }    private void adaptBackgroundColor(boolean enabled) {        /* if (!open && !unknown) {*/        Color background = enabled ? Color.white : Color.lightGray;        grp_TField_jour.setBackground(background);        grp_TField_mois.setBackground(background);        grp_TField_annee.setBackground(background);        /*}/*        else if (open) {            transformFieldLayout(new Color(153,0,0), Color.yellow, "");        }        else if (unknown) {            transformFieldLayout(Color.green, Color.black, "");        }*/    }    public void skipField(JTextField source) {        actionListener.actionPerformed(new ActionEvent(source, ActionEvent.ACTION_PERFORMED, "SKIP"));    }    public void makeOpen() {        ((DateMask) grp_TField_jour.getDocument()).setOpen(true);        ((DateMask) grp_TField_mois.getDocument()).setOpen(true);        ((DateMask) grp_TField_annee.getDocument()).setOpen(true);        transformFieldLayout(new Color(153, 0, 0), Color.yellow, "#");        open = true;        skipField(grp_TField_mois);    }    public void makeUnknown() {        ((DateMask) grp_TField_jour.getDocument()).setUnknown(true);        ((DateMask) grp_TField_mois.getDocument()).setUnknown(true);        ((DateMask) grp_TField_annee.getDocument()).setUnknown(true);        transformFieldLayout(Color.green, Color.black, "#");        unknown = true;        skipField(grp_TField_mois);    }    public void makeDefault() {        if (unknown) {            unknown = false;            ((DateMask) grp_TField_jour.getDocument()).setUnknown(false);            ((DateMask) grp_TField_mois.getDocument()).setUnknown(false);            ((DateMask) grp_TField_annee.getDocument()).setUnknown(false);        } else if (open) {            open = false;            ((DateMask) grp_TField_jour.getDocument()).setOpen(false);            ((DateMask) grp_TField_mois.getDocument()).setOpen(false);            ((DateMask) grp_TField_annee.getDocument()).setOpen(false);        }        grp_TField_jour.requestFocus();        transformFieldLayout(Color.white, Color.black, "");    }    private void transformFieldLayout(Color background, Color foreground, String text) {        /*grp_TField_jour.setBackground(background);        grp_TField_mois.setBackground(background);        grp_TField_annee.setBackground(background);                grp_TField_jour.setForeground(foreground);        grp_TField_mois.setForeground(foreground);        grp_TField_annee.setForeground(foreground);        */        grp_TField_jour.setText(text);        grp_TField_mois.setText(text);        grp_TField_annee.setText(text);    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => BEANS PROPERTIES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /* propriété : le composant précédent à prendre le focus */    protected JComponent grp_Comp_nextComponent;    /* propriété : le prochain composant à prendre le focus */    protected JComponent grp_Comp_previousComponent;    /* propriétés : icône de warning */    protected Icon warningIcon;    /* propriétés : icône d'état */    protected Icon workingIcon;    /* propriété : mis à true => le composant doit lancer la fct verifAllFields() de son parent (parentComp) */    protected boolean lastFocusedComponent;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => Champs de la classe////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /* défini si la valeur dans le champs de texte est correcte (en rapport avec l'objet Document associé au champs de texte) */    protected boolean correctInput = true;    /* pour la gestion du changement de propiétés */    protected SwingPropertyChangeSupport m_supporter;    protected EventListenerList eventManager;    protected boolean unknown = false;    protected boolean open = false;//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// // STATIC VARIABLES////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public static final String BEANS_PROPERTY_CORRECT_INPUT = "CorrectInput";////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// => Graphic Component////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    protected JTextField grp_TField_jour;    protected JTextField grp_TField_mois;    protected JTextField grp_TField_annee;    protected JLabel grp_Label_separateur;    protected JLabel grp_Label_separateur2;    protected JLabel grp_Label_warning;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// BEANS PROPERTIES GET/SET SUPPORT////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public boolean getverif() {        return true;    }    public boolean isLastFocusedComponent() {        return lastFocusedComponent;    }    public void setLastFocusedComponent(boolean lastFocusedComponent) {        this.lastFocusedComponent = lastFocusedComponent;    }    public void setText(String text) {        if (text.equals("")) clearField();    }    /**     * Getter for property grp_Comp_previousComponent.     *     * @return Value of property grp_Comp_previousComponent.     */    public JComponent getGrp_Comp_previousComponent() {        return grp_Comp_previousComponent;    }    /**     * Setter for property grp_Comp_previousComponent.     *     * @param grp_Comp_previousComponent New value of property grp_Comp_previousComponent.     */    public void setGrp_Comp_previousComponent(JComponent grp_Comp_previousComponent) {        this.grp_Comp_previousComponent = grp_Comp_previousComponent;    }    /**     * Getter for property grp_Comp_nextComponent.     *     * @return Value of property grp_Comp_nextComponent.     */    public JComponent  getGrp_Comp_nextComponent() {        return grp_Comp_nextComponent;    }    /**     * Setter for property grp_Comp_nextComponent.     *     * @param grp_Comp_nextComponent New value of property grp_Comp_nextComponent.     */    public void setGrp_Comp_nextComponent(JComponent grp_Comp_nextComponent) {        this.grp_Comp_nextComponent = grp_Comp_nextComponent;    }    /**     * Getter for property warningIcon.     *     * @return Value of property warningIcon.     */    public javax.swing.Icon getWarningIcon() {        return warningIcon;    }    /**     * Setter for property warningIcon.     *     * @param warningIcon New value of property warningIcon.     */    public void setWarningIcon(javax.swing.Icon warningIcon) {        this.warningIcon = warningIcon;    }    /**     * Getter for property workingIcon.     *     * @return Value of property workingIcon.     */    public javax.swing.Icon getWorkingIcon() {        return workingIcon;    }    /**     * Setter for property workingIcon.     *     * @param workingIcon New value of property workingIcon.     */    public void setWorkingIcon(javax.swing.Icon workingIcon) {        this.workingIcon = workingIcon;    }    public void setEnabled(boolean enabled) {        super.setEnabled(enabled);        grp_TField_jour.setEnabled(enabled);        grp_TField_mois.setEnabled(enabled);        grp_TField_annee.setEnabled(enabled);        adaptBackgroundColor(enabled);    }    public void requestFocus() {        grp_TField_jour.requestFocus();    }    public void addActionListener(ActionListener listener) {    }    public void removeActionListener(ActionListener listener) {    }    public srcastra.astra.sys.classetransfert.utils.Date getDate() {        int year = 1000;        int month = 1;        int day = 1;        srcastra.astra.sys.classetransfert.utils.Date date = new Date();        try {            if (isOpen()) {                year = 1001;                month = 1;                day = 1;            } else if (isUnknown()) {                year = 1000;                month = 1;                day = 1;            } else {                year = Integer.parseInt(grp_TField_annee.getText());                month = Integer.parseInt(grp_TField_mois.getText());                day = Integer.parseInt(grp_TField_jour.getText());            }        }        catch (Exception ee) {        }        if (day < 0 || month < 0 || year < 0) {            unknown = true;            year = 1;            month = 1;            day = 1;            grp_TField_jour.setText("?");        }        System.out.println("[GET DATE DE ADATE] year - month - day => " + year + " - " + month + "-" + day);        date.setYear(year);        date.setMonth(month);        date.setDay(day);        date.setHours(10);        date.setMinutes(10);        date.setSeconds(10);        return date;    }    public void setDate(srcastra.astra.sys.classetransfert.utils.Date date) {        //System.out.println("\n######################################################YO SET DATE DEBUT!!!!################################################");        if (date != null) {            int day = date.getDay();            int month = date.getMonth();            int year = date.getYear();            if (day == 1 && month == 1 && year == 1001) {                makeSpecState(grp_TField_jour, "oo");                makeSpecState(grp_TField_mois, "oo");                makeSpecState(grp_TField_annee, "oooo");                open = true;                unknown = false;            } else if (day == 1 && month == 1 && year == 1000) {                makeSpecState(grp_TField_jour, "??");                makeSpecState(grp_TField_mois, "??");                makeSpecState(grp_TField_annee, "????");                open = false;                unknown = true;            } else {                makeSpecState(grp_TField_jour, "" + date.getDay());                makeSpecState(grp_TField_mois, "" + date.getMonth());                makeSpecState(grp_TField_annee, "" + date.getYear());            }        }        //System.out.println("######################################################YO SET DATE FIN !!!!################################################\n\n");    }    private void makeSpecState(JTextField field, String specState) {        DefaultMask dm = (DefaultMask) field.getDocument();        try {            dm.removeAll();            dm.insertStringWithoutModification(0, specState.toUpperCase(), null);        }        catch (Exception e) {            e.printStackTrace();        }    }    public void addAdateListener(AdateListener listener) {        eventManager.add(AdateListener.class, listener);    }    public void removeAdateListener(AdateListener listener) {        eventManager.remove(AdateListener.class, listener);    }    private void fireAdateEvent(AdateEvent evt) {        Object[] listener = eventManager.getListenerList();        for (int i = 0; i < listener.length; i++) {            if (AdateListener.class.isAssignableFrom(listener[i].getClass())) {                // System.out.println("==========>ASSIGNABLE<================");                ((AdateListener) listener[i]).dayFieldSkiped(evt);            }        }    }    public boolean isOpen() {        return true;    }    public boolean isUnknown() {        return unknown;    }    public void clearIcon() {        grp_Label_warning.setIcon(null);    }    public String getText2() {        return "";    }}