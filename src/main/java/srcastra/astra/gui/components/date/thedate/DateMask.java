/*   * DateMask.java   *   * Created on 6 août 2002, 13:00   */package srcastra.astra.gui.components.date.thedate;import java.util.Locale;import javax.swing.text.*;import srcastra.astra.gui.components.date.aDate.ADate;import javax.swing.JTextField;import java.util.Calendar;import javax.swing.event.*;/** * @author Sébastien */public class DateMask extends PlainDocument {    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // CONSTRUCTORS    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /**     * Creates a new instance of DateMask     */    boolean init;    srcastra.astra.gui.components.textFields.Mtextfield parent;    srcastra.astra.gui.components.date.thedate.ADate composant;    public DateMask(srcastra.astra.gui.components.textFields.Mtextfield parent, srcastra.astra.gui.components.date.thedate.ADate composant) {        super();        this.parent = parent;        this.composant = composant;        this.parent.addCaretListener(mycaret);        try {            init = true;            initString(0, "  /  /    ", null);        } catch (BadLocationException bn) {            bn.printStackTrace();        }    }    CaretListener mycaret = new CaretListener() {        public void caretUpdate(CaretEvent e) {            // System.out.println("position du curseur "+e.getDot());        }    };    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // METHODES APPARENTE AU BEANS    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {        offs = checkOffset(offs);        boolean valide = checkValidity(str, offs);        boolean valide2 = checkValidity2(str, offs);        // boolean valide2=true;        if (valide && valide2) {            // super.remove(offs,1);            if (offs == 2 || offs == 5) {                // if(super.getText(offs-1,1).equals(" ")){                //  super.insertString(offs-1,str,null);                //}                System.out.println("c vide");                super.insertString(offs, "/", null);                super.remove(offs + 1, 1);                offs = offs + 1;            }            super.insertString(offs, str, a);            if (offs != 1 && offs != 4) super.remove(offs + 1, 1);            if (offs == 1) {                super.remove(2, 1);                parent.moveCaretPosition(3);                one = true;                parent.setSelectionStart(3);                parent.setSelectionEnd(3);            }            if (offs == 4) {                super.remove(5, 1);                // super.remove(5,1);                parent.moveCaretPosition(6);                one = true;                parent.setSelectionStart(6);                parent.setSelectionEnd(6);            }        }        /*if(offs==2 || offs==5){            if(str.equals("-"))               super.insertString(offs,str,a);            else                super.insertString(offs+1,str,a);        }        else{            if(!init){              if(!insertBeforeTild( offs,  str, a))               super.insertString(offs,str,a);            }        }*/    }    private int checkOffset(int offs) throws BadLocationException {        int i = 0;        if (offs == 2)            return 3;        if (offs == 5)            return 6;        for (i = offs - 1; i > 0; i--) {            if (i != 2 && i != 5)                if (!super.getText(i, 1).equals(" ")) break;        }        if (i == 0 && super.getText(i, 1).equals(" ")) ;        else if (offs == 3 && !super.getText(1, 1).equals(" ")) {            i = i + 2;        } else if (offs == 5 && !super.getText(3, 1).equals(" ")) {            i = i + 2;        } else {            i = i + 1;        }        return i;    }    private boolean checkValidity(String str, int offs) {        if (offs < 0 || offs > 9) return false;        //  if(offs==2 || offs==5) return false;        char[] tmp = str.toCharArray();        if (tmp.length > 1) return false;        if (tmp[0] == '?') {            composant.setDate(new srcastra.astra.sys.classetransfert.utils.Date(1000, 1, 1));            composant.passFocus();            return false;        }        if (tmp[0] == 'o' || tmp[0] == 'O') {            composant.setDate(new srcastra.astra.sys.classetransfert.utils.Date(1001, 1, 1));            composant.passFocus();            return false;        }        try {            int value = Integer.parseInt(str);            return true;        } catch (NumberFormatException nn) {            return false;        }        //System.out.println("taille du tableau "+str.length());    }    private boolean openUnknown(String day, String month, String year) throws BadLocationException {        if (super.getText(0, 2).equals(day) && super.getText(3, 2).equals(month) && super.getText(6, 4).equals(year))            return true;        return false;    }    public boolean checkBeforeChange() {        try {            if (openUnknown("??", "??", "????"))                return true;            if (openUnknown("OO", "OO", "OOOO"))                return true;            String[] tab = new String[8];            int tabi[] = new int[8];            tabi[0] = 0;            tabi[1] = 1;            tabi[2] = 3;            tabi[3] = 4;            tabi[4] = 6;            tabi[5] = 7;            tabi[6] = 8;            tabi[7] = 9;            tab[0] = super.getText(0, 1);            tab[1] = super.getText(1, 1);            tab[2] = super.getText(3, 1);            tab[3] = super.getText(4, 1);            tab[4] = super.getText(6, 1);            tab[5] = super.getText(7, 1);            tab[6] = super.getText(8, 1);            tab[7] = super.getText(9, 1);            for (int i = 0; i < 8; i++) {                boolean sw = checkValidity2(tab[i], tabi[i]);                if (!sw)                    return false;            }            return true;        } catch (BadLocationException bn) {            bn.printStackTrace();            return false;        }    }    private boolean checkValidity2(String str, int offs) throws BadLocationException {        int value = parseString(str);        int value1 = 0;        int value2 = 0;        if (offs == 0) {            if (value < 0 || value > 3)                return false;        } else if (offs == 1) {            value1 = parseString(super.getText(0, 1));            if (value1 == 0)                if (value < 1 || value > 9)                    return false;            if (value1 == 1 || value1 == 2)                if (value < 0 || value > 9)                    return false;            if (value1 == 3)                if (value < 0 || value > 1)                    return false;        } else if (offs == 1) {            value1 = parseString(super.getText(0, 1));            if (value1 == 0)                if (value < 1 || value > 9)                    return false;            if (value1 == 1 || value1 == 2)                if (value < 0 || value > 9)                    return false;            if (value1 == 3)                if (value < 0 || value > 1)                    return false;        } else if (offs == 3) {            if (value < 0 || value > 1)                return false;        } else if (offs == 4) {            value1 = parseString(super.getText(3, 1));            if (value1 == 0)                if (value < 1 || value > 9)                    return false;            if (value1 == 1)                if (value < 0 || value > 2)                    return false;        } else if (offs == 8) {            value1 = parseString(super.getText(6, 1));            if (value1 < 1 || value1 > 2)                return false;            if (value1 == 1) {                value2 = parseString(super.getText(7, 1));                if (value2 != 9)                    return false;            }        }        return true;    }    private int parseString(String str) {        try {            int value = Integer.parseInt(str);            return value;        } catch (NumberFormatException nn) {            return -1;        }    }    public void initString(int offs, String str, AttributeSet a) throws BadLocationException {        super.insertString(offs, str, a);        init = false;    }    private boolean insertBeforeTild(int offs, String str, AttributeSet a) throws BadLocationException {        if (offs == 1)            super.insertString(4, str, a);        /* if(offs==1 || offs==4){            if(!one==true){               super.insertString(4,str,a);               // super.remove(offs+1,1);               //parent.moveCaretPosition(offs+3);                one=true;               return true;            }else{                super.createPosition(offs+5);                super.remove(offs+1,1);                super.insertString(offs+1,"-",a);                super.insertString(offs+2,str,a);            }        }*/        return false;    }    public void fillDate() {        try {            if (openUnknown("  ", "  ", "    ")) {                setDate("??", "??", "????");                return;            }            String tmp = "";            if (super.getText(8, 2).equals("  ") || parent.getCaretPosition() == 8) {                System.out.println("date non complète");                int value = parseString(super.getText(6, 2));                //super.remove(6,4);                if (value <= 15) {                    if (value < 10)                        tmp = "0" + value;                    super.insertString(6, "20" + tmp, null);                } else                    super.insertString(6, "19" + value, null);                cutTheQueue();            }        }        catch (BadLocationException bn) {            bn.printStackTrace();        }    }    private void cutTheQueue() throws BadLocationException {        int size = super.getLength();        if (size > 10) {            super.remove(10, size - 10);        }    }    public void setDate(String day, String month, String year) {        try {            if (day.length() == 1)                day = "0" + day;            if (month.length() == 1)                month = "0" + month;            super.remove(0, 2);            super.insertString(0, day, null);            super.remove(3, 2);            super.insertString(3, month, null);            super.remove(6, 4);            super.insertString(6, year, null);            cutTheQueue();        } catch (BadLocationException bn) {            bn.printStackTrace();        }    }    public void remove(int offs, int length) throws BadLocationException {        if (parent.isRemove()) {            System.out.println("tamere");            System.out.println("remove offset" + offs);            System.out.println("remove length" + length);            if (offs == 5 || offs == 2) {                super.remove(offs, 1);                super.insertString(offs, "/", null);                parent.setSelectionStart(offs);                parent.setSelectionEnd(offs);                super.remove(offs - 1, 1);                super.insertString(offs - 1, " ", null);                parent.setSelectionStart(offs - 1);                parent.setSelectionEnd(offs - 1);            } else {                super.remove(offs, 1);                super.insertString(offs, " ", null);                parent.setSelectionStart(offs);                parent.setSelectionEnd(offs);            }            if (offs == 6) {                parent.setSelectionStart(5);                parent.setSelectionEnd(5);            }            if (offs == 3) {                parent.setSelectionStart(2);                parent.setSelectionEnd(2);            }            parent.setRemove(false);        } else if (parent.isRemove2()) {            for (int i = offs; i < 10; i++) {                if (i != 5 && i != 2)                    if (!super.getText(i, 1).equals(" ")) {                        super.remove(i, 1);                        super.insertString(i, " ", null);                        parent.setSelectionStart(offs);                        parent.setSelectionEnd(offs);                        break;                    }            }            /*  if(offs==5 || offs==2){                super.remove(offs,1);                super.insertString(offs,"/",null);                parent.setSelectionStart(offs);                parent.setSelectionEnd(offs);                super.remove(offs+1,1);                super.insertString(offs+1," ",null);                parent.setSelectionStart(offs);                parent.setSelectionEnd(offs);                            }else{                super.remove(offs,1);                super.insertString(offs," ",null);                parent.setSelectionStart(offs);                parent.setSelectionEnd(offs);            }            if(offs==6){                parent.setSelectionStart(5);                parent.setSelectionEnd(5);            }            if(offs==3){                parent.setSelectionStart(2);                parent.setSelectionEnd(2);            }*/            parent.setRemove2(false);        }    }    protected int getDay() {        try {            return Integer.parseInt(super.getText(0, 2));        }        catch (NumberFormatException nn) {            return 1;        }        catch (BadLocationException bn) {            return 1;        }    }    protected int getMonth() {        try {            return Integer.parseInt(super.getText(3, 2));        }        catch (NumberFormatException nn) {            return 1;        }        catch (BadLocationException bn) {            return 1;        }    }    protected int getYear() {        try {            return Integer.parseInt(super.getText(6, 4));        }        catch (NumberFormatException nn) {            return 1001;        }        catch (BadLocationException bn) {            return 1001;        }    }    boolean one;    //--------------------------------------------------------------------------------------------------------------------------------    /**     * Getter for property open.     *     * @return Value of property open.     */    public boolean isOpen() {        return open;    }    /**     * Setter for property open.     *     * @param open New value of property open.     */    public void setOpen(boolean open) {        this.open = open;    }    /**     * Getter for property unknown.     *     * @return Value of property unknown.     */    public boolean isUnknown() {        return unknown;    }    /**     * Setter for property unknown.     *     * @param unknown New value of property unknown.     */    public void setUnknown(boolean unknown) {        this.unknown = unknown;    }    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // STATIC VARIABLES    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    /** value for erreur code */    /**     * the validate value     */    public static final String VALIDATE = "*#*VALIDATE*#*";    public static final String FOCUS_LOST = "*#*FOCULOST*#*";    /**     * value for day     */    public static final int DAY = 0;    /**     * value for month     */    public static final int MONTH = 1;    /**     * value for year     */    public static final int YEAR = 2;    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // CHAMPS DE LA CLASSE    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    protected int dateType;    protected ADate aDate;    protected boolean open;    protected boolean unknown;}