/* * reorgMysql.java * * Created on 9 octobre 2003, 11:00 */package srcastra.test;import java.io.*;import java.util.*;/** * * @author  Thomas */public class reorgMysql {        /** Creates a new instance of reorgMysql */    boolean badBlock=false;     Hashtable badTables;     int k;     int p;     int o;    public reorgMysql() {           badTables=new Hashtable();        badTables.put("assurance","");        badTables.put("avion_segments","");        badTables.put("avion_ticket","");        badTables.put("bateau","");        badTables.put("brochure","");        badTables.put("brochurelogement","");        badTables.put("conjonction","");        badTables.put("traductiontransport","");        badTables.put("traductiontva","");            badTables.put("dossierdestination","");         // badTables.put("fournisseur_contact","");          // badTables.put("groupedecision","");           File file=null;         File fileout=null;         File fileout2=null;         File fileout3=null;         File fileout4=null;         BufferedReader in=null;         BufferedWriter out=null;         BufferedWriter out2=null;         BufferedWriter out3=null;         BufferedWriter out4=null;         String str="";       try {        file=new File("C:\\Documents and Settings\\Administrateur\\Bureau\\be\\Astra.sql");        fileout=new File("C:\\Documents and Settings\\Administrateur\\Bureau\\be\\testthomreorg.sql");        fileout2=new File("C:\\Documents and Settings\\Administrateur\\Bureau\\be\\testthomtmp.sql");        fileout3=new File("C:\\Documents and Settings\\Administrateur\\Bureau\\be\\testthomtmp2.sql");        fileout4=new File("C:\\Documents and Settings\\Administrateur\\Bureau\\be\\table.txt");        in = new BufferedReader(new FileReader(file));        out=new BufferedWriter(new FileWriter(fileout));        out2=new BufferedWriter(new FileWriter(fileout2));        out3=new BufferedWriter(new FileWriter(fileout3));        out4=new BufferedWriter(new FileWriter(fileout4));          //BufferedWriter out=new BufferedWriter(new FileOutputStream(fileout));       // out=new BufferedWriter(new FileWriter(file));        int i=1;        boolean sw=false;        while ((str = in.readLine()) != null) {            String bloc="";            String tmp="";            String table="";            //if(str.indexOf("# Structure")!=-1){            if(str.indexOf("# Structure")!=-1){               table=checkTable(str);               out4.write(table+"\r\n");               out4.flush();               if((tmp=in.readLine())!=null){                   if(badBlock){                       if(!table.equals("avion_segments") && !table.equals("brochurelogement")){                        out2.write(tmp+"\n");                        out2.flush();                       }                       else{                            out3.write(tmp+"\n");                            out3.flush();                                                                             }                   }                   else{                       out.write(tmp+"\n");                       out.flush();                                             }               int m=0;               if(tmp!=null){               while(tmp.indexOf("# Structure")==-1){                   if(tmp.indexOf("# -")!=-1)                       break;                   if((tmp=in.readLine())!=null){                     if(badBlock){                      if(!table.equals("avion_segments") && !table.equals("brochurelogement")){                        out2.write(tmp+"\n");                        out2.flush();                      }                      else{                           out3.write(tmp+"\n");                            out3.flush();                                                           }                     }else{                       out.write(tmp+"\n");                       out.flush();                                              }                   //  System.out.println("ligne "+i+" "+tmp);                                         }                             }               }                                                                                                           //checkTable(str);               }               // if(badBlock){                 //   System.out.println("badblock\n");                  //  badTables.put(table, bloc);                //}              //  else{ System.out.println("goodbloc\n");               // System.out.println("bloc "+bloc+"\n\n\n\n");               // out.write(bloc);               // out.flush();               // }                           }                                   //   process(str);            i++;                    }        System.out.println("avant bad insert");       // insertBatables(out);        System.out.println("apres badinsert");        out4.close();        out2.flush();        out2.close();        out3.close();        in.close();        in = new BufferedReader(new FileReader(fileout2));        while ((str = in.readLine()) != null) {            out.write(str+"\n");            out.flush();        }        in.close();        in = new BufferedReader(new FileReader(fileout3));        while ((str = in.readLine()) != null) {            out.write(str+"\n");            out.flush();        }        in.close();        out.close();               System.out.println("finish");       // out.close();    } catch (IOException e) {        e.printStackTrace();    }        catch(NullPointerException nn){            try {        System.out.println("avant bad insert");       // insertBatables(out);        System.out.println("apres badinsert");        out2.flush();        out2.close();        in.close();        in = new BufferedReader(new FileReader(fileout2));        while ((str = in.readLine()) != null) {            out.write(str+"\n");            out.flush();        }        in.close();        in = new BufferedReader(new FileReader(fileout3));        while ((str = in.readLine()) != null) {            out.write(str+"\n");            out.flush();        }        out.close();               System.out.println("finish");         } catch (IOException ee) {        ee.printStackTrace();        }                    }    }    /**     * @param args the command line arguments     */    public static void main(String[] args) {        new reorgMysql();    }    private String checkTable(String str){       int first=str.indexOf("`");       int second=str.indexOf("`",first+1);    //   System.out.println("first "+first);    //   System.out.println("second "+second);       String table=str.substring(first+1,second);       System.out.println("table "+k+" "+table);       if(badTables.get(table)!=null)           badBlock=true;       else           badBlock=false;       k++;       return table;    }    private void insertBatables(BufferedWriter out)throws IOException{      if(badTables!=null)        for(Enumeration enu=badTables.keys();enu.hasMoreElements();){           String table=(String)enu.nextElement();           if(!table.equals("avion_segments") && !table.equals("brochurelogement")){               out.write((String)badTables.get(table));           }                   }       out.write((String)badTables.get("avion_segments"));       out.write((String)badTables.get("brochurelogement"));    }        }