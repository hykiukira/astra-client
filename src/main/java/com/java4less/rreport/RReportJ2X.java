package com.java4less.rreport;//  RReport//  Copyright (C)////  Java4Less@Confluencia.net//  All rights reserved//// Adquisition , use and distribution of this code is subject to restriction://  - You may modify the source code in order to adapt it to your needs.//  - You may not copy and paste any code into external files.//  - Redistribution of this (or a modified version) source cPDode is prohibited. You may only redistribute compiled versions.//  - You may redistribute the compiled version as part of your application, not a new java component with the same purpose as this one.//  - You may not remove this notice from the source code//  - This notice disclaim all warranties of all materialimport java.awt.*;import java.util.*;import java.awt.event.*;import java.awt.print.*;import java.sql.*;import javax.print.*;import javax.print.attribute.*;import javax.print.attribute.standard.*;/** * Subclass of RReportImp that uses java 2 printing API and some fetaures of jdk 1.4.<BR> * <p/> * It Provides 2 new properties for printer selecting (printerName and service). */public class RReportJ2X extends RReportImp implements Printable, Pageable {    private PrinterJob printerJob = null;    private PageFormat pageFormat = null;    private int copies = 1;    private PageFormat pf = null;    private progressWindow progressW = null;    private boolean printingNow = false;    /**     * use this printer     */    public String printerName = null;    /**     * requested printer resultion in dpi, if 0, the default will be used (70 dpi).     */    public int printerResolution = 0;    /**     * you can set the printer service you want to use. If null RReport will use the default.     */    public PrintService service = null;    /**     * you can create you own PrinRequestattributeSet     */    private PrintRequestAttributeSet aset = null; // set of attributes of the request    /**     * Creates a report. Owner may be null.     */    public RReportJ2X(Frame Owner) {        super(Owner);        this.firstCreateObjects = true;    }    /**     * get current connection to database. Will be automatically set if DBActive=true in *.rep file.     */    public Connection getDBCon() {        return super.getDBCon();    }    /**     * sets current connection to database.     */    public void setDBCon(Connection c) {        super.setDBCon(c);    }    /**     * method of PRINTABLE interface     */    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {        // update progress window        if (this.showProgressWindow) {            progressW.setCurrentPage(pageIndex + 1, true);            if (progressW.isCancelled()) return Printable.NO_SUCH_PAGE;            this.progressW.paintAll(this.progressW.getGraphics());        }        if (pageIndex >= maxPages) return Printable.NO_SUCH_PAGE;        if (Pages.size() <= pageIndex) {            System.out.println("Page " + pageIndex + " not found");            return Printable.NO_SUCH_PAGE;        }        // print requested page        RPage p = (RPage) Pages.elementAt(pageIndex);        p.rePrint(graphics);        return this.PAGE_EXISTS;    }    /**     * method of PAGEABLE interface     */    public int getNumberOfPages() {        return maxPages;    }    /**     * method of PAGEABLE interface     */    public PageFormat getPageFormat(int pageIndex) {        return pf;    }    /**     * method of PAGEABLE interface     */    public Printable getPrintable(int pageIndex) {        return this;    }    /**     * finish printing     */    protected void endPrintJob() {    }    /**     * start report     */    public boolean prepare() {        Paper paper = createPaper();        // show progress window        if (this.showProgressWindow) {            if (progressW == null) progressW = new progressWindow();            //progressW.setModal(false);            //progressW.setVisible(true);            progressW.lblProgress.setText("Preparing pages ... ");            progressW.setMaxPages(0);            progressW.setCurrentPage(0, false);            progressW.allowCancel(false);            progressW.setModal(false);            progressW.setVisible(true);        }        printingNow = false;        if ((!this.disabledPrinting) || (bPreview)) {            // Step 1: Set up initial print settings.            if (aset == null) aset = new HashPrintRequestAttributeSet();            if (this.getOrientation() == this.ORIENTATION_HORIZONTAL) aset.add(OrientationRequested.LANDSCAPE);            else aset.add(OrientationRequested.PORTRAIT);            aset.add(new Copies(copies));            aset.add(new JobName(this.getTitle(), null));            if (printerResolution > 0)                aset.add(new PrinterResolution(printerResolution, printerResolution, ResolutionSyntax.DPI));            //MediaSize size = MediaSize.findMedia(paper.get);            //aset.add(size);            // aset.add(MediaTray.MANUAL);            // aset.add(new Destination("file:c:\out.prn"));            // aset.add(SheetCollate.COLLATED);            // aset.add(Sides.DUPLEX);            // aset.add(Fidelity.FIDELITY_TRUE);            // Step 2: Obtain a print job.            printerJob = PrinterJob.getPrinterJob();            printerJob.setJobName(this.getTitle());            if (printerJob == null) return false;            // find printer by name            if (printerName != null)                if ((service == null) && (printerName.length() == 0)) {                    // Step 3: Find print services.                    PrintService[] services = PrinterJob.lookupPrintServices();                    for (int h = 0; h < services.length; h++)                        if (services[h].getName().toLowerCase().compareTo(printerName.toLowerCase()) == 0)                            service = services[h];                }            if (service != null)                try {                    printerJob.setPrintService(service);                } catch (Exception e) {                    e.printStackTrace();                }            if (printerJob.getPrintService() != null)                printerName = printerJob.getPrintService().getName();            // Create page format            pf = printerJob.defaultPage();            if (this.getOrientation() == this.ORIENTATION_HORIZONTAL) pf.setOrientation(PageFormat.LANDSCAPE);            pf.setPaper(paper);            if (this.showPageDialog) {                //pf=printerJob.pageDialog(aset);                pf = printerJob.pageDialog(pf);                pf = printerJob.validatePage(pf);                this.setDefaultPageSize((pf.getWidth() * 2.56) / 72, (pf.getHeight() * 2.56) / 72);                //MediaPrintableArea printableArea =                //(MediaPrintableArea)service.                //        getSupportedAttributeValues(MediaPrintableArea.class, null, aset);                this.marginLeft = (pf.getImageableX() * 2.56) / 72;                this.marginTop = (pf.getImageableY() * 2.56) / 72;                this.marginRight = ((pf.getWidth() - (pf.getImageableX() + pf.getImageableWidth())) * 2.56) / 72;                this.marginBottom = ((pf.getHeight() - (pf.getImageableY() + pf.getImageableHeight())) * 2.56) / 72;                pf.setPaper(createPaper());            }        }        if (printSetup != null)            if (printSetup instanceof RPrintSetupJDK13) {                // configuration                this.showPrintDialog = ((RPrintSetupJDK13) printSetup).showDialog;                this.copies = ((RPrintSetupJDK13) printSetup).copies;            }        return super.prepare();    }    private Paper createPaper() {        Paper p = new Paper();        if (this.getOrientation() == this.ORIENTATION_HORIZONTAL) {            p.setSize(72 * (this.mPageHeightCM / 2.56), 72 * (this.mPageWidthCM / 2.56));            double imX = (this.marginLeft / 2.56) * 72;            double imY = (this.marginTop / 2.56) * 72;            double imW = 72 * ((this.mPageWidthCM - this.marginLeft - this.marginRight) / 2.56);            double imH = 72 * ((this.mPageHeightCM - this.marginTop - this.marginBottom) / 2.56);            p.setImageableArea(imY - 2, imX - 2, imH + 10, imW + 10);        } else {            p.setSize(72 * (this.mPageWidthCM / 2.56), 72 * (this.mPageHeightCM / 2.56));            double imX = (this.marginLeft / 2.56) * 72;            double imY = (this.marginTop / 2.56) * 72;            double imW = 72 * ((this.mPageWidthCM - this.marginLeft - this.marginRight) / 2.56);            double imH = 72 * ((this.mPageHeightCM - this.marginTop - this.marginBottom) / 2.56);            p.setImageableArea(imX - 2, imY - 2, imW + 10, imH + 10);        }        return p;    }    /**     * new page     */    protected RPage newPage(boolean preview, boolean firstPage) {        // update progress window        if (this.showProgressWindow) {            this.progressW.setCurrentPage(this.currentPageNumber + 1, false);        }        return super.newPage(preview, firstPage);    }    /**     * finish report     */    public void endReport() {        super.endReport();        // trigger now printing        if ((!this.disabledPrinting) && (!bPreview)) printNow();        // close progess window        if (this.showProgressWindow) {            this.progressW.setVisible(false);        }    }    /**     * Call this method if you want to print the preview. In this case you must add the RReport (RReport is a panel) to your preview window.     */    public boolean printPreview(int[] PagesToPrint, int Count) {        printNow();        return true;    }    /**     * print report here     */    private void printNow() {        try {            printingNow = true;            printerJob.setPageable(this);            //printerJob.setPrintable(this,pf);            if (this.showPrintDialog) {                printerJob.setCopies(this.copies);                if (!printerJob.printDialog()) return;            }            printThread t = new printThread();            ((Thread) t).start();            // show progress window            if (this.showProgressWindow) {                progressW.setModal(true);                progressW.allowCancel(true);                progressW.setMaxPages(maxPages);                progressW.setCurrentPage(0, true);                progressW.setVisible(true);            }            t.join();            // cancel printing?            if (this.showProgressWindow)                if (progressW.isCancelled()) printerJob.cancel();        } catch (Exception e) {            System.out.println("Error when printing: " + e.getMessage());        }    }    class printThread extends Thread {        public void run() {            try {                printerJob.print(aset);                // close progess window                if (showProgressWindow) progressW.setVisible(false);            } catch (Exception e) {                System.out.println("Error when printing: " + e.getMessage());            }        }    }}